<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM6I17R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="NvM" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.2.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                      <ad:DATE>2011-11-09T11:36:22Z</ad:DATE>
                    </ad:DOC-REVISION>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>6.17.22</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>Elektrobit Automotive GmbH</ad:ISSUED-BY>
                      <ad:DATE>2021-07-14T23:59:59Z</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC">
                <a:v>&lt;html&gt;
                      Configuration of the NvM (NvRam Manager) module.
                    &lt;/html&gt;</a:v>
              </a:a>
              <a:a name="LOWER-MULTIPLICITY" value="1"/>
              <a:a name="RELEASE" value="asc:4.0"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <a:a name="UUID" value="352c0d8a-ff84-4da8-b86b-c7dc28b86c78"/>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="3"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="2"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="6"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="17"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="22"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="20"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                     type="IMPLEMENTATIONCONFIGCLASS">
                  <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                </a:a>
                <a:a name="LABEL" value="Config Variant"/>
                <a:a name="UUID" value="748a0e97-009e-4f07-bb04-a2fd0b686387"/>
                <a:da name="DEFAULT" value="VariantPreCompile"/>
                <a:da name="EDITABLE" value="false"/>
                <a:da name="RANGE" value="VariantPreCompile"/>
              </v:var>
              <v:lst name="NvMBlockDescriptor" type="MAP">
                <a:a name="LABEL" value="Block List"/>
                <a:a name="TAB" value="Block Configuration"/>
                <a:da name="MAX" value="65536"/>
                <a:da name="MIN" value="1"/>
                <v:ctr name="NvMBlockDescriptor" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Container for a management structure to
                          configure the composition of a given NVRAM
                          Block Management Type. Its multiplicity describes
                          the number of configured NVRAM blocks, one block
                          is required to be configured.&lt;/p&gt;

                          &lt;p&gt;The NVRAM block descriptors are condensed
                          in the NVRAM block descriptor table.
                          The start address of the table is configured
                          in the &lt;code&gt;NVMCommon&lt;/code&gt; parameters.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="UUID" value="71793d38-101d-4249-bc4e-d6b8cf1e8d90"/>
                  <a:da name="TITLE" value="Block Configuration"/>
                  <v:var name="NvMAdvancedRecovery" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;Enables additional
                          recovery mechanisms during NvM_ReadAll()/NvM_ReadBlock() requests.&lt;/p&gt;

                          &lt;ul&gt;
                          &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Additional recovery mechanism
                          is enabled for this block.
                          &lt;/li&gt;
                          &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Additional recovery mechanism
                          is disabled for this block.
                          &lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Blocks can be recovered from the ROM block or via
                          call to a user-defined initialization function. &lt;/p&gt;

                          &lt;p&gt;Blocks that are recovered
                          will be marked for writing
                          during &lt;code&gt;NvM_WriteAll()&lt;/code&gt;
                          (including blocks which are marked as
                          write protected).&lt;/p&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;RAM Block Data Address (&lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;): this feature is only
                          supported for blocks with a permanent RAM block address configured.&lt;/li&gt;
                          &lt;li&gt;Rom Block Data Address (&lt;code&gt;NvMRomBlockDataAddress&lt;/code&gt;) = if a ROM address is configured for the block,
                          and the recovery from the redundant block was unsuccessful, the ROM copy will be used to try to recover the data&lt;/li&gt;
                          &lt;li&gt;Initialize NVRAM Block Data Function (&lt;code&gt;NvMInitBlockCallback&lt;/code&gt;) = this specifies the user defined
                          initialization function to be called by the NvM to recover the data,
                          if the previous recovery attempts were unsuccessful.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Independent of the setting of this parameter,
                          the implicit error recovery is performed for
                          all unprotected blocks with a permanent RAM block.&lt;/p&gt;
                          &lt;p&gt;Independent of the setting of this parameter,
                          explicit recovery can also be performed
                          with &lt;code&gt;NvM_RestoreBlockDefaults&lt;/code&gt;.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Advanced Recovery"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="false"/>
                  </v:var>
                  <v:var name="NvMBlockCrcType" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines CRC data width for the NVRAM block.&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Block CRC Type &lt;code&gt;NVM_CRC8&lt;/code&gt;  &lt;/li&gt;
                            &lt;li&gt;Block CRC Type &lt;code&gt;NVM_CRC16&lt;/code&gt; &lt;/li&gt;
                            &lt;li&gt;Block CRC Type &lt;code&gt;NVM_CRC32&lt;/code&gt; &lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Default: &lt;code&gt;NVM_CRC16&lt;/code&gt;&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Use of Block CRC (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;): this must be enabled if CRC calculation for this block is required&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Note: For CRC8 calculation,  the NvM module supports SAE J1850 CRC Calculation only.
                                     Activate support for this CRC8 calculation by enabling the CRC8 Mode parameter in the Crc module (not the CRC8 H2F Mode)&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Block CRC Type"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="CRC"/>
                    <a:a name="UUID" 
                         value="dc13605c-4fc4-4552-883c-1ef916df921d"/>
                    <a:da name="DEFAULT" value="NVM_CRC16"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../NvMBlockUseCrc =&apos;true&apos;"/>
                    <a:da name="ENABLE" value="true"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(../NvMNvramBlockIdentifier = 1) and (. = &apos;&apos;)" 
                          true="NvMNvramBlockIdentifier 1 must have CRC configured"/>
                    <a:da name="RANGE">
                      <a:v>NVM_CRC8</a:v>
                      <a:v>NVM_CRC16</a:v>
                      <a:v>NVM_CRC32</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBlockJobPriority" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the job priority for a block stored
                            in non-volatile memory (NVRAM)&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Job Prioritization (&lt;code&gt;NvMJobPrioritization&lt;/code&gt;): this must be enabled if job prioritization
                            is required. Blocks will then be handled depending on their actual priority setting.&lt;/li&gt;
                            &lt;li&gt;Enable Use of Block CRC (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;): This is expected to be disabled if the block is
                            configured with immediate priority (&lt;code&gt;NvMBlockJobPriority&lt;/code&gt; = 0).&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;0 (highest) : use for blocks containing immediate data.
                            These blocks shall be configured as immediate blocks in the underlying abstraction layer (Ea/Fee)&lt;/li&gt;
                            &lt;li&gt;1 (high) .. 255 (low) : use to prioritize blocks other than those with immediate data.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Job Priority for Block"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="f1517d67-e243-4c51-9480-09ee031fc182"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../../../NvMCommon/NvMJobPrioritization = &apos;true&apos;" 
                          true="true" false="false"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=255"/>
                        <mt:tst expr="&gt;=0"/>
                      </mt:range>
                      <mt:xpath>
                        <mt:tst 
                                true="No Fee/Ea blocks can be configured with immediate data for blocks with NvMBlockJobPriority &gt; 0 " 
                                expr="(../../../NvMCommon/NvMJobPrioritization = &apos;true&apos;) and                                    (. != &apos;0&apos;) and                                    ((node:refvalid(../NvMTargetBlockReference/NvMNameOfFeeBlock) and                                     (count(node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/../*[(bit:shr(FeeBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber) and                                      (FeeImmediateData = &apos;true&apos;)]) != 0                                     )                                    )or                                     (node:refvalid(../NvMTargetBlockReference/NvMNameOfEaBlock) and                                     (count(node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/../*[(bit:shr(EaBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber) and                                      (EaImmediateData = &apos;true&apos;)]) != 0                                     )))"/>
                        <mt:tst 
                                true="Fee/Ea blocks must be configured with immediate data for blocks with NvMBlockJobPriority = 0 " 
                                expr="(../../../NvMCommon/NvMJobPrioritization = &apos;true&apos;) and                                    (. = &apos;0&apos;) and                                    ((node:refvalid(../NvMTargetBlockReference/NvMNameOfFeeBlock) and                                     (count(node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/../*[(bit:shr(FeeBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber) and                                      (FeeImmediateData = &apos;true&apos;)]) != ../NvMNvBlockNum                                     )                                    )or                                     (node:refvalid(../NvMTargetBlockReference/NvMNameOfEaBlock) and                                     (count(node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/../*[(bit:shr(EaBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber) and                                      (EaImmediateData = &apos;true&apos;)]) != ../NvMNvBlockNum                                     )                                    ))"/>
                      </mt:xpath>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBlockManagementType" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the block management type
                            for the NVRAM block.&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;NVM_BLOCK_NATIVE&lt;/code&gt; (1 NV block)&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;NVM_BLOCK_REDUNDANT&lt;/code&gt; (2 NV blocks)&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;NVM_BLOCK_DATASET&lt;/code&gt; (1 .. 255 NV blocks, depending on number
                            of data selection bits)&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Note: the block management type selected affects the block numbering configuration in the underlying
                            abstraction layer (Ea/Fee). For further details and examples, refer to the memory stack User&apos;s Guide.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Block Management Type"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="dab8fb8a-6258-4fd0-8917-32be8822fd73"/>
                    <a:da name="DEFAULT" value="NVM_BLOCK_NATIVE"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;NVM_BLOCK_DATASET&apos;) and ((../NvMRomBlockNum + ../NvMNvBlockNum) &gt; 255)" 
                          true="The total number of datasets is greater than 255!"/>
                    <a:da name="RANGE">
                      <a:v>NVM_BLOCK_DATASET</a:v>
                      <a:v>NVM_BLOCK_NATIVE</a:v>
                      <a:v>NVM_BLOCK_REDUNDANT</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBlockUseCrc" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the use of CRC for the NVRAM block.
                            The CRC will be written to NV memory together with the block data.&lt;/p&gt;

                            &lt;p&gt;Note: Memory space for the block data and its CRC is reserved internally
                            unless otherwise specified by the user using parameter
                            &lt;code&gt;NvMUserProvidesSpaceForBlockAndCrc&lt;/code&gt; for permanent RAM blocks.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                  CRC will be used for this NVRAM block&lt;/li&gt;

                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                  CRC will not be used for this NVRAM block&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Use of Block CRC"/>
                    <a:a name="OPTIONAL" value="false"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="CRC"/>
                    <a:a name="UUID" 
                         value="21ce75f7-5e18-4837-831e-f92c06a78a52"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" value="true"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(../NvMWriteBlockOnce = &apos;true&apos;) and (. = &apos;false&apos;)" 
                             true="Blocks with NvMWriteBlockOnce = TRUE are expected to have a CRC!"/>
                      <a:tst 
                             expr="(not(node:exists(../NvMBlockCrcType))) and (. =&apos;true&apos;)" 
                             true="NvMBlockCrcType must be enabled to use NvMBlockUseCrc"/>
                    </a:da>
                    <a:da name="WARNING" type="XPath">
                      <a:tst 
                             expr="(../../../NvMCommon/NvMJobPrioritization = &apos;true&apos;) and                                    (../NvMBlockJobPriority = 0) and (. = &apos;true&apos;)" 
                             true="Blocks with immediate priority are not expected to have a CRC!"/>
                      <a:tst 
                             expr=". = &apos;true&apos; and count(as:modconf(&apos;Crc&apos;)/*) = 0" 
                             true="The usage of the CRC is enabled for this block, but CRC module is disabled or missing."/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBlockUseSyncMechanism" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables explicit synchronization for this block.&lt;/p&gt;

                            &lt;p&gt;A RAM mirror is used as a buffer for reading and writing this block.
                            The RAM block and the RAM mirror are synchronized explicitly when dedicated
                            call-back routines are called from the NvM. The call-backs transfer the data
                            between the RAM block and the RAM mirror and must be implemented by the application.
                            &lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                  Explicit synchronization will be enabled for this block&lt;/li&gt;

                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                  Explicit synchronization will be disabled for this block&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;NvM to RAM Copy Call-back Function (&lt;code&gt;NvMReadRamBlockFromNvCallback&lt;/code&gt;):
                            call-back to transfer data from the NvM mirror to the RAM block&lt;/li&gt;
                            &lt;li&gt;RAM to NvM Copy Call-back Function (&lt;code&gt;NvMWriteRamBlockToNvCallback&lt;/code&gt;):
                            call-back to transfer data from the RAM block to the NvM mirror&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable Explicit Synchronization Mechanism"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Callbacks"/>
                    <a:a name="UUID" 
                         value="dac9b13f-200f-413a-b2cb-fd7ceea0f8e7"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(. = &apos;true&apos; and node:empty(../NvMReadRamBlockFromNvCallback) and (../NvMProvideRteMirrorPort = &apos;false&apos;))" 
                             true="Synchronization Mechanism is enabled but NvM to RAM Copy Call-back Function is not configured!"/>
                      <a:tst 
                             expr="(. = &apos;true&apos; and node:empty(../NvMWriteRamBlockToNvCallback) and (../NvMProvideRteMirrorPort = &apos;false&apos;))" 
                             true="Synchronization Mechanism is enabled but RAM to NvM Copy Call-back Function is not configured!"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBlockWriteProt" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables initial write protection for the NV block.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                  Initial block write protection is enabled&lt;/li&gt;

                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                  Initial block write protection is disabled&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable Initial Write Protection for Block"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="61d8a2e0-7df4-4081-a2f3-d5649930f28c"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(../NvMWriteBlockOnce = &apos;true&apos;) and (. = &apos;true&apos;)" 
                          true="Blocks with NvMWriteBlockOnce = TRUE are not expected to be write-protected!"/>
                  </v:var>
                  <v:var name="NvMBswMBlockStatusInformation" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines whether BswM is informed about the current status
                            of the specified block.&lt;/p&gt;

                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Report current status of block to BswM&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Don&apos;t Report current status of block to BswM&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable &lt;code&gt;BswMNvMEnabled&lt;/code&gt;: this must be selected to enable the
                            NvM module related BswM API.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable BswM Block Status Information"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="6f306e25-190d-4a6b-9445-887d90cc15ec"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. = &apos;true&apos;) and (not(node:exists(as:modconf(&apos;BswM&apos;)/BswMGeneral/BswMNvMEnabled) and (as:modconf(&apos;BswM&apos;)/BswMGeneral/BswMNvMEnabled = &apos;true&apos;)))" 
                          true="The usage of NvM in BswM (BswMNvMEnabled) is disabled."/>
                  </v:var>
                  <v:var name="NvMCalcRamBlockCrc" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables CRC (re)calculation for a
                            permanent RAM block&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                  CRC will be (re)calculated for this
                                  permanent RAM block&lt;/li&gt;

                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                  CRC will not be (re)calculated for this
                                  permanent RAM block&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Enable Use of Block CRC (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;): this must be enabled to use CRC for a block
                          and therefore also for configuring the CRC (re)calculation of a permanent RAM block.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable Calculation of Permanent RAM Block CRC"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="CRC"/>
                    <a:a name="UUID" 
                         value="4894342d-20cf-434d-88d8-3ca7990a37f7"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../NvMBlockUseCrc =&apos;true&apos;"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="node:exists(.) and (. = &apos;true&apos;) and (../NvMBlockUseCrc=&apos;false&apos;)" 
                          true="CRC is not enabled for the NV block (NvMBlockUseCrc)"/>
                  </v:var>
                  <v:var name="NvMBlockUseCRCCompMechanism" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables CRC comparison mechanism for a
                            RAM block during a write job.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                  The job of the function NvM_WriteBlock shall skip writing and consider the job as successfully finished 
                                  if the RAM block CRC calculated by the write job is equal to the CRC calculated during the last successful 
                                  read or write job.&lt;/li&gt;

                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                 A &quot;Write Request&quot; job shall proceed with writing without taking in consideration any changes CRC value. &lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Enable Use of Block CRC (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;) : this must be enabled to use CRC for a block
                          and therefore also for configuring the CRC comparison mechanism.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable CRC Comparison Mechanism ."/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="CRC"/>
                    <a:a name="UUID" 
                         value="00f2c4ce-ce21-11e7-abc4-cec278b6b50a"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../NvMBlockUseCrc =&apos;true&apos;)"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="node:exists(.) and (. = &apos;true&apos;) and (../NvMBlockUseCrc=&apos;false&apos;)" 
                          true="CRC is not enabled for the NV block (NvMBlockUseCrc)"/>
                  </v:var>
                  <v:var name="NvMBlockUseSetRamBlockStatus" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines if NvMSetRamBlockStatusApi shall be used for this block or not.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                  Calling of NvMSetRamBlockStatus for this RAM block shall set the status of the RAM block.&lt;/li&gt;

                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                  Calling of NvMSetRamBlockStatus for this RAM block shall be ignored.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Service SetRamBlockStatus"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="63c26ac0-ce97-11e7-abc4-cec278b6b50a"/>
                    <a:da name="DEFAULT" value="true"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="as:modconf(&apos;NvM&apos;)[1]/NvMCommon/NvMSetRamBlockStatusApi =&apos;true&apos;"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="node:exists(.) and (. = &apos;true&apos;) and (as:modconf(&apos;NvM&apos;)[1]/NvMCommon/NvMSetRamBlockStatusApi =&apos;false&apos;)" 
                          true="The parameter NvMBlockUseSetRamBlockStatus is ignored because NvMSetRamBlockStatusApi parameter is disabled!"/>
                  </v:var>
                  <v:var name="NvMExtraBlockChecks" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables extra compile-time checks for
                            configured RAM (&lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;)
                            and ROM (&lt;code&gt;NvMRomBlockDataAddress&lt;/code&gt;)
                            block sizes.&lt;/p&gt;

                            &lt;p&gt;The size of the block data, calculated using the
                            &lt;code&gt;sizeof()&lt;/code&gt; C function, is compared to the
                            data block size configured with the parameter
                            &lt;code&gt;NvMNvBlockLength&lt;/code&gt; and the length of the
                            CRC (if CRC is configured for the block and
                            &lt;code&gt;NvMUserProvidesSpaceForBlockAndCrc&lt;/code&gt;
                            configuration parameter is enabled).&lt;/p&gt;

                            &lt;p&gt;Note: The block size check is only performed if the configured value starts with &quot;&amp;&quot;.
                            In case of using arrays, the block size check for the entire array will be performed
                            only if the address of the array is given (e.g. &amp;My_RAMBlockTable).
                            The block size check for one element of the array is performed only if the address 
                            of one element is given (e.g. &amp;My_RAMBlockTable[0]). 
                            Even if passing the name of the array might be a valid configuration,
                            the block size check will not be performed in this case.&lt;/p&gt;

                            &lt;p&gt;Note: If the user enables the parameter
                            &lt;code&gt;NvMUserProvidesSpaceForBlockAndCrc&lt;/code&gt;, the space required
                            for the CRC is considered along with the block length
                            (&lt;code&gt;NvMNvBlockLength&lt;/code&gt;) when the block
                            size check is performed.&lt;/p&gt;

                            &lt;p&gt;Note: Due to the fact that Autosar does not
                            specify the type of address for
                            &lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt; and
                            &lt;code&gt;NvMRomBlockDataAddress&lt;/code&gt;, it is
                            not possible to check for the correct sizes
                            if the size of the associated RAM or ROM
                            variable cannot be determined with the
                            &lt;code&gt;sizeof()&lt;/code&gt; C function.
                            In such cases, disable the block size check.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;RAM Block Data Address &lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt; or Rom Block Data Address
                            &lt;code&gt;NvMRomBlockDataAddress&lt;/code&gt; needs to be configured for performing Extra Block Checks.&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Block Size Check"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="Checks"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. = &apos;true&apos;) and ((not(node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress !=&apos;&apos;)))                                    and (not(node:exists(../NvMRomBlockDataAddress) and (../NvMRomBlockDataAddress !=&apos;&apos;))))" 
                          true="No extra block size checks will be performed since neither NvMRamBlockDataAddress nor NvMRomBlockDataAddress is configured."/>
                  </v:var>
                  <v:var name="NvMInitBlockCallback" type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the name of a block specific call-back
                            function that will be called if no ROM
                            data is available for initialization of
                            the NVRAM block.&lt;/p&gt;

                            &lt;p&gt;Options:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; name of call-back function: this function will be called to initialize NVRAM block data&lt;/li&gt;
                            &lt;li&gt; empty: no function will be called &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Initialize NVRAM Block Data Function"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Callbacks"/>
                    <a:a name="UUID" 
                         value="986458f7-3bc6-4f7c-99f6-20b4c233ed8e"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:exists(../NvMRomBlockDataAddress)" 
                          true="Only one of NvMRomBlockDataAddress and NvMInitBlockCallback can be configured for a block"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. != &apos;&apos;) and (../NvMProvideRteInitBlockPort = &apos;true&apos;)" 
                          true="The configuration parameter NvMInitBlockCallback is ignored because NvMProvideRteInitBlockPort is set to true."/>
                  </v:var>
                  <v:var name="NvMMaxNumOfReadRetries" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the maximum number of read retries
                            for this block.&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;0 .. 7&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Max. Number of Read Retries"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="432fcff4-e8fe-45a7-bfba-0db4904bac16"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=7"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMMaxNumOfWriteRetries" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the maximum number of write retries
                            for an NVRAM block.&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;0 .. 7&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Max. Number of Write Retries"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="8a00c8c8-d755-4004-b6b8-ba079601a0fa"/>
                    <a:da name="DEFAULT" value="3"/>
                    <a:da name="EDITABLE" value="true"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=7"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMNvBlockBaseNumber" type="INTEGER">
                    <a:a name="CALCULATION-FORMULA" value="INFORMAL"/>
                    <a:a name="CALCULATION-LANGUAGE" value="INFORMAL"/>
                    <a:a name="DERIVED" value="TRUE"/>
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the link between the Block Identifier
                            (&lt;code&gt;NvMNvramBlockIdentifier&lt;/code&gt;) used by SW-Cs and
                            the &lt;code&gt;Fee/Ea Block Number&lt;/code&gt; expected by the memory abstraction modules.
                            The parameter is calculated from &lt;code&gt;FeeBlockNumber&lt;/code&gt;
                            or &lt;code&gt;EaBlockNumber&lt;/code&gt; with all configured
                            Data-set selection bits set to zero.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Fee/Ea Block Number (&lt;code&gt;[Fee/Ea]BlockNumber&lt;/code&gt;):
                            the block base number is the value of &lt;code&gt;[Fee/Ea]BlockNumber&lt;/code&gt;
                            referenced in &lt;code&gt;NvMTargetBlockReference&lt;/code&gt; shifted right by
                            the number of data-set selection bits.&lt;/li&gt;

                            &lt;li&gt;Number of Data-set Selection Bits (&lt;code&gt;NvMDatasetSelectionBits&lt;/code&gt;):
                            See the above dependency.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The calculated default value of the Block Base Number
                            must not be changed. Whenever the Block Number of the associated
                            Fee or Ea block is changed, the value of Block Base Number must be
                            recalculated.&lt;/p&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Block Base Number"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Target"/>
                    <a:a name="UUID" 
                         value="848295be-d056-4acf-b873-3a10f95c03d8"/>
                    <a:da name="DEFAULT" type="XPath" 
                          expr="bit:shr((num:i(node:ref(../NvMTargetBlockReference/*)/*[contains(name(.), &apos;BlockNumber&apos;)])), ../../../NvMCommon/NvMDatasetSelectionBits)"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65534"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:range>
                      <mt:xpath 
                                true="The block number of the referenced Fee/Ea block does not match the NvMNvBlockBaseNumber" 
                                expr="(( node:refvalid(../NvMTargetBlockReference/NvMNameOfEaBlock) and                                     (bit:shl(../NvMNvBlockBaseNumber,../../../NvMCommon/NvMDatasetSelectionBits) !=                                     num:i(node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/EaBlockNumber))))                                     or                                     (( node:refvalid(../NvMTargetBlockReference/NvMNameOfFeeBlock) and                                     (bit:shl(../NvMNvBlockBaseNumber,../../../NvMCommon/NvMDatasetSelectionBits) !=                                     num:i(node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/FeeBlockNumber))))"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMNvBlockLength" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            Defines the NV block data length in bytes
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Block Length"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="810f5170-3ed4-455a-8825-9dcdd5298cf9"/>
                    <a:da name="DEFAULT" type="XPath" 
                          expr="node:when( ../NvMNvramBlockIdentifier = &apos;1&apos;, num:i(2), num:i(0) )"/>
                    <a:da name="EDITABLE" value="true"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:range>
                      <mt:xpath 
                                true="Block 1 should not a length greater than 8." 
                                expr="((. &gt; 8) and (../NvMNvramBlockIdentifier = &apos;1&apos;))"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMNvBlockNum" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the number of copies of NVRAM blocks in
                            a contiguous memory area.
                            This number depends on the
                            block management type configured.&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Block management type &lt;code&gt;NVM_BLOCK_DATASET&lt;/code&gt; : 1 .. 255
                            Note: the number that can be configured here is limited.
                            The total number of these copies
                            plus the number of ROM copies must lie in this range.&lt;/li&gt;

                            &lt;li&gt;Block management type &lt;code&gt;NVM_BLOCK_NATIVE&lt;/code&gt; : 1&lt;/li&gt;

                            &lt;li&gt;Block management type &lt;code&gt;NVM_BLOCK_REDUNDANT&lt;/code&gt; : 2&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Block Management Type (&lt;code&gt;NvMBlockManagementType&lt;/code&gt;): limits the range selection.&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Number of NVRAM Copies for Block"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="c4c27bf6-a235-48cb-b82c-70970be1c768"/>
                    <a:da name="DEFAULT" value="1"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=255"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:range>
                      <mt:xpath>
                        <mt:tst 
                                true="For native blocks this value must be set to 1 " 
                                expr="(../NvMBlockManagementType = &apos;NVM_BLOCK_NATIVE&apos;) and (. != 1)"/>
                        <mt:tst 
                                true="For redundant blocks this value must be set to 2 " 
                                expr="(../NvMBlockManagementType = &apos;NVM_BLOCK_REDUNDANT&apos;) and (. != 2)"/>
                        <mt:tst 
                                true="The number of corresponding blocks in Fee/Ea does not equal the NvMNvBlockNum parameter value" 
                                expr="( ( node:refvalid(../NvMTargetBlockReference/NvMNameOfFeeBlock) and                                         (count(node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/../../FeeBlockConfiguration/*[bit:shr(FeeBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber]) &lt; .)                                       ) or                                       ( node:refvalid(../NvMTargetBlockReference/NvMNameOfEaBlock) and                                         (count(node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/../../EaBlockConfiguration/*[bit:shr(EaBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber]) &lt; .)                                       )                                     )"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="( ( node:refvalid(../NvMTargetBlockReference/NvMNameOfFeeBlock) and                                         (count(node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/../../FeeBlockConfiguration/*[bit:shr(FeeBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber]) &gt; .)                                       ) or                                       ( node:refvalid(../NvMTargetBlockReference/NvMNameOfEaBlock) and                                         (count(node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/../../EaBlockConfiguration/*[bit:shr(EaBlockNumber,node:current()/../../../NvMCommon/NvMDatasetSelectionBits) = node:current()/../NvMNvBlockBaseNumber]) &gt; .)                                       )                                     )" 
                          true="The number of corresponding blocks in Fee/Ea are greater than the NvMNvBlockNum parameter value"/>
                  </v:var>
                  <v:var name="NvMNvramBlockIdentifier" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines a unique identifier to reference the NVRAM block.&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;1 .. 2^(16-&lt;code&gt;NVM_DATASET_SELECTION_BITS&lt;/code&gt;)-1&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Note: the following block identifiers are reserved&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;0 : this is reserved to retrieve the results of multiblock requests with &lt;code&gt;NvM_GetErrorStatus&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;1 : this is reserved for the redundant NVRAM block which holds the configuration ID&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Block Identifier"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                    <a:a name="UUID" 
                         value="054d92ed-58dd-4c92-84e2-d5b32f25a65f"/>
                    <a:da name="DEFAULT" type="XPath" 
                          expr="num:integer(../@index + 1)"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:range>
                      <mt:xpath>
                        <mt:tst 
                                false="NvMNvRamBlockIdentifier must be unique for each block." 
                                expr="text:uniq((../../*/NvMNvramBlockIdentifier), .)"/>
                        <mt:tst 
                                true="The NvMRamBlock with ID 1 must have NvMBlockManagementType &apos;NVM_BLOCK_REDUNDANT&apos;" 
                                expr="(. = 1) and (not(../NvMBlockManagementType = &apos;NVM_BLOCK_REDUNDANT&apos;))"/>
                        <mt:tst 
                                true="The NvMRamBlock with ID 1 must have NvMBlockUserCrc set to true" 
                                expr="(. = 1) and (not(../NvMBlockUseCrc = &apos;true&apos;))"/>
                      </mt:xpath>
                    </a:da>
                  </v:var>
                  <v:var name="NvMNvramDeviceId" type="INTEGER">
                    <a:a name="CALCULATION-FORMULA" value="INFORMAL"/>
                    <a:a name="CALCULATION-LANGUAGE" value="INFORMAL"/>
                    <a:a name="DERIVED" value="TRUE"/>
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the NVRAM device ID where
                            the NVRAM block is located.&lt;/p&gt;

                            &lt;p&gt;The value configured here must match the device driver index (in Eep/Fls) that
                            is referenced from the corresponding configuration for this block in the
                            underlying abstraction layer (Ea/Fee).&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; 0 .. 7&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Note:The range of values supported by the current NvM implementation is limited to 0 .. 7.
                            The range supported by the underlying device(s) (Eep/Fls) may be larger. The configuration of
                            the underlying driver device index is therefore restricted to the range supported here.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="NVRAM Device Identifier"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Target"/>
                    <a:a name="UUID" 
                         value="b6cca35e-5ee7-445c-acdc-5b02724c412c"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=7"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="( ( node:refvalid(../NvMTargetBlockReference/NvMNameOfEaBlock) and                                        (node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/EaDeviceIndex != &apos;&apos;) and                                         node:refvalid(node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/EaDeviceIndex) and                                        (node:value(node:ref(node:ref(../NvMTargetBlockReference/NvMNameOfEaBlock)/EaDeviceIndex)/EepDriverIndex)=.)                                       ) or                                       ( node:refvalid(../NvMTargetBlockReference/NvMNameOfFeeBlock) and                                        (node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/FeeDeviceIndex != &apos;&apos;) and                                         node:refvalid(node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/FeeDeviceIndex) and                                        (node:value(node:ref(node:ref(../NvMTargetBlockReference/NvMNameOfFeeBlock)/FeeDeviceIndex)/FlsDriverIndex)=.)                                       )                                     )" 
                          false="NvMNvramDeviceId must be the same as configured for this block in [Eep/Fls]DriverIndex"/>
                  </v:var>
                  <v:var name="NvMProvideRteAdminPort" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the generation
                            of the &lt;code&gt;NvMAdmin&lt;/code&gt; port
                            for this block.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Use of Rte (&lt;code&gt;NvMRteUsage&lt;/code&gt;): must be enabled.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;This port includes the operation
                            &lt;code&gt;SetBlockProtection()&lt;/code&gt;.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Rte Administration Port"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Rte Port"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr=". = &apos;true&apos; and as:modconf(&apos;NvM&apos;)/NvMCommon/NvMRteUsage = &apos;false&apos;" 
                          true="The usage of the RTE is not enabled for the NvM, see parameter NvM-&gt;General-&gt;NvMRteUsage."/>
                  </v:var>
                  <v:var name="NvMProvideRteInitBlockPort" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the generation of the
                            &lt;code&gt;NvMNotifyInitBlock&lt;/code&gt; port for this
                            block.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Use of Rte (&lt;code&gt;NvMRteUsage&lt;/code&gt;): must be enabled.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;This port includes the operation
                            &lt;code&gt;InitBlock()&lt;/code&gt;.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Rte Init Block Port"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Rte Port"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr=". = &apos;true&apos; and node:exists(../NvMRomBlockDataAddress)" 
                             true="Only one of NvMRomBlockDataAddress and NvMProvideRteInitBlockPort can be configured for a block"/>
                      <a:tst 
                             expr=". = &apos;true&apos; and as:modconf(&apos;NvM&apos;)/NvMCommon/NvMRteUsage = &apos;false&apos;" 
                             true="The usage of the RTE is not enabled for the NvM, see parameter NvM-&gt;General-&gt;NvMRteUsage."/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMProvideRteJobFinishedPort" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the generation of the
                            &lt;code&gt;NvMNotifyJobFinished&lt;/code&gt; port for
                            this block.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Use of Rte (&lt;code&gt;NvMRteUsage&lt;/code&gt;): must be enabled.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;This port includes the operation
                            &lt;code&gt;JobFinished()&lt;/code&gt;.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Rte Job Finished Port"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Rte Port"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr=". = &apos;true&apos; and as:modconf(&apos;NvM&apos;)/NvMCommon/NvMRteUsage = &apos;false&apos;" 
                          true="The usage of the RTE is not enabled for the NvM, see parameter NvM-&gt;General-&gt;NvMRteUsage."/>
                  </v:var>
                  <v:var name="NvMProvideRteMirrorPort" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the generation
                            of the &lt;code&gt;NvMMirror&lt;/code&gt; port
                            for this block.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Use of Rte (&lt;code&gt;NvMRteUsage&lt;/code&gt;): must be enabled.&lt;/li&gt;
                            &lt;li&gt;Enable Explicit Synchronization Mechanism (&lt;code&gt;NvMBlockUseSyncMechanism&lt;/code&gt;):
                            This must be enabled to call the mirror functions.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;This port includes the operations
                            &lt;code&gt;ReadRamBlockFromNvm()&lt;/code&gt; and &lt;code&gt;WriteRamBlockToNvm()&lt;/code&gt;.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Rte Mirror Port"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Rte Port"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr=". = &apos;true&apos; and as:modconf(&apos;NvM&apos;)/NvMCommon/NvMRteUsage = &apos;false&apos;" 
                          true="The usage of the RTE is not enabled for the NvM, see parameter NvM-&gt;General-&gt;NvMRteUsage."/>
                    <a:da name="WARNING" type="XPath" 
                          expr=". = &apos;true&apos; and (../NvMBlockUseSyncMechanism = &apos;false&apos;)" 
                          true="The configuration parameter NvMProvideRteMirrorPort is ignored because NvMBlockUseSyncMechanism is set to false."/>
                  </v:var>
                  <v:var name="NvMProvideRteServicePort" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the generation
                            of the &lt;code&gt;NvMService&lt;/code&gt; port for
                            this block.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Use of Rte (&lt;code&gt;NvMRteUsage&lt;/code&gt;): must be enabled.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;This port includes the operations:&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;GetErrorStatus()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;SetDataIndex()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;GetDataIndex()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;SetRamBlockStatus()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;ReadBlock()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;WriteBlock()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;RestoreBlockDefaults()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;EraseBlock()&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;InvalidateNvBlock()&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Rte Service Port"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Rte Port"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr=". = &apos;true&apos; and as:modconf(&apos;NvM&apos;)/NvMCommon/NvMRteUsage = &apos;false&apos;" 
                          true="The usage of the RTE is not enabled for the NvM, see parameter NvM-&gt;General-&gt;NvMRteUsage."/>
                  </v:var>
                  <v:var name="NvMRPortInterfacesASRVersion" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the AUTOSAR version of the R-Ports called by NvM.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;AUTOSAR_32&lt;/code&gt; = NvM shall call the AUTOSAR 3.2 R-Port interfaces.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;AUTOSAR_40&lt;/code&gt; = NvM shall call the AUTOSAR 4.0 R-Port interfaces.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;AUTOSAR_42&lt;/code&gt; = NvM shall call the AUTOSAR 4.2 R-Port interfaces.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DEFAULT&lt;/code&gt; = NvM shall call the R-Port interfaces selected by
                              &lt;code&gt;NvMDefaultASRServiceAPI&lt;/code&gt; configuration parameter.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;This configuration parameter refers to the following interfaces:&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;NvMNotifyInitBlock&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;NvMNotifyJobFinished&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;ReadRamBlockFromNvm&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;WriteRamBlockToNvm&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;NvMRteUsage&lt;/code&gt;: Rte usage must be enabled in NvM.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;NvMProvideRteInitBlockPort&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;NvMProvideRteJobFinishedPort&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;NvMProvideRteMirrorPort&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;NvMEnableASRxxServiceAPI&lt;/code&gt; or &lt;code&gt;NvMDefaultASRServiceAPI&lt;/code&gt;:
                                  the value selected for the R-Port interfaces requires that the
                                  corresponding AUTOSAR Service API version is enabled by any of these
                                  two configuration parameters.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="R-Port Interfaces ASR Version"/>
                    <a:a name="OPTIONAL" value="false"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Rte Port"/>
                    <a:a name="UUID" 
                         value="9ea502c7-1558-4abc-ba33-5958c966808e"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="(../../../NvMCommon/NvMRteUsage =&apos;true&apos;) and ((../NvMProvideRteInitBlockPort = &apos;true&apos;) or (../NvMProvideRteJobFinishedPort = &apos;true&apos;) or (../NvMProvideRteMirrorPort = &apos;true&apos;))"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst expr="(. = &apos;&apos;)" 
                             true="R-Port Interfaces ASR Version is set to NONE. Please select the AUTOSAR version for the generated R-Ports of this block."/>
                      <a:tst 
                             expr="(. = &apos;AUTOSAR_32&apos;) and (../../../NvMCommon/NvMServiceAPI/NvMEnableASR32ServiceAPI = &apos;false&apos;)" 
                             true="R-Port Interfaces ASR Version is set to AUTOSAR_32, but AUTOSAR 3.2 Service API is disabled."/>
                      <a:tst 
                             expr="(. = &apos;AUTOSAR_40&apos;) and (../../../NvMCommon/NvMServiceAPI/NvMEnableASR40ServiceAPI = &apos;false&apos;)" 
                             true="R-Port Interfaces ASR Version is set to AUTOSAR_40, but AUTOSAR 4.0 Service API is disabled."/>
                      <a:tst 
                             expr="(. = &apos;AUTOSAR_42&apos;) and (../../../NvMCommon/NvMServiceAPI/NvMEnableASR42ServiceAPI = &apos;false&apos;)" 
                             true="R-Port Interfaces ASR Version is set to AUTOSAR_42, but AUTOSAR 4.2 Service API is disabled."/>
                      <a:tst 
                             expr="(. = &apos;DEFAULT&apos;) and (../../../NvMCommon/NvMServiceAPI/NvMDefaultASRServiceAPI = &apos;NONE&apos;)" 
                             true="R-Port Interfaces ASR Version is set to DEFAULT, but no default service API is selected."/>
                    </a:da>
                    <a:da name="RANGE">
                      <a:v>AUTOSAR_32</a:v>
                      <a:v>AUTOSAR_40</a:v>
                      <a:v>AUTOSAR_42</a:v>
                      <a:v>DEFAULT</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="NvMRamBlockDataAddress" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the start address of
                            the permanent RAM block data area for this block.&lt;/p&gt;

                            &lt;p&gt;If no permanent RAM data block is available for this block,
                            leave this field empty. Otherwise,
                            specify the address of a valid RAM location
                            e.g. &amp;My_RAMBlockTable[5] when refering to an element of an array,
                            or &amp;My_RAMBlockTable when refering the table&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;User Header File &lt;code&gt;NvMUserHeader&lt;/code&gt;: if a permanent RAM
                            block is configured, the user header file must be set to a valid header
                            file including the declaration of the RAM block location
                            (either directly or indirectly).
                            &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="RAM Block Data Address"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="27e67d9e-7cae-40de-b4c1-5c843c07df01"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../NvMNvramBlockIdentifier != 1)"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst expr="text:contains(node:value(.),&apos; &apos;)" 
                             true="The RAM block data address is invalid because no spaces or tabs are allowed."/>
                      <a:tst 
                             expr="(../NvMNvramBlockIdentifier = 1) and (. != &apos;&amp;NvM_ConfigurationId&apos;)" 
                             true="NvMRamBlockDataAddress must be set to &amp;NvM_ConfigurationId for Configuration ID Block."/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMReadRamBlockFromNvCallback" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the name of a block specific call-back
                            function which will be called by the NvM in order to let the application
                            copy data from the NvM module&apos;s mirror to this block&apos;s RAM block.&lt;/p&gt;

                            &lt;p&gt;The call-back function shall have the following prototype:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;Std_ReturnType NvM_ReadRamBlockFromNvM(void* NvMBuffer)&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;The possible return values are: &lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;E_OK : copy was successful&lt;/li&gt;
                            &lt;li&gt;E_NOT_OK : copy was not successful, call-back routine to be called again&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Options:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; name of call-back function: this function will be called to
                            copy data from the NvM module&apos;s mirror to RAM block&lt;/li&gt;
                            &lt;li&gt; empty: no function will be called &lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Number of Repetitions for Mirror Operations (&lt;code&gt;NvMRepeatMirrorOperation&lt;/code&gt;):
                            number of times this call-back will be called if E_NOT_OK is returned.&lt;/li&gt;
                            &lt;li&gt;Enable Explicit Synchronization Mechanism (&lt;code&gt;NvMBlockUseSyncMechanism&lt;/code&gt;): This must be enabled to call the NvM to RAM Copy Call-back Function.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="NvM to RAM Copy Call-back Function"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Callbacks"/>
                    <a:a name="UUID" 
                         value="88869ea4-51a9-4862-8511-bb61fb4697d7"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../NvMBlockUseSyncMechanism =&apos;true&apos;"/>
                    <a:da name="ENABLE" value="true"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. != &apos;&apos;) and (../NvMProvideRteMirrorPort = &apos;true&apos;)" 
                          true="The configuration parameter NvMReadRamBlockFromNvCallback is ignored because NvMProvideRteMirrorPort is set to true."/>
                  </v:var>
                  <v:var name="NvMResistantToChangedSw" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines whether or not an NVRAM block shall be handled during startup as
                            being resistant to configuration changes.&lt;/p&gt;

                            &lt;ul&gt;
                            &lt;li&gt; &lt;code&gt;true&lt;/code&gt; = this block is not affected by the configuration change
                            so its data can be loaded from NVRAM during startup&lt;/li&gt;
                            &lt;li&gt; &lt;code&gt;false&lt;/code&gt; = this block is affected by the configuration change
                            so default data for the block shall be loaded during the extended runtime preparation&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Dynamic Configuration (&lt;code&gt;NvMDynamicConfiguration&lt;/code&gt;): must be enabled to
                            activate the extended runtime preparation for those blocks with the parameter NvMResistantToChangedSw
                            set to &lt;code&gt;false&lt;/code&gt; here.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Note: If there is no default data available at
                            configuration time then the application
                            shall be responsible for providing the
                            default initialization data. In this case
                            the application has to use
                            &lt;code&gt;NvM_GetErrorStatus()&lt;/code&gt; to be able
                            to distinguish between first initialization
                            and corrupted data.&lt;/p&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Resistant to Changed Configuration"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="1d4ae079-4157-48f3-b30b-9790bebf7457"/>
                    <a:da name="DEFAULT" value="false"/>
                  </v:var>
                  <v:var name="NvMRomBlockDataAddress" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the start address of
                            the ROM block data area for this block.&lt;/p&gt;

                            &lt;p&gt;If no ROM data block is available for this block,
                            leave this field empty. Otherwise,
                            specify the address of a valid ROM location
                            e.g. &amp;My_ROMBlockTable[5] when refering to an element of an array,
                            or &amp;My_ROMBlockTable when refering the table&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;User Header File &lt;code&gt;NvMUserHeader&lt;/code&gt;: if a permanent ROM
                            block is configured, the user header file must be set to a valid header
                            file including the declaration of the RAM block location
                            (either directly or indirectly).
                            &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="ROM Block Data Address"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="b12b04b0-d53f-4132-9e07-fb08f9b17f7a"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../NvMNvramBlockIdentifier != 1)"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst expr="node:exists(../NvMInitBlockCallback)" 
                             true="Only one of NvMRomBlockDataAddress and NvMInitBlockCallback can be configured for a block"/>
                      <a:tst expr="(../NvMProvideRteInitBlockPort = &apos;true&apos;)" 
                             true="Only one of NvMRomBlockDataAddress and NvMProvideRteInitBlockPort can be configured for a block"/>
                      <a:tst expr="text:contains(node:value(.),&apos; &apos;)" 
                             true="The ROM block data address is invalid because no spaces or tabs are allowed."/>
                      <a:tst 
                             expr="(../NvMNvramBlockIdentifier = 1) and (. != &apos;&amp;NvM_CompiledConfigurationId&apos;)" 
                             true="NvMRomBlockDataAddress must be set to &amp;NvM_CompiledConfigurationId for Configuration ID Block."/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMRomBlockNum" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the number of ROM blocks in a
                            contiguous area that are needed to store
                            multiple instances of this block.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Block Management Type (&lt;code&gt;NvMBlockManagementType&lt;/code&gt;): limits the range selection.&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Block management type &lt;code&gt;NVM_BLOCK_DATASET&lt;/code&gt; : 0 .. 255&lt;/li&gt;

                            &lt;li&gt;Block management type &lt;code&gt;NVM_BLOCK_NATIVE&lt;/code&gt; : 0 .. 1&lt;/li&gt;

                            &lt;li&gt;Block management type &lt;code&gt;NVM_BLOCK_REDUNDANT&lt;/code&gt; : 0 .. 1&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Number of ROM Blocks"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="cb8f937d-ae5f-418e-8e90-55099e35e8a8"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=255"/>
                        <mt:tst expr="&gt;=0"/>
                      </mt:range>
                      <mt:xpath>
                        <mt:tst 
                                true="NvMRomBlockNum must be zero if no NvMRomBlockDataAddress is given" 
                                expr="node:exists(../NvMRomBlockDataAddress) and (../NvMRomBlockDataAddress = &apos;&apos;) and (. != 0)"/>
                        <mt:tst 
                                true="An ROM block address was configured but the number of ROM blocks equals 0 which contradicts" 
                                expr="node:exists(../NvMRomBlockDataAddress) and (../NvMRomBlockDataAddress != &apos;&apos;) and (. = 0)"/>
                        <mt:tst 
                                true="NvMRomBlockNum must be set to 0 or 1 for native and redundant blocks" 
                                expr="(../NvMBlockManagementType != &apos;NVM_BLOCK_DATASET&apos;) and (. &gt;= 2)"/>
                        <mt:tst 
                                true="The value of &apos;NvMDatasetSelectionBits&apos; is not sufficient to hold the number of data sets (NV + ROM)" 
                                expr="(../NvMBlockManagementType = &apos;NVM_BLOCK_DATASET&apos;) and                                     (. &gt; ((bit:shl(1, ../../../NvMCommon/NvMDatasetSelectionBits)) - ../NvMNvBlockNum))"/>
                      </mt:xpath>
                    </a:da>
                  </v:var>
                  <v:var name="NvMSelectBlockForReadAll" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines whether or not an NVRAM block shall be
                            processed during &lt;code&gt;NvM_ReadAll()&lt;/code&gt;.&lt;/p&gt;

                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = NVRAM block shall be processed during startup by
                            &lt;code&gt;NvM_ReadAll()&lt;/code&gt;&lt;/li&gt;

                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = NVRAM block shall not be processed during startup by
                            &lt;code&gt;NvM_ReadAll()&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;p&gt;At least one of the following conditions has to be fulfilled&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;RAM Block Data Address &lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;: this must be set to a valid permanent RAM address,&lt;/li&gt;
                            &lt;li&gt;Explicit synchronization &lt;code&gt;NvMBlockUseSyncMechanism&lt;/code&gt;: this must be enabled.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Block management type &lt;code&gt;NvMBlockManagementType&lt;/code&gt;: this must not be set to NVM_BLOCK_DATASET.&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Select Block for ReadAll()"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="fe95137a-8b47-4bae-91f0-2462ffa904e5"/>
                    <a:da name="DEFAULT" value="true"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress !=&apos;&apos;)) or                                 (../NvMBlockUseSyncMechanism = &apos;true&apos;)"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(../NvMBlockManagementType = &apos;NVM_BLOCK_DATASET&apos;) and (. = &apos;true&apos;)" 
                          true="Blocks of management type NVM_BLOCK_DATASET cannot be selected for ReadAll"/>
                  </v:var>
                  <v:var name="NvMSelectBlockForWriteAll" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines whether or not the NVRAM block shall be
                            processed during &lt;code&gt;NvM_WriteAll()&lt;/code&gt;.&lt;/p&gt;

                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = NVRAM block shall be processed by &lt;code&gt;NvM_WriteAll&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = NVRAM block shall not be processed by &lt;code&gt;NvM_WriteAll&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;p&gt;At least one of the following conditions has to be fulfilled:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;RAM Block Data Address &lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;: this must be set to a valid permanent RAM address,&lt;/li&gt;
                            &lt;li&gt;Explicit synchronization &lt;code&gt;NvMBlockUseSyncMechanism&lt;/code&gt;: this must be enabled.&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Select Block for WriteAll"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="6bdd7213-0018-484c-a316-0a1b288b848d"/>
                    <a:da name="DEFAULT" value="true"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress !=&apos;&apos;)) or                                 (../NvMBlockUseSyncMechanism = &apos;true&apos;)"/>
                    <a:da name="ENABLE" value="false"/>
                  </v:var>
                  <v:var name="NvMSelectBlockForFirstInitAll" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines whether or not the NVRAM block shall be
                            processed during &lt;code&gt;NvM_FirstInitAll()&lt;/code&gt;.&lt;/p&gt;

                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = NVRAM block shall be processed by &lt;code&gt;NvM_FirstInitAll&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = NVRAM block shall not be processed by &lt;code&gt;NvM_FirstInitAll&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Select Block for FirstInitAll"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="d2f83592-f35c-11e8-8eb2-f2801f1b9fd1"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                  </v:var>
                  <v:var name="NvMSingleBlockCallback" type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the start address of a block specific
                            function that shall be called on termination
                            of each asynchronous single block request.&lt;/p&gt;

                            &lt;p&gt;Note: The call-back function is called inside a
                            critical section. Hence, application must ensure that
                            the run time of this function is reasonably short.&lt;/p&gt;
                         &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Single Block Call-back Function"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Callbacks"/>
                    <a:a name="UUID" 
                         value="cd8e8efd-0376-4e7b-b5c9-0e83701b8e4c"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. != &apos;&apos;) and (../NvMProvideRteJobFinishedPort = &apos;true&apos;)" 
                          true="The configuration parameter NvMSingleBlockCallback is ignored because NvMProvideRteJobFinishedPort is set to true."/>
                  </v:var>
                  <v:var name="NvMStaticBlockIDCheck" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the Static Block ID check for this block.&lt;/p&gt;

                            &lt;p&gt;If enabled, the Static Block ID is stored in the NV Block
                            each time the NVRAM block is written to NV memory.
                            The ID is read and compared to the requested block ID
                            each time the block is read from NV memory.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Static Block ID check is enabled&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Static Block ID check is disabled&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Static Block ID Check"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Checks"/>
                    <a:a name="UUID" 
                         value="e1203088-c09c-42e0-9b33-4ea7b7fb535f"/>
                    <a:da name="DEFAULT" value="false"/>
                  </v:var>
                  <v:var name="NvMBlockUseAutoValidation" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;This defines whether or not an NVRAM block shall be
                            processed during &lt;code&gt;ValidateAll()&lt;/code&gt;.&lt;/p&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;p&gt;One of the following conditions has to be fulfilled&lt;/p&gt;
                            &lt;ul&gt;
                                &lt;li&gt;RAM Block Data Address &lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;: this must be set to a valid permanent RAM address,&lt;/li&gt;
                                &lt;li&gt;Explicit synchronization &lt;code&gt;NvMBlockUseSyncMechanism&lt;/code&gt;: this must be enabled.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;NvMApiConfigClass must be different than NVM_API_CONFIG_CLASS_1. &lt;/p&gt;
                            &lt;p&gt;NvMNvramBlockIdentifier must be greater than 1&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Select Block for ValidateAll()"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="a89146ef-b18a-49ef-941f-cfe1f3c6388f"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="((node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress !=&apos;&apos;)) or                                 (node:exists(../NvMBlockUseSyncMechanism) and (../NvMBlockUseSyncMechanism = &apos;true&apos;))) and                                 (../../../NvMCommon/NvMApiConfigClass != &apos;NVM_API_CONFIG_CLASS_1&apos;) and                                 (../NvMNvramBlockIdentifier &gt; 1)"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(. = &apos;true&apos;) and ((not(node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress !=&apos;&apos;)))                                    and (not(node:exists(../NvMBlockUseSyncMechanism) and (../NvMBlockUseSyncMechanism !=&apos;false&apos;))))" 
                             true="Configure Ram Block Address or Explicit sync"/>
                      <a:tst 
                             expr="((. = &apos;true&apos;) and ((../../../NvMCommon/NvMApiConfigClass = &apos;NVM_API_CONFIG_CLASS_1&apos;) or (../NvMNvramBlockIdentifier = 1)))" 
                             true="NvMApiConfigClass must be different than 1, and blocks with NvMNvramBlockIdentifier 0 and 1 are not to be processed by Validate_All"/>
                    </a:da>
                  </v:var>
                  <v:chc name="NvMTargetBlockReference" type="IDENTIFIABLE">
                    <a:a name="LABEL" value="Target Block Reference"/>
                    <a:a name="TAB" value="Target"/>
                    <a:a name="UUID" 
                         value="66c285a7-9924-4d20-b277-86c6e3a7f41f"/>
                    <v:ctr name="NvMEaRef" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              EEPROM Abstraction
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="LABEL" value="Ea Target Block Reference"/>
                      <a:a name="UUID" 
                           value="7efadb8a-bb12-491f-965d-4ef9695bf25e"/>
                      <v:ref name="NvMNameOfEaBlock" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to the EA block that is associated with this NV block.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="Name of Ea Block"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ded76901-f28f-4f58-9df2-e5990640d3c1"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="Invalid reference. A valid reference to an Ea block shall be provided."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Ea/EaBlockConfiguration"/>
                      </v:ref>
                    </v:ctr>
                    <v:ctr name="NvMFeeRef" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              Flash EEPROM Emulation
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="LABEL" value="Fee Target Block Reference"/>
                      <a:a name="UUID" 
                           value="59114536-0a6f-477c-bbf2-ae09a4cac7ae"/>
                      <v:ref name="NvMNameOfFeeBlock" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to the FEE block that is associated with this NV block.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="Name of Fee Block"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="a45a4dc7-0227-482b-8d32-d4626b61a8fc"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="Invalid reference. A valid reference to a Fee block shall be provided."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Fee/FeeBlockConfiguration"/>
                      </v:ref>
                    </v:ctr>
                  </v:chc>
                  <v:var name="NvMUserProvidesSpaceForBlockAndCrc" 
                         type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt; Enables storage of the block CRC in the user buffer
                          when &lt;code&gt;NvMBlockUseCrc&lt;/code&gt; is enabled. &lt;/p&gt;

                          &lt;p&gt; This configuration parameter shall be used only for permanent RAM
                          blocks. &lt;/p&gt;

                          &lt;ul&gt;
                          &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = user provides space for CRC storage directly after the block data,
                          NvM module does not reserve internal buffer space for reading and writing this block.
                          The configured permanent RAM buffer must be large enough to store both the
                          NV data and the length of the block&apos;s CRC.&lt;/li&gt;

                          &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = user does not provide space for CRC,
                          NvM module reserves internal buffer space large enough for block data and CRC&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Enable Use of Block CRC (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;): this must be enabled to use CRC for a block
                          and therefore also for configuring the CRC storage in user space.&lt;/li&gt;
                          &lt;li&gt;RAM Block Data Address (&lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;): this feature is only
                          supported for blocks with a permanent RAM block address configured.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Note: the NvM creates an internal buffer which is large enough to
                          store the largest block for which this parameter is set to
                          false. This includes 1-4 bytes for the CRC checksum as needed.
                          Therefore enabling &lt;code&gt;NvMUserProvidesSpaceForBlockAndCrc&lt;/code&gt; for large blocks
                          saves RAM as the the size of the internal buffer can
                          be reduced to the size needed for the smaller blocks.&lt;/p&gt;

                          &lt;p&gt;Note: if &lt;code&gt;NvMUserProvidesSpaceForBlockAndCrc&lt;/code&gt; is set to
                          &lt;code&gt;true&lt;/code&gt;, the application &lt;em&gt;must&lt;/em&gt; ensure that
                          the RAM block data is followed by reserved bytes of the size
                          needed to store the associated CRC checksum. Otherwise, NvM will corrupt
                          the application&apos;s data memory.&lt;/p&gt;

                          &lt;p&gt;To write the CRC, the NvM will use the RAM in the address range:&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;NvMRamBlockDataAddress+NvMNvBlockLength to
                          NvMRamBlockDataAddress+NvMNvBlockLength+0 to store a CRC8 value&lt;/li&gt;
                          &lt;li&gt;NvMRamBlockDataAddress+NvMNvBlockLength to
                          NvMRamBlockDataAddress+NvMNvBlockLength+1 to store a CRC16 value&lt;/li&gt;
                          &lt;li&gt;NvMRamBlockDataAddress+NvMNvBlockLength to
                          NvMRamBlockDataAddress+NvMNvBlockLength+3 to store a CRC32 value&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Note: the application shall only provide this memory space. It
                          &lt;em&gt; shall not&lt;/em&gt; access the checksum bytes directly.&lt;/p&gt;

                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="User Provides Space for Block and CRC"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="CRC"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath">
                      <a:tst expr="(../NvMNvramBlockIdentifier != 1)"/>
                      <a:tst 
                             expr="(../NvMBlockUseCrc=&apos;true&apos;) and (../NvMNvramBlockIdentifier != 1)"/>
                    </a:da>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;true&apos;) and (not(node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress !=&apos;&apos;)))" 
                          true="Providing space for block and Crc is not allowed for temporary RAM blocks."/>
                  </v:var>
                  <v:var name="NvMEnBlockCheck" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables the Block Check mechanism for this block.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Background Block Check"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="30723d9c-04c2-11e8-ba89-0ed5f89f718b"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" value="true"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(. = &apos;true&apos;) and (../NvMBcEnCrcComp = &apos;false&apos;) and (../NvMBcEnRamComp = &apos;false&apos;) and (../NvMBcEnReddCopiesComp = &apos;false&apos;)" 
                             true="At least one Block Check comparison method must be enabled."/>
                      <a:tst 
                             expr="(. = &apos;true&apos;) and (../NvMBcEnAutoStart = &apos;false&apos;) and (../NvMBcEnSetAPI = &apos;false&apos;)" 
                             true="At least one of the options NvMBcEnAutoStart, NvMBcEnSetAPI must be TRUE."/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMEnableBlockCryptoSecurityHandling" 
                         type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables crypto handling of NvM user data corresponding to this &lt;/p&gt;
                            &lt;p&gt;block using the Configured callback functions : &apos;NvMCryptoReadHook&apos; and &apos;NvMCryptoWriteHook&apos;.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Crypto Security Handling"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="Crypto Security"/>
                    <a:a name="UUID" 
                         value="cec3f9db-b720-42f0-b192-ab8bb2308d22"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../../../NvMCommon/NvMCommonCryptoSecurityParameters/NvMEnableCryptoSecurityHooks =&apos;true&apos;"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;true&apos;) and ((../NvMEnBlockCheck = &apos;true&apos;) or (../NvMSelectBlockForFirstInitAll = &apos;true&apos;) or (../NvMWriteVerification = &apos;true&apos;) or (../NvMPreWriteDataComp = &apos;true&apos;) or (../NvMBlockUseCRCCompMechanism = &apos;true&apos;))" 
                          true="Blocks with FirstInitAll or BlockCheck mechanisms or Write and PreWrite Verification enabled do not support crypto handling"/>
                  </v:var>
                  <v:var name="NvMCryptoExtraInfoSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Configuration of the particular&apos;s NvM Block Crypto Extra Info Size.&lt;/p&gt;
                            &lt;p&gt;The paramter shall be considered when calculating the actual block size when calling lower layers.&lt;/p&gt;
                            &lt;p&gt;This parameter means the NvM blocks will contain additional information needed for the Crypto Security Handling.&lt;/p&gt;
                            &lt;p&gt;This information can be either a MAC, a Hash or a Crypto Initialization Vector plus a MAC.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Configure Block Crypto Extra Info Size"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="Crypto Security"/>
                    <a:a name="UUID" 
                         value="81d3a131-b47c-4a69-816b-b46b71d137a1"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../NvMEnableBlockCryptoSecurityHandling =&apos;true&apos; and ../../../NvMCommon/NvMCommonCryptoSecurityParameters/NvMEnableCryptoSecurityHooks =&apos;true&apos;"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=255"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBcEnSetAPI" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines if this user can control the Block Check mechanism through the NvM_EnableBc() API.&lt;/p&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Block Check (&lt;code&gt;NvMEnBlockCheck&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable usage of Set API for Block Check"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="3bedb002-04c2-11e8-ba89-0ed5f89f718b"/>
                    <a:da name="DEFAULT" value="true"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../NvMEnBlockCheck=&apos;true&apos;)"/>
                  </v:var>
                  <v:var name="NvMBcEnAutoStart" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the automatic start of Block Check mechanism. If disabled then the BC mechanism has
                               to be started using the set API NvM_EnableBc(). &lt;/p&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Block Check (&lt;code&gt;NvMEnBlockCheck&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable the automatic start of Block Check mechanism."/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="8cac9e18-04c2-11e8-ba89-0ed5f89f718b"/>
                    <a:da name="DEFAULT" value="true"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../NvMEnBlockCheck=&apos;true&apos;)"/>
                  </v:var>
                  <v:var name="NvMBcEnCrcComp" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines if the CRC comparison will be done during a Block Check processing for the current block.&lt;/p&gt;
                            &lt;p&gt;The comparison will be done between the CRC done on the NV data and the CRC stored in NV.&lt;/p&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Block Check (&lt;code&gt;NvMEnBlockCheck&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;Enable Crc Storage (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable CRC Comparison during Block Check"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="8853ffaa-04c2-11e8-ba89-0ed5f89f718b"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath">
                      <a:tst expr="(../NvMEnBlockCheck=&apos;true&apos;)"/>
                      <a:tst expr="(../NvMBlockUseCrc=&apos;true&apos;)"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBcEnRamComp" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines if the RAM comparison will be done during a Block Check processing for the current block.&lt;/p&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Block Check (&lt;code&gt;NvMEnBlockCheck&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;Redundant Copies Comparison Disabled (&lt;code&gt;NvMBcEnReddCopiesComp&lt;/code&gt;): this must be set to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;Parameter &lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt; must be enabled and the field must not be empty.&lt;/li&gt;
                            &lt;li&gt;Parameter &lt;code&gt;NvMBlockManagementType&lt;/code&gt; must not be set to &lt;code&gt;NVM_BLOCK_DATASET&lt;/code&gt;.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable RAM Comparison during Block Check"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="7df557f2-04c2-11e8-ba89-0ed5f89f718b"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath">
                      <a:tst expr="(../NvMEnBlockCheck=&apos;true&apos;)"/>
                      <a:tst expr="(../NvMBcEnReddCopiesComp=&apos;false&apos;)"/>
                    </a:da>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(. = &apos;true&apos;) and (../NvMEnBlockCheck=&apos;true&apos;) and ((node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress =&apos;&apos;)) or (not(node:exists(../NvMRamBlockDataAddress))))" 
                             true="If RAM comparison is enabled then permanent RAM block must be present."/>
                      <a:tst 
                             expr="(../NvMBlockManagementType = &apos;NVM_BLOCK_DATASET&apos;) and (. = &apos;true&apos;) and (../NvMEnBlockCheck=&apos;true&apos;)" 
                             true="Blocks of management type NVM_BLOCK_DATASET cannot be selected for RAM Comparison"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBcEnReddCopiesComp" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines if the data comparison between the copies of a redundant block will be done during a Block Check processing.&lt;/p&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Block Check (&lt;code&gt;NvMEnBlockCheck&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;RAM Comparison Disabled (&lt;code&gt;NvMBcEnRamComp&lt;/code&gt;): this must be set to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;Parameter (&lt;code&gt;NvMBlockManagementType&lt;/code&gt;) must be set to &lt;code&gt;NVM_BLOCK_REDUNDANT&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable Redundant Copies Comparison during Block Check"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="76641582-04c2-11e8-ba89-0ed5f89f718b"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath">
                      <a:tst expr="(../NvMEnBlockCheck=&apos;true&apos;)"/>
                      <a:tst 
                             expr="(../NvMBlockManagementType = &apos;NVM_BLOCK_REDUNDANT&apos;)"/>
                      <a:tst expr="(../NvMBcEnRamComp=&apos;false&apos;)"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBcEnAutoRepair" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines if the AutoRepair feature is enabled. If this is enabled and the block check
                            verification fails then the NV memory will be restored either from RAM memory if configured
                            as permanent and valid, either from ROM defaults if configured.&lt;/p&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Block Check (&lt;code&gt;NvMEnBlockCheck&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;li&gt;Permanent RAM is present (&lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;): this must be set&lt;/li&gt;
                            &lt;li&gt; or ROM defaults are present (&lt;code&gt;NvMRomBlockDataAddress&lt;/code&gt;): this must be set&lt;/li&gt;
                            &lt;li&gt; or ROM defaults are present (&lt;code&gt;NvMRomBlockDataAddress&lt;/code&gt;): this must be set&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Auto Repair feature"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="7120b0d0-04c2-11e8-ba89-0ed5f89f718b"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../NvMEnBlockCheck=&apos;true&apos;)"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(. = &apos;true&apos;) and (node:exists(../NvMRamBlockDataAddress) and (../NvMRamBlockDataAddress =&apos;&apos;))                       and (node:exists(../NvMRomBlockDataAddress) and (../NvMRomBlockDataAddress =&apos;&apos;)) and (../NvMBcEnReddCopiesComp = &apos;true&apos;)" 
                             true="If AutoRepair is enabled at least one of the features must be enabled : Permanent RAM / ROM defaults/ ReddCopiesCompare"/>
                      <a:tst 
                             expr="(../NvMBlockManagementType = &apos;NVM_BLOCK_DATASET&apos;) and (. = &apos;true&apos;)" 
                             true="Blocks of management type NVM_BLOCK_DATASET cannot be selected for AutoRepair"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMBcDelayCounter" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the minimum number of NvM Main functions between the trigger of a Block Check mechanism for a NV Block.&lt;/p&gt;
                            &lt;p&gt;Value &quot;0&quot; means the Block Check will be done only once.&lt;/p&gt;
                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;0 .. 255&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Minimum delay between two consecutive Block Checks"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="BlockCheck"/>
                    <a:a name="UUID" 
                         value="8a00c8c8-d755-4004-b6b8-ba079601a0fa"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../NvMEnBlockCheck=&apos;true&apos;)"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=255"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMWriteBlockOnce" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables a mechanism to write the NV block only once. The write protection of
                            the block is automatically enabled after the block is written the first time.&lt;/p&gt;

                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = write protection after first write is set&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = write protection after first write is not set&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Use of Block CRC (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;): This must be enabled to
                            let the NVRAM manager recalculate the CRC during startup.&lt;/li&gt;
                            &lt;li&gt;Initial Write Protection (&lt;code&gt;NvMBlockWriteProt&lt;/code&gt;): This must be disabled to
                            let the user write to the NVRAM block in case the CRC check fails.&lt;/li&gt;
                           &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Write Block Once"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="2f5e38f9-b546-4ef6-99f9-4a2cee64340f"/>
                    <a:da name="DEFAULT" value="false"/>
                  </v:var>
                  <v:var name="NvMWriteRamBlockToNvCallback" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the name of a block specific call-back
                            function which will be called by the NvM in order to let the application
                            copy data from this block&apos;s RAM block to NvM module&apos;s mirror.&lt;/p&gt;

                            &lt;p&gt;The call-back function shall have the following prototype:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;Std_ReturnType NvM_WriteRamBlockToNvM(void* NvMBuffer)&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;The possible return values are: &lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;E_OK : copy was successful&lt;/li&gt;
                            &lt;li&gt;E_NOT_OK indicates copy was not successful, call-back routine to be called again&lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Options:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; name of call-back function: this function will be called to
                            copy data from the RAM block to NvM module&apos;s mirror&lt;/li&gt;
                            &lt;li&gt; empty: no function will be called &lt;/li&gt;
                            &lt;/ul&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Number of Repetitions for Mirror Operations (&lt;code&gt;NvMRepeatMirrorOperation&lt;/code&gt;):
                            number of times this call-back will be called if E_NOT_OK is returned.&lt;/li&gt;
                            &lt;li&gt;Enable Explicit Synchronization Mechanism (&lt;code&gt;NvMBlockUseSyncMechanism&lt;/code&gt;): This must be enabled to call the RAM to NvM Copy Call-back Function.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="RAM to NvM Copy Call-back Function"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Callbacks"/>
                    <a:a name="UUID" 
                         value="39da8bb7-ac58-40e7-81dc-0512431f30cd"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../NvMBlockUseSyncMechanism =&apos;true&apos;"/>
                    <a:da name="ENABLE" value="true"/>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. != &apos;&apos;) and (../NvMProvideRteMirrorPort = &apos;true&apos;)" 
                          true="The configuration parameter NvMWriteRamBlockToNvCallback is ignored because NvMProvideRteMirrorPort is set to true."/>
                  </v:var>
                  <v:var name="NvMWriteVerification" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables write verification for this block. &lt;/p&gt;

                            &lt;p&gt;This defines whether or not the NV block is immediately
                            read back and compared with the original content of the RAM Block
                            each time the RAM Block is written to NV memory.&lt;/p&gt;

                            &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = NV block is read back and compared with the RAM Block&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = NV block is not compared with the RAM Block&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Write Verification"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Checks"/>
                    <a:a name="UUID" 
                         value="4ed37cc3-d2a3-490a-ae20-28b455b0e8fe"/>
                    <a:da name="DEFAULT" value="false"/>
                  </v:var>
                  <v:var name="NvMWriteVerificationDataSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the number of bytes to be used in each step of write block verification.
                            The verification takes place after writing the block to NV memory.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Write Verification (&lt;code&gt;NvMWriteVerification&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Write Verification Data Size"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Checks"/>
                    <a:a name="UUID" 
                         value="630dbfa8-8744-4de9-9e3b-7ebfd53a3713"/>
                    <a:da name="DEFAULT" value="1"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../NvMWriteVerification = &apos;true&apos;"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:range>
                      <mt:xpath 
                                false="Write verification data size is greater than the block length!" 
                                expr=" . &lt;= ../NvMNvBlockLength"/>
                    </a:da>
                  </v:var>
                  <v:var name="NvMPreWriteDataComp" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables pre write data comparison for this block.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                  Before Writing into NV, the NV block is read back and compared with the RAM Block&lt;/li&gt;

                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                  Before Writing into NV, the NV block is not compared with the RAM Block &lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;If &lt;code&gt;NvMBlockUseCrc&lt;/code&gt; is enabled and &lt;code&gt;NvMBlockUseCRCCompMechanism&lt;/code&gt; is also enabled,
                              Data comparison is done only if CRC comparison is ok.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable Data Comparison Mechanism."/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Checks"/>
                    <a:a name="UUID" 
                         value="753f3670-ce97-11e7-abc4-cec278b6b50a"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                  </v:var>
                  <v:var name="NvMPreWriteDataCompDataSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the number of bytes to be used in each step of pre write block comparison.
                            The comparison takes place before writing the block to NV memory.&lt;/p&gt;

                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable Pre Write Data Comparison (&lt;code&gt;NvMPreWriteDataComp&lt;/code&gt;): this must be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Pre Write Data Comparison Data Size"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Checks"/>
                    <a:a name="UUID" 
                         value="7d3d015e-ce97-11e7-abc4-cec278b6b50a"/>
                    <a:da name="DEFAULT" value="1"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../NvMPreWriteDataComp = &apos;true&apos;"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:range>
                      <mt:xpath 
                                false="Pre Write Comparison data size is greater than the block length!" 
                                expr=" . &lt;= ../NvMNvBlockLength"/>
                    </a:da>
                  </v:var>
                </v:ctr>
              </v:lst>
              <v:ctr name="NvMDefensiveProgramming" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                &lt;p&gt;Parameters for defensive programming&lt;/p&gt;
                &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Defensive Programming Options"/>
                <v:var name="NvMDefProgEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                    &lt;p&gt;Enables or disables the defensive
                    programming feature for the module NvM.&lt;/p&gt;
                    &lt;p&gt;Note: This feature is dependent on the use of the development error detection module.
                    To use the defensive programming feature, proceed as follows:
                    &lt;ol&gt;
                    &lt;li&gt;Enable development error detection&lt;/li&gt;
                    &lt;li&gt;Enable defensive programming&lt;/li&gt;
                    &lt;li&gt;Enable assertions as required&lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Defensive Programming"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../NvMCommon/NvMDevErrorDetect = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="NvMPrecondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of precondition assertion checks reported from
                  the module NvM.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;NvMDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;NvMDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Precondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../NvMCommon/NvMDevErrorDetect = &apos;true&apos;) and (../NvMDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="NvMPostcondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of postcondition assertion checks reported from
                  the module NvM.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;NvMDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;NvMDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Postcondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../NvMCommon/NvMDevErrorDetect = &apos;true&apos;) and (../NvMDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="NvMStaticAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of static assertion checks reported from
                  the module NvM.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;NvMDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;NvMDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Static Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../NvMCommon/NvMDevErrorDetect = &apos;true&apos;) and (../NvMDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="NvMUnreachAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of unreachable code assertion checks
                  reported from the module NvM.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;NvMDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;NvMDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Unreachable Code Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../NvMCommon/NvMDevErrorDetect = &apos;true&apos;) and (../NvMDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="NvMInvariantAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of invariant assertion checks
                  reported from functions of the module NvM.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;NvMDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;NvMDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Invariant Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../NvMCommon/NvMDevErrorDetect = &apos;true&apos;) and (../NvMDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
              </v:ctr>
              <v:ctr name="NvMCommon" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        Container for common configuration options.
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common NvM Parameters"/>
                <a:a name="UUID" value="085815b8-5f8b-40d1-b2b4-720c5f7c7646"/>
                <v:var name="NvMApiConfigClass" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables specific API calls depending on the NvM
                          API configuration class selected.&lt;/p&gt;

                          &lt;p&gt;Range: &lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;NVM_API_CONFIG_CLASS_3 - all API functions are available&lt;/li&gt;
                          &lt;li&gt;NVM_API_CONFIG_CLASS_2 - an intermediate set API functions is available&lt;/li&gt;
                          &lt;li&gt;NVM_API_CONFIG_CLASS_1 - a minimum set of API functions is available&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="API Class Configuration"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="e9405939-79b7-4bb1-ab82-f0385c3817d3"/>
                  <a:da name="DEFAULT" value="NVM_API_CONFIG_CLASS_3"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="((. = &apos;NVM_API_CONFIG_CLASS_1&apos;) and (../../NvMBlockDescriptor/*[NvMBlockManagementType = &apos;NVM_BLOCK_DATASET&apos;]))" 
                        true="Within API configuration class 1, the block management type NVM_BLOCK_DATASET is not supported."/>
                  <a:da name="RANGE">
                    <a:v>NVM_API_CONFIG_CLASS_1</a:v>
                    <a:v>NVM_API_CONFIG_CLASS_2</a:v>
                    <a:v>NVM_API_CONFIG_CLASS_3</a:v>
                  </a:da>
                </v:var>
                <v:var name="NvMBswMMultiBlockJobStatusInformation" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables BSWM Multi Block Job Status Information.&lt;/p&gt;
                          &lt;p&gt;This parameter specifies whether BswM
                          is informed about the current status
                          of the multiblock job.&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                Report current status of multiblock job to BswM&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                Do not inform BswM at all&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Enable &lt;code&gt;BswMNvMEnabled&lt;/code&gt;: this must be selected to enable the
                            NvM module related BswM API.&lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Enable BSWM Multi Block Job Status Information"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a2220099-d274-486f-a9d2-a726dafd29fd"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="WARNING" type="XPath" 
                        expr="(. = &apos;true&apos;) and (not(node:exists(as:modconf(&apos;BswM&apos;)/BswMGeneral/BswMNvMEnabled) and (as:modconf(&apos;BswM&apos;)/BswMGeneral/BswMNvMEnabled = &apos;true&apos;)))" 
                        true="The usage of NvM in BswM(BswMNvMEnabled) is disabled."/>
                </v:var>
                <v:var name="NvMCompiledConfigId" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the configuration ID regarding the NV memory
                          layout.&lt;/p&gt;

                          &lt;p&gt;This configuration ID shall be
                          published as e.g. a SW-C shall have the
                          possibility to write it to NV memory.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Compiled Configuration ID"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="404f5af3-fab1-41d6-a70b-0c179de6bfa6"/>
                  <a:da name="DEFAULT" value="1"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=9223372036854775807"/>
                    <a:tst expr="&gt;=0"/>
                  </a:da>
                </v:var>
                <v:var name="NvMSoftwareChangeCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the name of a callout function which NvM shall call
                               in order to obtaing the new Configuration Id value that shall be compared
                               to the content of Block1 for detecting software change. &lt;/p&gt;
                            &lt;p&gt;Options:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt; name of call-back function: this function will be called to get the new Configuration Id&lt;/li&gt;
                            &lt;li&gt; empty: no function will be called; Block 1 content will be compared with the compiled Configuration Id &lt;/li&gt;
                            &lt;li&gt; if disabled: no function will be called; Block 1 content will be compared with the compiled Configuration Id &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Software Change Callout"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="986458f7-3bc6-4f7c-99f6-20b4c233ed8f"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMCrcNumOfBytes" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the maximum number of bytes which shall be processed
                          within one cycle of job processing.&lt;/p&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;Usage of Block CRC (&lt;code&gt;NvMBlockUseCrc&lt;/code&gt;): this must be
                            enabled for at least one block.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Max Number of Bytes in one CRC Calculation Cycle"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="3228e02d-e58c-4d74-8b8b-6c632dd4baf9"/>
                  <a:da name="DEFAULT" value="65535"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="NvMDatasetSelectionBits" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the number of least significant bits
                          which shall be used to address a certain
                          dataset of a NVRAM block within the interface
                          to the memory hardware abstraction.&lt;/p&gt;

                          &lt;p&gt;0..8: Number of bits which are used for
                          dataset or redundant block addressing.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;0: No dataset or redundant NVRAM blocks
                                are configured at all, no selection
                                bits required.&lt;/li&gt;
                            &lt;li&gt;1: In case of redundant NVRAM blocks are
                                configured, but no dataset
                                NVRAM blocks.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Number of Data Selection Bits"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="baea5abe-08bf-4bd6-8ac4-d15c6b8fcf22"/>
                  <a:da name="DEFAULT" value="4"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=8"/>
                    <a:tst expr="&gt;=0"/>
                  </a:da>
                </v:var>
                <v:var name="NvMDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the use of development error detection.&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                Development error detection enabled&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                Development error detection disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Development Error Detection"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="5c9b943b-9b00-4b3d-abaa-fd1e1f5a8609"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="NvMDrvModeSwitch" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the switching of
                          memory drivers to fast mode during
                          the requests &lt;code&gt;NvM_ReadAll&lt;/code&gt;
                          and &lt;code&gt;NvM_WriteAll.&lt;/code&gt;&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                mode switching enabled&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                mode switching disabled&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Note: Driver mode switching must be supported by the Nv memory drivers
                          Eep or Fls.
                          The value of &lt;code&gt;NvMDrvModeSwitch&lt;/code&gt; configuration parameter must
                          be consistent with the configuration of all underlying modules:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;EaSetModeSupported&lt;/code&gt; for EEPROM devices&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;FeeSetModeSupported&lt;/code&gt; and &lt;code&gt;FlsSetModeApi&lt;/code&gt;
                                for flash devices&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Driver Mode Switch"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="259375c7-dba9-45f1-a862-325ccdade662"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="NvMDynamicConfiguration" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the dynamic
                          configuration management handling for processing during
                          the &lt;code&gt;NvM_ReadAll()&lt;/code&gt; request&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                Dynamic configuration management
                                handling enabled&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                Dynamic configuration management
                                handling disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Dynamic Configuration"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="7a7f937d-3136-431d-b8a8-3199a3383110"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="NvMCancelInternalOperations" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the option to cancel internal operations in 
                             the underlying modules for all devices which have the 
                             status different then MEMIF_IDLE.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                Cancel internal operations enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                Cancel internal operations disabled.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Cancel Internal Operations"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="7a7f937d-3136-431d-b8a8-3199a3383110"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="NvMJobPrioritization" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables job
                          prioritization handling&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                Job prioritization handling enabled&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                Job prioritization handling disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Job Prioritization"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="7867337c-9170-4b7f-87a3-1b4f8a7967c4"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:xpath>
                      <mt:tst 
                              true="No Fee/Ea blocks should be configured with immediate data when NvMJobPrioritization is set to false" 
                              expr="(.=&apos;false&apos;) and                                  (                                   (                                    (count(as:modconf(&apos;Fee&apos;)/*) != 0) and                                    (count(as:modconf(&apos;Fee&apos;)[1]/FeeBlockConfiguration/*[FeeImmediateData = &apos;true&apos;]) != 0)                                   ) or                                   (                                    (count(as:modconf(&apos;Ea&apos;)/*) != 0) and                                    (count(as:modconf(&apos;Ea&apos;)[1]/EaBlockConfiguration/*[EaImmediateData = &apos;true&apos;]) != 0)                                   )                                  )"/>
                      <mt:tst 
                              true="Immediate job queue must be configured when NvMJobPrioritization is enabled and at least one block is configured with immediate job priority." 
                              expr="(. = &apos;true&apos;) and (count(../../NvMBlockDescriptor/*[(NvMBlockJobPriority = 0)]) &gt; 0) and not(node:exists(../NvMSizeImmediateJobQueue))"/>
                    </mt:xpath>
                  </a:da>
                </v:var>
                <v:var name="NvMMainFunctionCycleTime" type="FLOAT">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the periodic cycle time, in seconds,
                          for calling NvM main function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="NvM Main Function Cycle Time"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="2850711f-c694-4392-8fb0-df4e9c8ffbeb"/>
                  <a:da name="DEFAULT" value="0.01"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=255"/>
                    <a:tst expr="&gt;=0.001"/>
                  </a:da>
                </v:var>
                <v:var name="NvMMultiBlockCallback" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the start address of a common call-back function
                          that shall be called on termination of each
                          asynchronous multi block request.&lt;/p&gt;

                          &lt;p&gt;Note: This call-back function is called inside a
                          critical section. Hence, application must ensure that
                          the run time of this function is reasonably short.&lt;/p&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;This parameter shall be editable only if
                              NvM/NvMCommon/BswMMultiBlockJobStatusInformation is set to
                              FALSE&lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Multiblock Request Call-back Function"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="003bc46a-f6c5-4315-8288-e58e2dbc6147"/>
                  <a:da name="DEFAULT" value="EcuM_CB_NfyNvMJobEnd"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../NvMBswMMultiBlockJobStatusInformation = &apos;false&apos;)"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMPollingMode" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the
                          polling mode in the NVRAM Manager and at
                          the same time disable/enable the call-back
                          functions usable by lower layers&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                Polling mode enabled, call-back
                                function usage disabled&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                Polling mode disabled, call-back
                                function usage enabled&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Note: The current implemention of the NvM supports
                          polling mode only. This parameter setting is ignored.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Polling Mode"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="fd7cc223-6de2-4706-a908-411b5ae40491"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="NvMReadBlockHook" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt; Enables the use of a hook function for
                          &lt;code&gt;NvM_ReadBlock()/NvM_ReadAll()&lt;/code&gt;.&lt;/p&gt;

                          &lt;p&gt; This hook function, to be implemented by the user,
                          will be called by the NvM at the end of
                          a request to read a block i.e. when the read job has completed. &lt;/p&gt;

                          &lt;p&gt; The read hook feature is supported only for blocks configured
                          with a permanent RAM.&lt;/p&gt;

                          &lt;p&gt; Only the data part (no header, no CRC) of the block can be updated by the read block
                          hook function. For blocks configured with a CRC, the CRC value will be calculated over the
                          changed data.&lt;/p&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Read Block Hook"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="NvMRepeatMirrorOperations" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the number of retries to let the application
                          copy data to or from the NvM module&apos;s mirror before
                          postponing the current job.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;0 .. 7&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Enable Explicit Synchronization Mechanism (&lt;code&gt;NvMBlockUseSyncMechanism&lt;/code&gt;):
                          This must be enabled for at least one NVM block.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Number of Repetitions for Mirror Operations"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="cbf95ab8-c4ac-41b7-bb7d-9128984e9e9b"/>
                  <a:da name="DEFAULT" value="0"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="count(../../NvMBlockDescriptor/*[(NvMBlockUseSyncMechanism = &apos;true&apos;)]) != 0"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=7"/>
                    <a:tst expr="&gt;=0"/>
                  </a:da>
                </v:var>
                <v:var name="NvMRteUsage" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the use of the RTE for this module.&lt;/p&gt;

                          &lt;ul&gt;
                          &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Rte enabled.&lt;/li&gt;
                          &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Rte disabled.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Note: For easy integration, it is recommended
                          that this parameter be disabled at the
                          beginning of the integration work.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Rte Usage"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr=". = &apos;true&apos; and (count(../../NvMBlockDescriptor/*[NvMProvideRteServicePort = &apos;true&apos; or                                 NvMProvideRteJobFinishedPort = &apos;true&apos; or NvMProvideRteInitBlockPort = &apos;true&apos; or                                 NvMProvideRteAdminPort = &apos;true&apos; or NvMProvideRteMirrorPort = &apos;true&apos;]) = 0)" 
                        true="The usage of the RTE is enabled for the NvM, but no RTE ports are configured."/>
                  <a:da name="WARNING" type="XPath" 
                        expr=". = &apos;true&apos; and count(as:modconf(&apos;Rte&apos;)/*) = 0" 
                        true="The usage of the RTE is enabled for the NvM, but the RTE is disabled or missing."/>
                </v:var>
                <v:var name="NvMSetRamBlockStatusApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the
                          &lt;code&gt;NvM_SetRamBlockStatus()&lt;/code&gt; API function.&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                &lt;code&gt;NvM_SetRamBlockStatus()&lt;/code&gt;
                                enabled&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                &lt;code&gt;NvM_SetRamBlockStatus()&lt;/code&gt;
                                disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Set RAM Block Status API"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="cac5fe48-d1b0-4e19-bb2c-f56353ed8a1d"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="NvMSizeImmediateJobQueue" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the number of entries for
                          the immediate priority job queue.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;1 .. 65535&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Enable Job Prioritization (&lt;code&gt;NvMJobPrioritization&lt;/code&gt;): must be enabled.&lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of Queue for Immediate Requests"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="7641d632-e1f6-42cc-8548-c3d511c5cbf1"/>
                  <a:da name="DEFAULT" value="1"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../NvMJobPrioritization = &apos;true&apos;)"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                  <a:da name="WARNING" type="XPath" 
                        expr="(. &gt; 1) and (../ApiConfigClass = &apos;NVM_API_CONFIG_CLASS_1&apos;)" 
                        true="No queue is needed for API configuration class 1."/>
                </v:var>
                <v:var name="NvMSizeStandardJobQueue" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the number of entries for
                          the standard priority job queue.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;1 .. 65535&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of Queue for Standard Requests"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="af34cf88-1880-4d4b-8ed4-90a1cdb93e0e"/>
                  <a:da name="DEFAULT" value="3"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                  <a:da name="WARNING" type="XPath" 
                        expr="(. &gt; 1) and (../ApiConfigClass = &apos;NVM_API_CONFIG_CLASS_1&apos;)" 
                        true="No queue is needed for API configuration class 1."/>
                </v:var>
                <v:lst name="NvMUserHeader">
                  <a:a name="LABEL" value="User Header"/>
                  <a:da name="MAX" value="255"/>
                  <a:da name="MIN" value="0"/>
                  <v:var name="NvMUserHeader" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines user specific header files for user-defined symbols&lt;/p&gt;.

                          &lt;p&gt;Note: &lt;code&gt;NvMUserHeader&lt;/code&gt; shall be configured in the following scenarios.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;If a permanent RAM block is configured with parameter
                            &lt;code&gt;NvMRamBlockDataAddress&lt;/code&gt;, user header must be set to a valid header
                            file including the declaration of the RAM block location.&lt;/li&gt;
                            &lt;li&gt;If a permanent ROM block is configured with parameter
                            &lt;code&gt;NvMRomBlockDataAddress&lt;/code&gt; user header must be set to a valid header
                            file including the declaration of the ROM block location.&lt;/li&gt;
                            &lt;li&gt;If a multi block call-back function is configured using the parameter
                            &lt;code&gt;NvMMultiBlockCallback&lt;/code&gt;, user header must be set to a valid
                            header file including the declaration of the call-back notification function.&lt;/li&gt;
                            &lt;li&gt;If a single block call-back function is configured using the parameter
                            &lt;code&gt;NvMSingleBlockCallback&lt;/code&gt;, user header must be set to a valid
                            header file including the declaration of the call-back notification function.&lt;/li&gt;
                            &lt;li&gt;If call-back functions are configured using the parameters
                            &lt;code&gt;NvMReadRamBlockFromNvCallback/NvMWriteRamBlockToNvCallback&lt;/code&gt;,
                            user header must be set to a valid header file including the prototype of the
                            mirror call-back functions.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="User Header File"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  </v:var>
                </v:lst>
                <v:var name="NvMVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables the
                          &lt;code&gt;NvM_GetVersionInfo()&lt;/code&gt; API function.&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; =
                                &lt;code&gt;NvM_GetVersionInfo()&lt;/code&gt;
                                enabled&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; =
                                &lt;code&gt;NvM_GetVersionInfo()&lt;/code&gt;
                                disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Version Info API"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="bed6269b-bab2-4aad-9dad-b5e190497cfd"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="NvMWriteBlockHook" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt; Enables the use of a hook function for
                          &lt;code&gt;NvM_WriteBlock()/NvM_WriteAll()&lt;/code&gt;.&lt;/p&gt;

                         &lt;p&gt;Note: The write hook feature is supported only for blocks configured
                          with a permanent RAM.&lt;/p&gt;

                          &lt;p&gt;This hook function, to be implemented by the user,
                          will be called by the NvM at the start of
                          a request to write a block i.e. before the write job is
                          started. &lt;/p&gt;

                          &lt;p&gt;Only the data part (no header, no CRC) of the block can be updated
                          by the write block hook function. For blocks configured with a CRC, the
                          CRC value will be calculated over the changed data&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Write Block Hook"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="NvMRedundantRecovery" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the behavior of NvM in case loss of recovery is detected for a redundant block.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;&lt;code&gt;NVM_RECOVERY_ON_REQUEST&lt;/code&gt;&lt;/li&gt;
                          &lt;li&gt;&lt;code&gt;NVM_AUTOMATIC_RECOVERY&lt;/code&gt;&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Note: The user has the possibility to configure the reaction in case the redundancy of a redundant
                          block is lost:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;NVM_RECOVERY_ON_REQUEST&lt;/code&gt; - when loss of redundancy is detected NvM will report
                            NVM_REQ_REDUNDANCY_FAILED as result of the request. In this way the user is notified and can restore
                            the redundant block immediately by triggering a NvM_WriteBlock request. If no write request is triggered
                            the block will be automatically restored during &lt;code&gt;NvM_WriteAll&lt;/code&gt;.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;NVM_AUTOMATIC_RECOVERY&lt;/code&gt; - loss of redundancy is transparent to the user. In case
                            at least one copy of a redundant block is successfully read NvM will report NVM_REQ_OK as result of
                            the operation. The block will be restored during shut-down (&lt;code&gt;NvM_WriteAll&lt;/code&gt;).&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Recovery of Redundant Blocks"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="NVM_AUTOMATIC_RECOVERY"/>
                  <a:da name="RANGE">
                    <a:v>NVM_RECOVERY_ON_REQUEST</a:v>
                    <a:v>NVM_AUTOMATIC_RECOVERY</a:v>
                  </a:da>
                </v:var>
                <v:var name="NvMExportBlockLengths" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables or disables the exporting of block lengths for
                          all configured NVRAM blocks to the NvM user.&lt;/p&gt;

                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = NvM shall export block lengths&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = NvM shall not export block lengths&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Note: The value of the exported block lengths correspond to the value
                          of the &lt;code&gt;NvMNvBlockLength&lt;/code&gt; configuration parameter.&lt;/p&gt;

                          &lt;p&gt;The exported block lengths have the following prototype:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;NvMConf_BlockName_Length&lt;/code&gt;&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Export block lengths"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="2e6bcaa4-d4e5-4f82-8102-a7768efba700"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="NvMResultErasedBlocks" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the reported value of the lower layer in case of
                          erased blocks or blocks not found in the memory.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;MEMIF_BLOCK_INCONSISTENT&lt;/code&gt;: lower layer reports block as inconsistent.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;MEMIF_BLOCK_INVALID&lt;/code&gt;: lower layer reports block as invalid.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Reported value for erased blocks"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:de4e1eea-964a-481e-acfe-122796d487af"/>
                  <a:da name="DEFAULT" value="MEMIF_BLOCK_INCONSISTENT"/>
                  <a:da name="RANGE">
                    <a:v>MEMIF_BLOCK_INCONSISTENT</a:v>
                    <a:v>MEMIF_BLOCK_INVALID</a:v>
                  </a:da>
                </v:var>
                <v:var name="NvMEnableLegacySymbolicNames" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables or disables exporting legacy symbolic names 
                          for AUTOSAR version older than 3.1 rev4 .
                          That is, if enabled it exports the NvM block 
                          names without NvM_ prefix according to AUTOSAR 3.X&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Legacy Symbolic Name"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="2e6bcaa4-d4e5-4f82-8102-a7768efba701"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="NvMResetRamBlockAfterReset" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reset the validity of Ram blocks that does not have CRC configured after a warm reset&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Reset Ram Block after Reset"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="2871918d-2899-46c2-b23d-e52d5b143d2e"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:ctr name="NvMCommonCryptoSecurityParameters" 
                       type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                       &lt;p&gt;Defines the configuration of the cryptography parameters of NvM.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Common Crypto Security Parameters"/>
                  <a:a name="UUID" value="2dfd3bf0-59b6-4f61-8fe2-89c3fc5874da"/>
                  <a:da name="ENABLE" value="true"/>
                  <v:var name="NvMEnableCryptoSecurityHooks" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                           &lt;p&gt;Enables the ussage of crypto security hooks for handling of NvM Blocks&apos;s data&lt;/p&gt;
                           &lt;ul&gt;
                             &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Enables Hooks Configuration.&lt;/li&gt;
                             &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Disables Hooks Configuration.&lt;/li&gt;
                           &lt;/ul&gt;
                         &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="Enable Read/Write Crypto Security Callbacks"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="dcca3800-f1b5-44b4-a1cc-385cbefe398f"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" value="true"/>
                  </v:var>
                  <v:var name="NvMCryptoReadHook" type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Configures the callback API to apply the corresponding crypto algorithm for a NvM Block after Read.&lt;/p&gt;
                          &lt;p&gt;Function prototype : Parameters : NvM_ASR40_BlockIdType NvMBlockId, uint8 *pBuffer, uint16 UserDataSize, uint8 CryptoExtraInfoSize, boolean FirstCall&lt;/p&gt;
                                               &lt;p&gt;Return     : MemIf_JobResultType&lt;/p&gt;
                          &lt;p&gt;Sync/Async         : Async &lt;/p&gt;
                          &lt;p&gt;Reentrancy         : Non Reentrant &lt;/p&gt;
                          &lt;p&gt;Description        : The function will take the data from &quot;pBuffer&quot;, will process it according to the crypto algorithm and it and shall copy&lt;/p&gt;
                                               &lt;p&gt;it back into &quot;pBuffer&quot;. Data is considered not only user data but the entire NvM block data, &lt;/p&gt;
                                               &lt;p&gt;comprised, depending on the configuration, by Static Block ID, User Data and CRC.&lt;/p&gt;
                                               &lt;p&gt;The API shall be called with FirstCall set to TRUE only the first time is triggered for a block. If the API returns&lt;/p&gt;
                                               &lt;p&gt;MEMIF_JOB_PENDING then the subsequent calls will be done with FirstCall set to FALSE and the call will&lt;/p&gt;
                                               &lt;p&gt;function as a GetJobResult.The API will be called each NvM Main cycle with FirstCall set to FALSE untill the function &lt;/p&gt;
                                               &lt;p&gt;returns a value different then MEMIF_JOB_PENDING.&lt;/p&gt;
                                               &lt;p&gt;The function shall return MEMIF_JOB_OK if the crypto processing was succesfull.&lt;/p&gt;
                                               &lt;p&gt;The function shall return MEMIF_JOB_PENDING if the crypto processing could not be completed syncrounous and &lt;/p&gt;
                                               &lt;p&gt;will be pending to be completed in the next main cycle.&lt;/p&gt;
                                               &lt;p&gt;The function shall return MEMIF_JOB_FAILED if the crypto processing was not succesfull.&lt;/p&gt;
                                               &lt;p&gt;Any other value returned shall be considered as MEMIF_JOB_FAILED.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Configure Crypto Read Hook"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="532bb1b0-7fb2-4e2c-9ac1-a6c7d8ffd0c0"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../NvMEnableCryptoSecurityHooks =&apos;true&apos;"/>
                    <a:da name="INVALID" type="XPath" 
                          expr=". = &apos;&apos; and ../NvMEnableCryptoSecurityHooks = &apos;true&apos;" 
                          true="Hooks must be configured if NvMEnableCryptoSecurityHooks parameter is enabled."/>
                  </v:var>
                  <v:var name="NvMCryptoWriteHook" type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Configures the callback API to apply the corresponding crypto algorithm for a NvM Block before Write.&lt;/p&gt;
                            &lt;p&gt;Function prototype : Parameters : NvM_ASR40_BlockIdType NvMBlockId, uint8 *pBuffer, uint16 UserDataSize, uint8 CryptoExtraInfoSize, boolean FirstCall&lt;/p&gt;
                                               &lt;p&gt;Return     : MemIf_JobResultType&lt;/p&gt;
                          &lt;p&gt;Sync/Async         : Async&lt;/p&gt;
                          &lt;p&gt;Reentrancy         : Non Reentrant &lt;/p&gt;
                          &lt;p&gt;Description        : The function will take the plain data from &quot;pBuffer&quot;, will crypto process it and shall copy&lt;/p&gt;
                                               &lt;p&gt;it back into &quot;pBuffer&quot;. Data is considered not only user data but the entire NvM block data,&lt;/p&gt;
                                               &lt;p&gt;comprised, depending on the configuration, by Static Block ID, User Data and CRC.&lt;/p&gt;
                                               &lt;p&gt;The API shall be called with FirstCall set to TRUE only the first time is triggered for a block. If the API returns&lt;/p&gt;
                                               &lt;p&gt;MEMIF_JOB_PENDING then the subsequent calls will be done with FirstCall set to FALSE and the call will&lt;/p&gt;
                                               &lt;p&gt;function as a GetJobResult.The API will be called each NvM Main cycle with FirstCall set to FALSE untill the function &lt;/p&gt;
                                               &lt;p&gt;returns a value different then MEMIF_JOB_PENDING.&lt;/p&gt;
                                               &lt;p&gt;The function shall return MEMIF_JOB_OK if the crypto processing was succesfull.&lt;/p&gt;
                                               &lt;p&gt;The function shall return MEMIF_JOB_PENDING if the crypto processing could not be completed syncrounous and &lt;/p&gt;
                                               &lt;p&gt;will be pending to be completed in the next main cycle.&lt;/p&gt;
                                               &lt;p&gt;The function shall return MEMIF_JOB_FAILED if the crypto processing was not succesfull.&lt;/p&gt;
                                               &lt;p&gt;Any other value returned shall be considered as MEMIF_JOB_FAILED.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Configure Crypto Write Hook"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="9fc4d56b-c879-43cb-988f-5cb16cc16cd5"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="../NvMEnableCryptoSecurityHooks =&apos;true&apos;"/>
                    <a:da name="INVALID" type="XPath" 
                          expr=". = &apos;&apos; and ../NvMEnableCryptoSecurityHooks = &apos;true&apos;" 
                          true="Hooks must be configured if NvMEnableCryptoSecurityHooks parameter is enabled."/>
                  </v:var>
                </v:ctr>
                <v:ctr name="NvMServiceAPI" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Defines the configuration of the service API of NvM.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Service API Parameters"/>
                  <a:a name="UUID" value="4ae88db0-16c1-11e2-892e-0800200c9a66"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../NvMRteUsage = &apos;true&apos;"/>
                  <v:var name="NvMEnableASR32ServiceAPI" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                           &lt;p&gt;Enables usage of the AUTOSAR 3.2 service API.&lt;/p&gt;

                           &lt;ul&gt;
                             &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Enables AUTOSAR 3.2 service API.&lt;/li&gt;
                             &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Disables AUTOSAR 3.2 service API.&lt;/li&gt;
                           &lt;/ul&gt;
                         &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable AUTOSAR 3.2 service API"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="4ae88db1-16c1-11e2-892e-0800200c9a66"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" value="true"/>
                  </v:var>
                  <v:var name="NvMEnableASR40ServiceAPI" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables usage of the AUTOSAR 4.0 service API.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Enables AUTOSAR 4.0 service API.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Disables AUTOSAR 4.0 service API.&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable AUTOSAR 4.0 service API"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="4ae88db2-16c1-11e2-892e-0800200c9a66"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" value="true"/>
                  </v:var>
                  <v:var name="NvMEnableASR42ServiceAPI" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Enables usage of the AUTOSAR 4.2 service API.&lt;/p&gt;

                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;true&lt;/code&gt; = Enables AUTOSAR 4.2 service API.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;false&lt;/code&gt; = Disables AUTOSAR 4.2 service API.&lt;/li&gt;
                            &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Enable AUTOSAR 4.2 service API"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" value="true"/>
                  </v:var>
                  <v:var name="NvMDefaultASRServiceAPI" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines the default AUTOSAR service API.&lt;/p&gt;

                            &lt;p&gt;Range:&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;AUTOSAR_32&lt;/code&gt; = AUTOSAR 3.2 service API is the default one.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;AUTOSAR_40&lt;/code&gt; = AUTOSAR 4.0 service API is the default one.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;AUTOSAR_42&lt;/code&gt; = AUTOSAR 4.2 service API is the default one.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;NONE&lt;/code&gt; = No default AUTOSAR service API is provided.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;If &lt;code&gt;NvMDefaultASRServiceAPI&lt;/code&gt; is selected as &lt;code&gt;NONE&lt;/code&gt; any of
                                  the service API parameters &lt;code&gt;NvMEnableASR40ServiceAPI&lt;/code&gt;,
                                  &lt;code&gt;NvMEnableASR32ServiceAPI&lt;/code&gt; or &lt;code&gt;NvMEnableASR42ServiceAPI&lt;/code&gt; needs to be selected.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="Default AUTOSAR service API"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:4ae88db3-16c1-11e2-892e-0800200c9a66"/>
                    <a:da name="DEFAULT" value="AUTOSAR_40"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;NONE&apos;) and (../../NvMRteUsage = &apos;true&apos;) and ( ../NvMEnableASR32ServiceAPI = &apos;false&apos;) and ( ../NvMEnableASR40ServiceAPI = &apos;false&apos;) and ( ../NvMEnableASR42ServiceAPI = &apos;false&apos;)" 
                          true="Any of the default service API (AUTOSAR_32/AUTOSAR_40/AUTOSAR_42) parameters shall be selected"/>
                    <a:da name="RANGE">
                      <a:v>AUTOSAR_32</a:v>
                      <a:v>AUTOSAR_40</a:v>
                      <a:v>AUTOSAR_42</a:v>
                      <a:v>NONE</a:v>
                    </a:da>
                  </v:var>
                </v:ctr>
              </v:ctr>
              <v:ctr name="NvmDemEventParameterRefs" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        &lt;p&gt;Container for the references to DemEventParameter elements
                        which shall be invoked using the API &lt;code&gt;Dem_ReportErrorStatus&lt;/code&gt; API
                        in case the corresponding error occurs. The &lt;code&gt;EventId&lt;/code&gt; is taken
                        from the referenced &lt;code&gt;DemEventParameter&lt;/code&gt;&apos;s
                        &lt;code&gt; DemEventId&lt;/code&gt; value. The standardized errors are provided
                        in the container and can be extended by vendor specific error references.&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Dem Event Parameter References"/>
                <a:a name="TAB" value="Production Errors"/>
                <a:a name="UUID" value="7df2c343-7371-4048-88e2-1abd944d0189"/>
                <a:da name="ENABLE" type="XPath" 
                      expr="(../ReportToDem/NvMIntegrityFailedReportToDem =&apos;DEM&apos;) or                             (../ReportToDem/NvMLossOfRedundancyReportToDem = &apos;DEM&apos;) or                             (../ReportToDem/NvMQueueOverflowReportToDem = &apos;DEM&apos;) or                             (../ReportToDem/NvMRequestFailedReportToDem =&apos;DEM&apos;) or                             (../ReportToDem/NvMVerifyFailedReportToDem =&apos;DEM&apos;) or                             (../ReportToDem/NvMWriteProtectedReportToDem =&apos;DEM&apos;) or                             (../ReportToDem/NvMWrongBlockIdReportToDem =&apos;DEM&apos;)"/>
                <v:ref name="NVM_E_INTEGRITY_FAILED" 
                       type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which shall be issued
                          when the error &lt;code&gt;NVM_E_INTEGRITY_FAILED&lt;/code&gt; has occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Request Integrity Failure (&lt;code&gt;NvMIntegrityFailedReportToDem&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_INTEGRITY_FAILED&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;Activation: Thrown, if a CRC mismatch occurs for a block configured
                            with CRC or &lt;code&gt;MEMIF_BLOCK_INCONSISTENT&lt;/code&gt; is reported by the
                            MemIf module during an attempt to read a NV block.&lt;/li&gt;
                            &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                            &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                            &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                            A list of API functions that report this error can be found in the
                            table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                            section of the module references.&lt;/li&gt;
                          &lt;/ul&gt;
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Integrity Failed Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="d9a4cca9-2bef-4ad6-b9bf-79503b8a5ec9"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMIntegrityFailedReportToDem =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
                <v:ref name="NVM_E_LOSS_OF_REDUNDANCY" 
                       type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which shall be issued
                          when the error &lt;code&gt;NVM_E_LOSS_OF_REDUNDANCY&lt;/code&gt; has occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Loss of Redundancy (&lt;code&gt;NvMLossOfRedundancyReportToDem&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_LOSS_OF_REDUNDANCY&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;Activation: Thrown, if a redundant NV block is detected as
                              damaged (the second copy is different than the first one),
                              during a read request.&lt;/li&gt;
                              &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                              &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                              &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                              A list of API functions that report this error can be found in the
                              table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                              section of the module references.&lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Loss of Redundancy Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="46d4e49e-b435-43ca-a241-be4e951a4efa"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMLossOfRedundancyReportToDem =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
                <v:ref name="NVM_E_QUEUE_OVERFLOW" 
                       type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which shall be issued
                          when the error &lt;code&gt;NVM_E_QUEUE_OVERFLOW&lt;/code&gt; has occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Request Queue Overflow (&lt;code&gt;NvMQueueOverflowReportToDem&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_QUEUE_OVERFLOW&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;Activation: Thrown, if a new asynchronous NvM request
                            cannot be processed because the NvM queue is full.&lt;/li&gt;
                            &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                            &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                            &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                            A list of API functions that report this error can be found in the
                            table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                            section of the module references.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Queue Overflow Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="f6143343-1da9-4293-a775-b37d9c063cd8"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMQueueOverflowReportToDem =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
                <v:ref name="NVM_E_REQ_FAILED" type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which
                          shall be issued when the error &lt;code&gt;NVM_E_REQ_FAILED&lt;/code&gt; has
                          occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;NvM Request Failure (&lt;code&gt;NvMRequestFailedReportToDem&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_REQ_FAILED&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;Activation: Thrown, if a single block request fails or the lower
                              layer module reports failure.&lt;/li&gt;
                              &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                              &lt;li&gt;Trigger debounce: &lt;code&gt;NVM_E_REQ_FAILED&lt;/code&gt; shall be thrown
                              only after a maximum number of retries (&lt;code&gt;NvMMaxNumOfReadRetries&lt;/code&gt;,
                              &lt;code&gt;NvMMaxNumOfWriteRetries&lt;/code&gt;) is exceeded for requests
                              configured with a retry counter.&lt;/li&gt;
                              &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                              A list of API functions that report this error can be found in the
                              table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                              section of the module references.&lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Request Failed Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="1d5cce00-af29-4c65-bedd-e49a9c06d293"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMRequestFailedReportToDem =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
                <v:ref name="NVM_E_VERIFY_FAILED" 
                       type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which shall be issued
                          when the error &lt;code&gt;NVM_E_VERIFY_FAILED&lt;/code&gt; has occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Request Verify Failed (&lt;code&gt;NvMVerifyFailedReportToDem&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_VERIFY_FAILED&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;Activation: Thrown, if the content of the RAM block is not the same
                            as the read back data.&lt;/li&gt;
                            &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                            &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                            &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                            A list of API functions that report this error can be found in the
                            table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                            section of the module references.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Verification Failed Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="8fee61fd-30c8-41d1-9af4-dd30d24f83b7"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMVerifyFailedReportToDem =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
                <v:ref name="NVM_E_WRITE_PROTECTED" 
                       type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which shall be issued
                          when the error &lt;code&gt;NVM_E_WRITE_PROTECTED&lt;/code&gt; i.e. a write attempt
                          to an NVRAM block with write protection has occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Request Write Protected (&lt;code&gt;NvMWriteProtectedReportToDem&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_WRITE_PROTECTED&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;Activation: Thrown, if a write, erase or invalidate operation is
                            requested for a write protected block.&lt;/li&gt;
                            &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                            &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                            &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                            A list of API functions that report this error can be found in the
                            table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                            section of the module references.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Block Write Protected Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="1e793ea3-8b3d-40a9-8074-e13fb050ec6c"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMWriteProtectedReportToDem =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
                <v:ref name="NVM_E_WRONG_BLOCK_ID" 
                       type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which shall be issued
                          when the error &lt;code&gt;NVM_E_WRONG_BLOCK_ID&lt;/code&gt; has occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Wrong Block Id (&lt;code&gt;NvMWrongBlockIdReportToDem&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_WRONG_BLOCK_ID&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;Activation: Thrown, if the static block ID stored in the NV block
                            header is different than the requested block ID.&lt;/li&gt;
                            &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                            &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                            &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                            A list of API functions that report this error can be found in the
                            table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                            section of the module references.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Wrong Block Id Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="f357ab45-d3ee-4b78-ae97-df6d90322b61"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMWrongBlockIdReportToDem =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
                <v:ref name="NVM_E_BLOCK_CHECK" type="SYMBOLIC-NAME-REFERENCE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the &lt;code&gt;DemEventParameter&lt;/code&gt; which shall be issued
                          when the error &lt;code&gt;NVM_E_BLOCK_CHECK&lt;/code&gt; has occurred.&lt;/p&gt;
                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Wrong Block Id (&lt;code&gt;NvMBlockCheckReportProdError&lt;/code&gt;):
                          Select DEM to enable &lt;code&gt;NVM_E_BLOCK_CHECK&lt;/code&gt;.&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Further notes:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;Activation: Thrown, if the Block Check mechanijsm detects a corrupted block in NV memory.&lt;/li&gt;
                            &lt;li&gt;Healing: None. The error resides in memory until it is deleted.&lt;/li&gt;
                            &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                            &lt;li&gt;Rate of diagnostic checks: Checked on every call of the service that reports this error.
                            A list of API functions that report this error can be found in the
                            table of production errors in the &lt;em&gt;Integration notes&lt;/em&gt;
                            section of the module references.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Block Check Event Parameter"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="64dc3b32-0cf1-11e8-ba89-0ed5f89f718b"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../ReportToDem/NvMBlockCheckReportProdError =&apos;DEM&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="REF" 
                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                </v:ref>
              </v:ctr>
              <v:ctr name="ReportToDem" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        Production error handling
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Production Error Handling"/>
                <a:a name="TAB" value="Optimization"/>
                <a:da name="TITLE" value="Production error handling"/>
                <v:var name="NvMUserCalloutFunctionProductionErrors" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the user callout for production errors:
                               NVM_E_USER_CALLOUT_LOSS_OF_REDUNDANCY, NVM_E_USER_CALLOUT_QUEUE_OVERFLOW,
                               NVM_E_USER_CALLOUT_REQ_FAILED, NVM_E_USER_CALLOUT_VERIFY_FAILED,
                               NVM_E_USER_CALLOUT_WRITE_PROTECTED, NVM_E_USER_CALLOUT_WRONG_BLOCK_ID,
                               NVM_E_USER_CALLOUT_INTEGRITY_FAILED.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="User Callout Function for Failed Production Errors"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:a name="UUID" value="986458f7-3bc6-997c-99f6-20b4c233ed8e"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMUserCalloutFunctionPassedProductionErrors" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the user callout for the case a production error has a passed status.
                               Function prototype is  &quot; UserSWC_FunctionName(BlockId, ApiId, ErrorId)&quot;
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="User Callout Function for Passed Production Errors"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:a name="UUID" value="db0d884a-1e9f-11e9-ab14-d663bd873d93"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(node:exists(../NvMUserCalloutFunctionProductionErrors))"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMIntegrityFailedReportToDem" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_INTEGRITY_FAILED&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              Request Integrity Failure errors are reported to the
                              Diagnostics Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              Request Integrity Failure errors are reported to the
                              Development Error Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              Request Integrity Failure errors are reported with user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Integrity Failed Event Parameter &lt;code&gt;NVM_E_INTEGRITY_FAILED&lt;/code&gt;: this reference must be set  if DEM is selected here.&lt;/li&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Request Integrity Failure"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_INTEGRITY_FAILED) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_INTEGRITY_FAILED for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMIntegrityFailedReportToDemDetErrorId" 
                       type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_INTEGRITY_FAILED&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Integrity Failure DemToDet Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="25"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMIntegrityFailedReportToDem =&apos;DET&apos;) or                               ((../NvMIntegrityFailedReportToDem =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Det Error Ids are not unique" 
                              expr="((../NvMRequestFailedReportToDem = &apos;DET&apos;) and (. = ../NvMRequestFailedReportToDemDetErrorId)) or                                  ((../NvMWrongBlockIdReportToDem = &apos;DET&apos;) and (. = ../NvMWrongBlockIdReportToDemDetErrorId)) or                                  ((../NNvMLossOfRedundancyReportToDem = &apos;DET&apos;) and (. = ../NvMLossOfRedundancyReportToDemDetErrorId)) or                                  ((../NvMQueueOverflowReportToDem = &apos;DET&apos;) and (. = ../NvMQueueOverflowReportToDemDetErrorId)) or                                  ((../NvMVerifyFailedReportToDem = &apos;DET&apos;) and (. = ../NvMVerifyFailedReportToDemDetErrorId)) or                                  ((../NvMWriteProtectedReportToDem = &apos;DET&apos;) and (. = ../NvMWriteProtectedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
                <v:var name="NvMRequestFailedReportToDem" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_REQ_FAILED&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              NvM Request Failure errors are reported to the Diagnostics
                              Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              NvM Request Failure errors are reported to the Development
                              Error Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              NvM Request Failure errors are reported from user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Request Failed Event Parameter &lt;code&gt;NVM_E_REQ_FAILED&lt;/code&gt;: this reference must be set if DEM is selected here.&lt;/li&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="NvM Request Failure"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_REQ_FAILED) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_REQ_FAILED for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMRequestFailedReportToDemDetErrorId" 
                       type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_REQ_FAILED&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Request Failure DemToDet Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="26"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMRequestFailedReportToDem = &apos;DET&apos;) or                               ((../NvMRequestFailedReportToDem =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Error Ids are not unique" 
                              expr="((../NvMIntegrityFailedReportToDem = &apos;DET&apos;) and (. = ../NvMIntegrityFailedReportToDemDetErrorId)) or                                  ((../NvMWrongBlockIdReportToDem = &apos;DET&apos;) and (. = ../NvMWrongBlockIdReportToDemDetErrorId)) or                                  ((../NNvMLossOfRedundancyReportToDem = &apos;DET&apos;) and (. = ../NvMLossOfRedundancyReportToDemDetErrorId)) or                                  ((../NvMQueueOverflowReportToDem = &apos;DET&apos;) and (. = ../NvMQueueOverflowReportToDemDetErrorId)) or                                  ((../NvMVerifyFailedReportToDem = &apos;DET&apos;) and (. = ../NvMVerifyFailedReportToDemDetErrorId)) or                                  ((../NvMWriteProtectedReportToDem = &apos;DET&apos;) and (. = ../NvMWriteProtectedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
                <v:var name="NvMWrongBlockIdReportToDem" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_WRONG_BLOCK_ID&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              Wrong Block Id errors are reported to the Diagnostics
                              Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              Wrong Block Id errors are reported to the Development
                              Error Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              Wrong Block Id errors are reported with user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Wrong Block Id Event Parameter &lt;code&gt;NVM_E_WRONG_BLOCK_ID&lt;/code&gt;: this reference must be set if DEM is selected here.&lt;/li&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Wrong Block Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_WRONG_BLOCK_ID) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_WRONG_BLOCK_ID for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMWrongBlockIdReportToDemDetErrorId" 
                       type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_WRONG_BLOCK_ID&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Wrong Block Id DemToDet Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="27"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMWrongBlockIdReportToDem =&apos;DET&apos;) or                               ((../NvMWrongBlockIdReportToDem =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Det Error Ids are not unique" 
                              expr="((../NvMRequestFailedReportToDem = &apos;DET&apos;) and (. = ../NvMRequestFailedReportToDemDetErrorId)) or                                  ((../NvMIntegrityFailedReportToDem = &apos;DET&apos;) and (. = ../NvMIntegrityFailedReportToDemDetErrorId)) or                                  ((../NNvMLossOfRedundancyReportToDem = &apos;DET&apos;) and (. = ../NvMLossOfRedundancyReportToDemDetErrorId)) or                                  ((../NvMQueueOverflowReportToDem = &apos;DET&apos;) and (. = ../NvMQueueOverflowReportToDemDetErrorId)) or                                  ((../NvMVerifyFailedReportToDem = &apos;DET&apos;) and (. = ../NvMVerifyFailedReportToDemDetErrorId)) or                                  ((../NvMWriteProtectedReportToDem = &apos;DET&apos;) and (. = ../NvMWriteProtectedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
                <v:var name="NvMLossOfRedundancyReportToDem" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_LOSS_OF_REDUNDANCY&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              Loss of Redundancy errors are reported to the Diagnostics
                              Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              Loss of Redundancy errors are reported to the Development
                              Error Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              Loss of Redundancy errors are reported from user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Loss of Redundancy Event Parameter &lt;code&gt;NVM_E_LOSS_OF_REDUNDANCY&lt;/code&gt;: this reference must be set if DEM is selected here.&lt;/li&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Loss of Redundancy"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="EDITABLE" value="true"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_LOSS_OF_REDUNDANCY) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_LOSS_OF_REDUNDANCY for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMLossOfRedundancyReportToDemDetErrorId" 
                       type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_LOSS_OF_REDUNDANCY&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Loss of Redundancy DemToDet Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="28"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMLossOfRedundancyReportToDem =&apos;DET&apos;) or                               ((../NvMLossOfRedundancyReportToDem =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Det Error Ids are not unique" 
                              expr="((../NvMRequestFailedReportToDem = &apos;DET&apos;) and (. = ../NvMRequestFailedReportToDemDetErrorId)) or                                  ((../NvMIntegrityFailedReportToDem = &apos;DET&apos;) and (. = ../NvMIntegrityFailedReportToDemDetErrorId)) or                                  ((../NvMWrongBlockIdReportToDem = &apos;DET&apos;) and (. = ../NvMWrongBlockIdReportToDemDetErrorId)) or                                  ((../NvMQueueOverflowReportToDem = &apos;DET&apos;) and (. = ../NvMQueueOverflowReportToDemDetErrorId)) or                                  ((../NvMVerifyFailedReportToDem = &apos;DET&apos;) and (. = ../NvMVerifyFailedReportToDemDetErrorId)) or                                  ((../NvMWriteProtectedReportToDem = &apos;DET&apos;) and (. = ../NvMWriteProtectedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
                <v:var name="NvMQueueOverflowReportToDem" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_QUEUE_OVERFLOW&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              Request Queue Overflow errors are reported to the
                              Diagnostics Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              Request Queue Overflow errors are reported to the
                              DevelopmentError Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              Request Queue Overflow errors are reported from user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Queue Overflow Event Parameter &lt;code&gt;NVM_E_QUEUE_OVERFLOW&lt;/code&gt;: this reference must be set if DEM is selected here.&lt;/li&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Request Queue Overflow"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_QUEUE_OVERFLOW) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_QUEUE_OVERFLOW for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMQueueOverflowReportToDemDetErrorId" 
                       type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_QUEUE_OVERFLOW&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Queue Overflow DemToDet Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="29"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMQueueOverflowReportToDem =&apos;DET&apos;) or                               ((../NvMQueueOverflowReportToDem =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Det Error Ids are not unique" 
                              expr="((../NvMRequestFailedReportToDem = &apos;DET&apos;) and (. = ../NvMRequestFailedReportToDemDetErrorId)) or                                  ((../NvMIntegrityFailedReportToDem = &apos;DET&apos;) and (. = ../NvMIntegrityFailedReportToDemDetErrorId)) or                                  ((../NvMWrongBlockIdReportToDem = &apos;DET&apos;) and (. = ../NvMWrongBlockIdReportToDemDetErrorId)) or                                  ((../NNvMLossOfRedundancyReportToDem = &apos;DET&apos;) and (. = ../NvMLossOfRedundancyReportToDemDetErrorId)) or                                  ((../NvMVerifyFailedReportToDem = &apos;DET&apos;) and (. = ../NvMVerifyFailedReportToDemDetErrorId)) or                                  ((../NvMWriteProtectedReportToDem = &apos;DET&apos;) and (. = ../NvMWriteProtectedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
                <v:var name="NvMVerifyFailedReportToDem" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_VERIFY_FAILED&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              Request Verify Failed errors are reported to the
                              Diagnostics Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              Request Verify Failed errors are reported to the
                              Development Error Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              Request Verify Failed errors are reported from user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Verification Failed Event Parameter &lt;code&gt;NVM_E_VERIFY_FAILED&lt;/code&gt;: this reference must be set&lt;/li&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Request Verify Failed"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_VERIFY_FAILED) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_VERIFY_FAILED for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMVerifyFailedReportToDemDetErrorId" 
                       type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_VERIFY_FAILED&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Verify Failed DemToDet Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="30"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMVerifyFailedReportToDem =&apos;DET&apos;) or                               ((../NvMVerifyFailedReportToDem =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Det Error Ids are not unique" 
                              expr="((../NvMRequestFailedReportToDem = &apos;DET&apos;) and (. = ../NvMRequestFailedReportToDemDetErrorId)) or                                  ((../NvMIntegrityFailedReportToDem = &apos;DET&apos;) and (. = ../NvMIntegrityFailedReportToDemDetErrorId)) or                                  ((../NvMWrongBlockIdReportToDem = &apos;DET&apos;) and (. = ../NvMWrongBlockIdReportToDemDetErrorId)) or                                  ((../NNvMLossOfRedundancyReportToDem = &apos;DET&apos;) and (. = ../NvMLossOfRedundancyReportToDemDetErrorId)) or                                  ((../NvMQueueOverflowReportToDem = &apos;DET&apos;) and (. = ../NvMQueueOverflowReportToDemDetErrorId)) or                                  ((../NvMWriteProtectedReportToDem = &apos;DET&apos;) and (. = ../NvMWriteProtectedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
                <v:var name="NvMWriteProtectedReportToDem" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_WRITE_PROTECTED&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              Request Write Protected errors are reported to the
                              Diagnostics Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              Request Write Protected errors are reported to the
                              Development Error Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              Request Write Protected errors are reported from user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Write Protected Event Parameter &lt;code&gt;NVM_E_WRITE_PROTECTED&lt;/code&gt;: this reference must be set if DEM is selected here.&lt;/li&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Request Write Protected"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_WRITE_PROTECTED) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_WRITE_PROTECTED for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMWriteProtectedReportToDemDetErrorId" 
                       type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_WRITE_PROTECTED&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Write Protected DemToDet Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="31"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMWriteProtectedReportToDem =&apos;DET&apos;) or                               ((../NvMWriteProtectedReportToDem =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Det Error Ids are not unique" 
                              expr="((../NvMRequestFailedReportToDem = &apos;DET&apos;) and (. = ../NvMRequestFailedReportToDemDetErrorId)) or                                  ((../NvMIntegrityFailedReportToDem = &apos;DET&apos;) and (. = ../NvMIntegrityFailedReportToDemDetErrorId)) or                                  ((../NvMWrongBlockIdReportToDem = &apos;DET&apos;) and (. = ../NvMWrongBlockIdReportToDemDetErrorId)) or                                  ((../NNvMLossOfRedundancyReportToDem = &apos;DET&apos;) and (. = ../NvMLossOfRedundancyReportToDemDetErrorId)) or                                  ((../NvMQueueOverflowReportToDem = &apos;DET&apos;) and (. = ../NvMQueueOverflowReportToDemDetErrorId)) or                                  ((../NvMVerifyFailedReportToDem = &apos;DET&apos;) and (. = ../NvMVerifyFailedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
                <v:var name="NvMBlockCheckReportProdError" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Defines the handling of the production error:
                          &lt;code&gt;NVM_E_BLOCK_CHECK&lt;/code&gt;&lt;/p&gt;

                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;:
                              Block Check errors are reported to the
                              Diagnostics Event Manager (Dem).&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;:
                              Block Check errors are reported to the
                              Development Error Tracer (Det) if enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;UserCallout&lt;/code&gt;:
                              Block Check errors are reported from user configured callout.
                            &lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;:
                              These errors are not reported at all.&lt;/li&gt;
                          &lt;/ul&gt;

                          &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;Enable Development Error Detection &lt;code&gt;NvMDevErrorDetect&lt;/code&gt;: must be enabled if DET is selected here&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Block Check Error"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="RANGE">
                    <a:v>DEM</a:v>
                    <a:v>DET</a:v>
                    <a:v>UserCallout</a:v>
                    <a:v>DISABLE</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="(. = &apos;DEM&apos;) and  (node:refvalid(../../NvmDemEventParameterRefs/NVM_E_BLOCK_CHECK) != &apos;true&apos;)" 
                           true="NVRAM Manager needs the DEM event /Dem/DemConfigSet/DemEventParameter/NVM_E_BLOCK_CHECK for a successful build."/>
                    <a:tst 
                           expr="(. = &apos;DET&apos;) and (../../NvMCommon/NvMDevErrorDetect = &apos;false&apos;)" 
                           true="NvMDevErrorDetect is set to false which means that production errors will not be reported to the development error tracer (Det)."/>
                  </a:da>
                </v:var>
                <v:var name="NvMBlockCheckReportProdErrorId" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If the &lt;code&gt;NVM_E_BLOCK_CHECK&lt;/code&gt; production error is reported to the Det,
                              this parameter defines the unique error identifier which is reported there.&lt;/p&gt;
                          &lt;p&gt;Range:&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt; 25 .. 255, must be unique &lt;/li&gt;
                          &lt;/ul&gt;

                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Block Check Prod Error Id"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="DEFAULT" value="32"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../NvMBlockCheckReportProdError =&apos;DET&apos;) or                               ((../NvMBlockCheckReportProdError =&apos;UserCallout&apos;) and                                (node:exists(../NvMUserCalloutFunctionProductionErrors)))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=25"/>
                    </mt:range>
                    <mt:xpath true="Configured Det Error Ids are not unique" 
                              expr="((../NvMRequestFailedReportToDem = &apos;DET&apos;) and (. = ../NvMRequestFailedReportToDemDetErrorId)) or                                  ((../NvMIntegrityFailedReportToDem = &apos;DET&apos;) and (. = ../NvMIntegrityFailedReportToDemDetErrorId)) or                                  ((../NvMWrongBlockIdReportToDem = &apos;DET&apos;) and (. = ../NvMWrongBlockIdReportToDemDetErrorId)) or                                  ((../NNvMLossOfRedundancyReportToDem = &apos;DET&apos;) and (. = ../NvMLossOfRedundancyReportToDemDetErrorId)) or                                  ((../NvMQueueOverflowReportToDem = &apos;DET&apos;) and (. = ../NvMQueueOverflowReportToDemDetErrorId)) or                                  ((../NvMVerifyFailedReportToDem = &apos;DET&apos;) and (. = ../NvMVerifyFailedReportToDemDetErrorId))or                                  ((../NvMWriteProtectedReportToDem = &apos;DET&apos;) and (. = ../NvMWriteProtectedReportToDemDetErrorId))"/>
                  </a:da>
                </v:var>
              </v:ctr>
              <v:ctr name="MultiCoreCallout" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        Multi-Core Callouts configuration
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Multi-Core Callouts configuration"/>
                <a:a name="TAB" value="Multi-Core Callouts"/>
                <a:da name="TITLE" value="Multi-Core Callouts"/>
                <v:var name="NvMReadBlockCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_ReadBlock API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_ReadBlock request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Read callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="448c78d0-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMWriteBlockCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the callout for the NvM_WriteBlock() API and all corespondent RTE APIs.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_WriteBlock request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Write callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="503ddcfa-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMRestoreBlockDefaultsCallout" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_RestoreBlockDefaults API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_RestoreBlockDefaults request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="RestoreBlockDefaults callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="59c25e04-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMReadPRAMBlockCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_ReadPRAMBlock API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_ReadPRAMBlock request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="ReadPRAM callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="7a6222de-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMWritePRAMBlockCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_WritePRAMBlock API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_WritePRAMBlock request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="WritePRAM callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="7a6222de-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMRestorePRAMBlockDefaultsCallout" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_RestorePRAMBlockDefaults API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_RestorePRAMBlockDefaults request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="RestorePRAMBlockDefaults callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="a62f15f2-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMEraseNvBlockCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_EraseNvBlock API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_EraseNvBlock request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Erase callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="afb04f24-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMInvalidateNvBlockCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_InvalidateNvBlock API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_InvalidateNvBlock request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="InvalidateNvBlock callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="b465ed62-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="NvMCancelJobsCallout" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;  Defines the name of the multi-core callout function to be used for NvM_CancelJobs API.&lt;/p&gt;
                          &lt;p&gt;  When the callout is configured a NvM_CancelJobs request evaluates first the condition
                          for executing the request and then calls the callout function.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CancelJobs callout for multicore"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="TAB" value="Multi-Core Callouts"/>
                  <a:a name="UUID" value="bdf677c0-df0e-11e7-80c1-9a214cf093ae"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
              </v:ctr>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/NvM"/>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the NvM can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
