<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM1I2R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="KeyM" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.4.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC" 
                   value="EN: Configuration of the Mcu (Microcontroller Unit) module."/>
              <a:a name="LOWER-MULTIPLICITY" value="1"/>
              <a:a name="POSTBUILDVARIANTSUPPORT" value="false"/>
              <a:a name="RELEASE" value="asc:4.3"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="2"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="11"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="109"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                     type="IMPLEMENTATIONCONFIGCLASS">
                  <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                </a:a>
                <a:a name="LABEL" value="Config Variant"/>
                <a:da name="DEFAULT" value="VariantPreCompile"/>
                <a:da name="RANGE" value="VariantPreCompile"/>
              </v:var>
              <v:ctr name="KeyMGeneral" type="IDENTIFIABLE">
                <a:a name="DESC" 
                     value="EN: This container holds general configuration (parameters) for key manager."/>
                <v:var name="KeyMCertificateChainMaxDepth" type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum number of certificates defined in a certificate chain."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="1"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=255"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="KeyMCertificateManagerEnabled" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the part that manages certificates."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="EDITABLE" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyHandlerPrepareEnabled" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the key handler prepare function call. If set to true, the corresponding key handler function shall be provided."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyHandlerServiceCertificateEnabled" 
                       type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the key handler service function call. If set to true, the certificate submodule function KeyM_KH_ServiceCertificate() shall be provided."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyHandlerStartFinalizeEnabled" 
                       type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the key handler start and finalize function call. If set to true, the key handler functions KeyM_KH_Start() and KeyM_KH_Finalize() shall be provided."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyHandlerUpdateEnabled" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the call to the key handler update function KeyM_KH_Update(). If set to true, the corresponding key handler function shall be provided."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyHandlerVerifyEnabled" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the call to the key handler verify function KeyM_KH_Verify(). If set to true, the corresponding key handler function shall be provided."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyManagerEnabled" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the part that manages crypto key operations."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyPrepareFunctionEnabled" 
                       type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the prepare function of the key manager. If set to true, the KeyM_Prepare() function has to be called accordingly."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyStartFinalizeFunctionEnabled" 
                       type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the start and Finish function of the key manager. If set to true, the KeyM_Start() and KeyM_Finalize() functions have to be called."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyVerifyAsyncMode" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: This parameter defines if the function KeyM_Verify() runs in synchronous or asynchronous mode"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="KeyMCryptoKeyVerifyFunctionEnabled" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the verify function of the key manager. If set to true, the KeyM_Verify() function can be called."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="KeyMDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Switches the development error detection and notification on or off."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="KeyMKeyCertNameMaxLength" type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum length in bytes of certificate or key names used for the service interface."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=255"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="KeyMMainFunctionPeriod" type="FLOAT">
                  <a:a name="DESC" 
                       value="EN: Specifies the period of main function KeyM_MainFunction in seconds."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="0.01"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=4294967295"/>
                    <a:tst expr="&gt;0.0"/>
                  </a:da>
                </v:var>
                <v:var name="KeyMServiceCertificateFunctionEnabled" 
                       type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) the certificate service function of the key manager. If set to true, the KeyM_ServiceCertificate() function has to be called accordingly."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="KeyMBackgroundEnabled" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables (TRUE) or disables (FALSE) execution of background processing in the KeyM_MainBackgroundFunction instead of the default KeyM_MainFunction."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
              <v:lst name="KeyMCertificate" type="MAP">
                <a:da name="INVALID" type="XPath">
                  <a:tst 
                         expr="(node:value(./../KeyMGeneral/KeyMCertificateManagerEnabled) = &apos;true&apos;) and (count(./*) = 0)" 
                         true="If &apos;KeyMGeneral/KeyMCertificateManagerEnabled&apos; is enabled, at least one certificate has to be configured."/>
                  <a:tst 
                         expr="not(node:isconsecutive(./*/KeyMCertificateId, 0))" 
                         true="KeyMCertificateIds are not consecutive, gapless and zero-based."/>
                  <a:tst 
                         expr="(0 &lt; num:i(count(./*))) and (1 &gt; num:i(count(node:filter(./*, &apos;node:name(.) = node:name(node:ref(./KeyMCertUpperHierarchicalCertRef))&apos;))))" 
                         true="At least one certificate shall be defined as the Root certificate of a PKI by configuring &apos;KeyMCertificate/KeyMCertUpperHierarchicalCertRef&apos; to reference the certificate itself."/>
                </a:da>
                <a:da name="MAX" value="65535"/>
                <v:ctr name="KeyMCertificate" type="IDENTIFIABLE">
                  <a:a name="DESC" 
                       value="EN: This container contains the certificate configuration."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(KeyM:IsCertificateChainDepthOk(., ./../../KeyMGeneral/KeyMCertificateChainMaxDepth))" 
                        true="The (sub-)chain starting from this certificate does not reach a root certificate within &apos;KeyMGeneral/KeyMCertificateChainMaxDepth&apos; reference steps."/>
                  <v:var name="KeyMCertAlgorithmType" type="ENUMERATION">
                    <a:a name="DESC" 
                         value="EN: Specify in which format the certificate will be provided."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="RSA"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:value(.) != &apos;RSA&apos;" 
                          true="Only &apos;RSA&apos; is supported."/>
                    <a:da name="RANGE">
                      <a:v>ECC</a:v>
                      <a:v>RSA</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCertFormatType" type="ENUMERATION">
                    <a:a name="DESC" 
                         value="EN: Specify in which format the certificate will be provided."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="X509"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:value(.) != &apos;X509&apos;" 
                          true="Only &apos;X509&apos; is supported."/>
                    <a:da name="RANGE">
                      <a:v>CRL</a:v>
                      <a:v>CVC</a:v>
                      <a:v>X509</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCertificateId" type="INTEGER">
                    <a:a name="DESC" 
                         value="EN: Identifier of the certificate. The set of configured identifiers shall be consecutive and gapless."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=65535"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCertificateMaxLength" type="INTEGER">
                    <a:a name="DESC" 
                         value="EN: Specify the maximum length in bytes of the certificate."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:range>
                      <mt:xpath 
                                true="The length of this certificate exceeds the length &apos;KeyMCryptoKey/KeyMCryptoKeyMaxLength&apos; of the crypto key referenced via &apos;KeyMCertificate/KeyMCertStorageCryptoKeyRef&apos;." 
                                expr="node:value(.) &gt; node:value(node:ref(./../KeyMCertStorageCryptoKeyRef)/KeyMCryptoKeyMaxLength)"/>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCertificateName" type="STRING">
                    <a:a name="DESC" 
                         value="EN: Provides a unique name of the certificate for identification. The certificate provisional will reference certificates by this unique name."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="not(text:uniq(./../../*/KeyMCertificateName, node:value(.)))" 
                             true="Name is not unique."/>
                      <a:tst 
                             expr="num:i(string-length(node:value(.))) &gt; num:i(node:value(./../../../KeyMGeneral/KeyMKeyCertNameMaxLength))" 
                             true="Name is too long. Limit is configured via &apos;KeyMGeneral/KeyMKeyCertNameMaxLength&apos;."/>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCertificateVerifyCallbackNotificationFunc" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC" 
                         value="EN: This parameter provides the function name for the callback &lt;KeyM_CertificateVerifyCallbackNotification&gt;. It indicates if a certificate verification operation was finished and provides its status. If this parameter is omitted, no callback will be provided."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:containsValue(../../../KeyMCertificate/*/KeyMServiceCertificateCallbackNotificationFunc, node:value(.))" 
                          true="The name of &apos;KeyMCertificate/KeyMCertificateVerifyCallbackNotificationFunc&apos; is also used for a &apos;KeyMCertificate/KeyMServiceCertificateCallbackNotificationFunc&apos;."/>
                  </v:var>
                  <v:var name="KeyMServiceCertificateCallbackNotificationFunc" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC" 
                         value="EN: This parameter provides the function name for the service certificate callback &lt;KeyM_ServiceCertificateCallbackNotification&gt;. It indicates if a certificate service operation was finished and provides its status. If this parameter is not set, no callback will be provided."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:containsValue(../../../KeyMCertificate/*/KeyMCertificateVerifyCallbackNotificationFunc, node:value(.))" 
                          true="The name of &apos;KeyMCertificate/KeyMServiceCertificateCallbackNotificationFunc&apos; is also used for a &apos;KeyMCertificate/KeyMCertificateVerifyCallbackNotificationFunc&apos;."/>
                  </v:var>
                  <v:lst name="KeyMCertCertificateElementRuleRef">
                    <a:da name="MAX" value="65535"/>
                    <v:ref name="KeyMCertCertificateElementRuleRef" 
                           type="REFERENCE">
                      <a:a name="DESC" 
                           value="EN: Reference to certificate element rules which should be verified within the certification validation step."/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="not(KeyM:IsCertificateVerificationRuleSetOk(.))" 
                            true="The set of verification rules starting from this rule contains at least one circular reference or a condition which references a certificate element of another certificate in &apos;KeyMCertificateElementCondition/KeyMCertificateElementRef&apos;."/>
                      <a:da name="REF" 
                            value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificateElementVerification/KeyMCertificateElementRule"/>
                    </v:ref>
                  </v:lst>
                  <v:ref name="KeyMCertCsmSignatureVerifyJobRef" 
                         type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: Reference to the CSM job that is used to verify the signature"/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="not(node:refvalid(.))" 
                          true="The configured node does not exist or may not be referenced."/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="KeyMCertCsmSignatureVerifyKeyRef" 
                         type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: References to the CSM key associated to the CSM signature verify job. This parameter can be omitted if the certificate is stored in CSM and the public key automatically references to the signature verify job, e.g. with virtual key."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="KeyMCertPrivateKeyStorageCryptoKeyRef" 
                         type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: Defines a storage location of the private key of a certificate."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCryptoKey"/>
                  </v:ref>
                  <v:ref name="KeyMCertStorageCryptoKeyRef" type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: Defines a storage location of the certificate."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:da name="ENABLE" value="true"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:containsValue(node:difference(../../*/KeyMCertStorageCryptoKeyRef,.),node:value(.))" 
                          true="The referenced &apos;KeyMCryptoKey&apos; is already used in a different certificate."/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCryptoKey"/>
                  </v:ref>
                  <v:ref name="KeyMCertTimebaseRef" type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: This is a reference to an StbM time base to validate the validity period. Alternatively, KeyMCertificateElementVerification with the KeyMCertificateElement of CertificateValidityPeriodNotBefore or CertificateValidityPeriodNotAfter could be used."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/StbM/StbMSynchronizedTimeBase"/>
                  </v:ref>
                  <v:ref name="KeyMCertUpperHierarchicalCertRef" 
                         type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: Identifier of the certificate that is the next higher in the PKI hierarchical structure. The reference points to itself for root certificates."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificate"/>
                  </v:ref>
                  <v:lst name="KeyMCertificateElement" type="MAP">
                    <a:da name="INVALID" type="XPath" 
                          expr="not(node:isconsecutive(./*/KeyMCertificateElementId, 0))" 
                          true="KeyMCertificateElementIds are not consecutive, gapless and zero-based."/>
                    <a:da name="MAX" value="65535"/>
                    <v:ctr name="KeyMCertificateElement" type="IDENTIFIABLE">
                      <a:a name="DESC" 
                           value="EN: This container contains the certificate element configuration."/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:da name="INVALID" type="XPath">
                        <a:tst 
                               expr="var:set(&apos;currentName&apos;,node:name(.)) and (count(../../../*/KeyMCertificateElement/*[@name=$currentName]) &gt; 1)" 
                               true="The name of the &apos;KeyMCertificateElement&apos; is not unique."/>
                        <a:tst 
                               expr="(node:value(./KeyMCertificateElementOfStructure) = &apos;CertificateExtension&apos;) and not(node:exists(./KeyMCertificateElementObjectId)) and (node:exists(./KeyMCertificateElementObjectType))" 
                               true="KeyMCertificateElementObjectId has to be set when KeyMCertificateElementOfStructure is set to CertificateExtension and KeyMCertificateElementObjectType is enabled."/>
                      </a:da>
                      <v:var name="KeyMCertificateElementHasIteration" 
                             type="BOOLEAN">
                        <a:a name="DESC" 
                             value="EN: Defines if the certificate element can occur more than one time. If so, the iterator can be used to retrieve the individual data values of this certificate element."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="DEFAULT" value="false"/>
                      </v:var>
                      <v:var name="KeyMCertificateElementMaxIterations" 
                             type="INTEGER">
                        <a:a name="DESC" 
                             value="EN: Maximum number of iterations."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="../KeyMCertificateElementHasIteration"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=255"/>
                          <a:tst expr="&gt;=2"/>
                        </a:da>
                      </v:var>
                      <v:var name="KeyMCertificateElementId" type="INTEGER">
                        <a:a name="DESC" 
                             value="EN: Identifier of a certificate element."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=65535"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="KeyMCertificateElementMaxLength" 
                             type="INTEGER">
                        <a:a name="DESC" value="EN: Maximum length in bytes."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=65535"/>
                          <a:tst expr="&gt;=1"/>
                        </a:da>
                      </v:var>
                      <v:var name="KeyMCertificateElementObjectId" 
                             type="STRING">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                              &lt;p&gt;
                                EN: This is the object identifier (OID) that is used to identify the certificate element within its element structure.
                                &lt;br/&gt;&lt;br/&gt;
                                The value is parsed as comma-separated byte values given in hexadecimal representation (uint8 array).
                                E.g. 0x12, 0xab, 0xff would be a valid input.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="text:match(node:value(.), &apos;^(\s*0x[A-Fa-f0-9]{2}\s*)(\s*,\s*0x[A-Fa-f0-9]{2}\s*)*$&apos;)" 
                              false="The object identifier is not given in the correct format."/>
                      </v:var>
                      <v:var name="KeyMCertificateElementObjectType" 
                             type="INTEGER">
                        <a:a name="DESC" 
                             value="EN: Certificate elements are stored in ASN.1 format. In this item the type of ASN.1 TLV can be specified (e.g. INTEGER has the value &apos;2&apos;). This can be used to identify only such certificate elements. If the type is different, the element is not included in the search."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=255"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="KeyMCertificateElementOfStructure" 
                             type="ENUMERATION">
                        <a:a name="DESC" 
                             value="EN: This defines in which structure the certificate element is located."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="RANGE">
                          <a:v>CertificateExtension</a:v>
                          <a:v>CertificateIssuerName</a:v>
                          <a:v>CertificateIssuerUniqueIdentifier</a:v>
                          <a:v>CertificateSerialNumber</a:v>
                          <a:v>CertificateSignature</a:v>
                          <a:v>CertificateSignatureAlgorithm</a:v>
                          <a:v>CertificateSignatureAlgorithmID</a:v>
                          <a:v>CertificateSubjectName</a:v>
                          <a:v>CertificateSubjectPublicKeyInfo_PublicKeyAlgorithm</a:v>
                          <a:v>CertificateSubjectPublicKeyInfo_SubjectPublicKey</a:v>
                          <a:v>CertificateSubjectUniqueIdentifier</a:v>
                          <a:v>CertificateValidityPeriodNotAfter</a:v>
                          <a:v>CertificateValidityPeriodNotBefore</a:v>
                          <a:v>CertificateVersionNumber</a:v>
                        </a:da>
                      </v:var>
                      <v:var name="KeyMCertificateElementIsMandatory" 
                             type="BOOLEAN">
                        <a:a name="DESC" 
                             value="EN: Defines if the certificate element is mandatory."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="DEFAULT" value="false"/>
                      </v:var>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <v:lst name="KeyMCertificateElementVerification" type="MAP">
                <a:da name="MAX" value="65535"/>
                <v:ctr name="KeyMCertificateElementVerification" 
                       type="IDENTIFIABLE">
                  <a:a name="DESC" 
                       value="EN: This container defines if and how certificate elements are to be verified."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <v:lst name="KeyMCertificateElementCondition" type="MAP">
                    <a:da name="MIN" value="1"/>
                    <v:ctr name="KeyMCertificateElementCondition" 
                           type="IDENTIFIABLE">
                      <a:a name="DESC" 
                           value="EN: This container contains the configuration of KeyElement compare conditions which can be used as arguments for a KeyMCertificateElementRule."/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:da name="INVALID" type="XPath" 
                            expr="not(node:exists(./KeyMCertificateElementRef))" 
                            true="KeyMCertificateElementRef shall be enabled."/>
                      <v:var name="KeyMCertElementConditionType" 
                             type="ENUMERATION">
                        <a:a name="DESC" 
                             value="EN: This parameter specifies what kind of comparison that is made for the evaluation of the mode condition."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:exists(../KeyMCertificateElementConditionValue/KeyMCertificateElementConditionCerificateElement) and not((node:value(.) = &apos;KEYM_EQUALS&apos;) or (node:value(.) = &apos;KEYM_EQUALS_NOT&apos;))" 
                              true="When the condition &apos;KeyMCertificateElementConditionCerificateElement&apos; is used, only KEYM_EQUALS and KEYM_EQUALS_NOT are supported."/>
                        <a:da name="RANGE">
                          <a:v>KEYM_EQUALS</a:v>
                          <a:v>KEYM_EQUALS_NOT</a:v>
                          <a:v>KEYM_GREATER_OR_EQUAL</a:v>
                          <a:v>KEYM_LESS_OR_EQUAL</a:v>
                          <a:v>KEYM_LESS_THAN</a:v>
                        </a:da>
                      </v:var>
                      <v:ref name="KeyMCertificateElementRef" type="REFERENCE">
                        <a:a name="DESC" 
                             value="EN: Reference to a certificate element used for the condition."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:da name="ENABLE" value="true"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="not(node:refvalid(.))" 
                              true="The configured node does not exist or may not be referenced."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificate/KeyMCertificateElement"/>
                      </v:ref>
                      <v:ctr name="KeyMCertificateElementConditionValue" 
                             type="IDENTIFIABLE">
                        <a:a name="DESC" 
                             value="EN: This container contains the configuration of a compare value."/>
                        <a:da name="INVALID" type="XPath" 
                              expr="not(count(*) = 1)" 
                              true="&apos;KeyMCertificateElementConditionValue&apos; shall contain exactly one condition value."/>
                        <v:ctr name="KeyMCertificateElementConditionArray" 
                               type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container contains the configuration of a array compare value."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:da name="ENABLE" value="false"/>
                          <v:lst 
                                 name="KeyMCertificateElementConditionArrayElement" 
                                 type="MAP">
                            <v:ctr 
                                   name="KeyMCertificateElementConditionArrayElement" 
                                   type="IDENTIFIABLE">
                              <a:a name="DESC" 
                                   value="EN: This container contains the configuration of a array compare value."/>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                              </a:a>
                              <v:var 
                                     name="KeyMCertificateElementConditionArrayElementIndex" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: Index to an element of the compare value array."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="INVALID" type="Multi">
                                  <mt:range>
                                    <mt:tst expr="&lt;=65535"/>
                                    <mt:tst expr="&gt;=0"/>
                                  </mt:range>
                                  <mt:xpath 
                                            true="The index is out of range of the referenced certificate element." 
                                            expr="node:refvalid(./../../../../../KeyMCertificateElementRef) and (node:value(.) &gt;= node:ref(./../../../../../KeyMCertificateElementRef)/KeyMCertificateElementMaxLength)"/>
                                </a:da>
                              </v:var>
                              <v:var 
                                     name="KeyMCertificateElementConditionArrayElementValue" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: Value of an array element compare value."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=255"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                              </v:var>
                            </v:ctr>
                          </v:lst>
                        </v:ctr>
                        <v:ctr 
                               name="KeyMCertificateElementConditionCerificateElement" 
                               type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container contains the configuration of a certificate element as a compare value."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="VISIBLE" value="false"/>
                          <a:da name="ENABLE" value="false"/>
                          <v:ref name="KeyMCertificateElementRef" 
                                 type="REFERENCE">
                            <a:a name="DESC" 
                                 value="EN: Reference to another certificate element."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="not(node:refvalid(.))" 
                                  true="The configured node does not exist or may not be referenced."/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificate/KeyMCertificateElement"/>
                          </v:ref>
                        </v:ctr>
                        <v:ctr name="KeyMCertificateElementConditionPrimitive" 
                               type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container contains the configuration of a primitive compare value."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:da name="ENABLE" value="false"/>
                          <v:var 
                                 name="KeyMCertificateElementConditionPrimitiveValue" 
                                 type="INTEGER">
                            <a:a name="DESC" value="EN: Primitive compare value"/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=255"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                        </v:ctr>
                        <v:ctr 
                               name="KeyMCertificateElementConditionSenderReceiver" 
                               type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container contains the configuration of a dynamic compare value in a sender-/receiver interface."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="VISIBLE" value="false"/>
                          <a:da name="ENABLE" value="false"/>
                          <v:ctr 
                                 name="KeyMCertificateElementConditionSenderReceiver" 
                                 type="INSTANCE">
                            <a:a name="DESC" 
                                 value="EN: This parameter references a mode in a particular mode request port of a software component that is used for the condition."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <v:ref name="TARGET" type="REFERENCE">
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:da name="REF" 
                                    value="ASTyped:AutosarDataPrototype"/>
                            </v:ref>
                            <v:lst name="CONTEXT">
                              <v:ref name="CONTEXT" type="REFERENCE">
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:da name="RANGE" type="IRefCtxt">
                                  <a:tst expr="ROOT-SW-COMPOSITION-PROTOTYPE"/>
                                  <a:tst expr="SW-COMPONENT-PROTOTYPE"/>
                                  <a:tst expr="PORT-PROTOTYPE"/>
                                </a:da>
                              </v:ref>
                            </v:lst>
                          </v:ctr>
                        </v:ctr>
                      </v:ctr>
                    </v:ctr>
                  </v:lst>
                  <v:lst name="KeyMCertificateElementRule" type="MAP">
                    <a:da name="MIN" value="1"/>
                    <v:ctr name="KeyMCertificateElementRule" 
                           type="IDENTIFIABLE">
                      <a:a name="DESC" 
                           value="EN: This container contains the configuration of a mode rule which represents a logical expression with KeyMCertificateElementCondition or other KeyMCertificateElementRule as arguments."/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:da name="INVALID" type="XPath">
                        <a:tst 
                               expr="node:exists(./KeyMLogicalOperator) and count(./KeyMArgumentRef/*) = 1" 
                               true="KeyMLogicalOperator shall not be used when a rule only consists of a single condition."/>
                        <a:tst 
                               expr="not(node:exists(./KeyMLogicalOperator)) and count(./KeyMArgumentRef/*) &gt; 1" 
                               true="KeyMLogicalOperator shall be used when a rule consists of multiple conditions."/>
                      </a:da>
                      <v:var name="KeyMLogicalOperator" type="ENUMERATION">
                        <a:a name="DESC" 
                             value="EN: This parameter specifies the logical operator to be used in the logical expression. If the expression only consists of a single condition this parameter shall not be used."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="RANGE">
                          <a:v>KEYM_AND</a:v>
                          <a:v>KEYM_OR</a:v>
                        </a:da>
                      </v:var>
                      <v:lst name="KeyMArgumentRef">
                        <a:da name="MIN" value="1"/>
                        <v:ref name="KeyMArgumentRef" type="CHOICE-REFERENCE">
                          <a:a name="DESC" 
                               value="EN: This is a choice reference either to a condition or another rule serving as sub-expression."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="REF">
                            <a:v>ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificateElementVerification/KeyMCertificateElementCondition</a:v>
                            <a:v>ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificateElementVerification/KeyMCertificateElementRule</a:v>
                          </a:da>
                        </v:ref>
                      </v:lst>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <v:lst name="KeyMCryptoKey" type="MAP">
                <a:da name="INVALID" type="XPath">
                  <a:tst 
                         expr="(node:value(./../KeyMGeneral/KeyMCertificateManagerEnabled) = &apos;true&apos; or node:value(./../KeyMGeneral/KeyMCryptoKeyManagerEnabled) = &apos;true&apos;) and (count(./*) = 0)" 
                         true="If &apos;KeyMGeneral/KeyMCertificateManagerEnabled&apos; or &apos;KeyMGeneral/KeyMCryptoKeyManagerEnabled&apos; is enabled, at least one crypto key has to be configured."/>
                  <a:tst expr="not(node:isconsecutive(./*/KeyMCryptoKeyId, 0))" 
                         true="KeyMCryptoKeyIds are not consecutive, gapless and zero-based."/>
                </a:da>
                <a:da name="MAX" value="65535"/>
                <v:ctr name="KeyMCryptoKey" type="IDENTIFIABLE">
                  <a:a name="DESC" 
                       value="EN: This container contains the crypto keys that can be updated."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <v:var name="KeyMCryptoCsmVerifyJobType" type="ENUMERATION">
                    <a:a name="DESC" 
                         value="EN: Specifies what type of function for key verification operation is used."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="RANGE">
                      <a:v>KEYM_VERIFY_AEADDECRYPT</a:v>
                      <a:v>KEYM_VERIFY_AEADENCRYPT</a:v>
                      <a:v>KEYM_VERIFY_DECRYPT</a:v>
                      <a:v>KEYM_VERIFY_ENCRYPT</a:v>
                      <a:v>KEYM_VERIFY_MACGENERATE</a:v>
                      <a:v>KEYM_VERIFY_MACVERIFY</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCryptoKeyCryptoProps" type="STRING">
                    <a:a name="DESC" 
                         value="EN: If set, it will provide additional hints to the crypto key that is used by KeyM to identify the key."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                  </v:var>
                  <v:var name="KeyMCryptoKeyGenerationInfo" type="STRING">
                    <a:a name="DESC" 
                         value="EN: This data may contain static data for key derivation. If a key is configured to be derived from another key and this configuration item is set, the data will be added as salt."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                  </v:var>
                  <v:var name="KeyMCryptoKeyGenerationType" type="ENUMERATION">
                    <a:a name="DESC" 
                         value="EN: Specifies how the CryptoKey will be generated. If it is derived from another key or simply stored with KeyElementSet."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="KEYM_STORED_KEY"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:value(.) != &apos;KEYM_STORED_KEY&apos;" 
                          true="Only &apos;KEYM_STORED_KEY&apos; is supported."/>
                    <a:da name="RANGE">
                      <a:v>KEYM_DERIVED_KEY</a:v>
                      <a:v>KEYM_STORED_KEY</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCryptoKeyId" type="INTEGER">
                    <a:a name="DESC" 
                         value="EN: Identifier of the crypto key. The set of configured identifiers shall be consecutive and gapless."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=65535"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCryptoKeyMaxLength" type="INTEGER">
                    <a:a name="DESC" 
                         value="EN: The maximum size in bytes of a CryptoKey."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=4294967295"/>
                      <a:tst expr="&gt;=1"/>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCryptoKeyName" type="STRING">
                    <a:a name="DESC" 
                         value="EN: Provides a unique name of the key for identification. The key master will reference keys by this unique key name."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="not(text:uniq(./../../*/KeyMCryptoKeyName, node:value(.)))" 
                             true="Name is not unique."/>
                      <a:tst 
                             expr="num:i(string-length(node:value(.))) &gt; num:i(node:value(./../../../KeyMGeneral/KeyMKeyCertNameMaxLength))" 
                             true="Name is too long. Limit is configured via &apos;KeyMGeneral/KeyMKeyCertNameMaxLength&apos;."/>
                    </a:da>
                  </v:var>
                  <v:var name="KeyMCryptoKeyStorage" type="ENUMERATION">
                    <a:a name="DESC" 
                         value="EN: Specify the storage location of the certificate."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="node:value(.) != &apos;KEYM_STORAGE_IN_NVM&apos; and node:value(.) != &apos;KEYM_STORAGE_IN_RAM&apos;" 
                          true="Only &apos;KEYM_STORAGE_IN_NVM&apos; and &apos;KEYM_STORAGE_IN_RAM&apos; are supported."/>
                    <a:da name="RANGE">
                      <a:v>KEYM_STORAGE_IN_CSM</a:v>
                      <a:v>KEYM_STORAGE_IN_NVM</a:v>
                      <a:v>KEYM_STORAGE_IN_RAM</a:v>
                    </a:da>
                  </v:var>
                  <v:ref name="KeyMCryptoKeyCsmKeySourceDeriveRef" 
                         type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: Defines a reference to the associated CSM key that is used as source for the key derivation of this key."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="KeyMCryptoKeyCsmKeyTargetRef" type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: Defines a reference to the associated CSM key that shall be generated."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="KeyMCryptoKeyCsmVerifyJobRef" type="REFERENCE">
                    <a:a name="DESC" 
                         value="EN: Defines the crypto job that the key verify function can use for verification of a certain key."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="VISIBLE" value="false"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ctr name="KeyMNvmBlock" type="IDENTIFIABLE">
                    <a:a name="DESC" 
                         value="EN: Configuration of optional usage of Nvm in case the KeyM module requires non volatile memory in the Ecu to store information (e.g. crypto keys or certificates)."/>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:da name="ENABLE" type="XPath" 
                          expr="node:value(./../KeyMCryptoKeyStorage) = &apos;KEYM_STORAGE_IN_NVM&apos;"/>
                    <v:ref name="KeyMNvmBlockDescriptorRef" type="REFERENCE">
                      <a:a name="DESC" 
                           value="EN: Reference to the Nvm block description in the Nvm module configuration."/>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" value="true"/>
                      <a:a name="SCOPE" value="ECU"/>
                      <a:da name="ENABLE" value="true"/>
                      <a:da name="REF" 
                            value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/NvM/NvMBlockDescriptor"/>
                    </v:ref>
                  </v:ctr>
                </v:ctr>
              </v:lst>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/KeyM"/>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the KeyM can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
