<?xml version="1.0" encoding="UTF-8"?>

<?module FrTp?>

<xgen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://www.elektrobit.com/2013/xgen" xmlns:xi="http://www.w3.org/2001/XInclude">

[!CODE!]
[!AUTOSPACING!]
[!INCLUDE "..\include\FrTp_Variables.m"!]
[!INCLUDE "..\include\FrTp_PBcfg.m"!]

  <!-- This is the configuration of module FrTp -->
  <module name="FrTp" version="[!"$moduleSoftwareVer"!]">

    <!-- This is the Precompile-time configuration of the module. -->
    <configuration class="PreCompile">

      <?artifact directory="include" file="FrTp_Types.h" type="types-h" ?>

      [!VAR "relocatable" = "'false'"!]
      [!IF "node:contains(node:refs(as:modconf('PbcfgM')/PbcfgMBswModules/*/PbcfgMBswModuleRef), as:modconf('FrTp')) = 'true'"!]
      [!IF "as:modconf('PbcfgM')/PbcfgMGeneral/PbcfgMRelocatableCfgEnable = 'true'"!]
      [!VAR "relocatable" = "'true'"!]
      [!ENDIF!]
      [!ELSE!]
      [!IF "as:modconf('FrTp')[1]/FrTpGeneral/VendorSpecific/FrTpRelocatablePbcfgEnable = 'true'"!]
      [!VAR "relocatable" = "'true'"!]
      [!ENDIF!]
      [!ENDIF!]

      <parameter name="relocatable-enable">
        <boolean-value>[!"$relocatable"!]</boolean-value>
      </parameter>

      <!-- This is the type definition of the root structure -->
      <type name="FrTp_ConfigType">
      <!-- !LINKSTO FRTP1137,1 -->
        <struct>
          <member name="PlatformSignature" type="uint32" comment="Used to validate the platform"/>
          <member name="LcfgSignature" type="uint32" comment="Used to validate the post build configuration against the link time configuration"/>
          <member name="CfgSignature" type="uint32" comment="Used to validate the post build configuration against the precompile time configuration"/>
          <member name="PublicInfoSignature" type="uint32" comment="Used to validate Public information"/>
          <member name="pConnections" type="FrTp_ConnectionType" comment="reference to connection configuration">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="pTxPdus" type="FrTp_TxPduConfigType" comment="reference to Tx PDU configuration">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="pTxConfLookupTable" type="uint8" comment="reference to TxConfirmation look-up table">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          [!IF "$FrTpLimitNumberOfConnections = 'true'"!]
          <member name="pConnectionLimitConfigs" type="uint8" comment="reference to connection limits">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          [!ENDIF!]
          <member name="nNumTxPdus" type="uint8" comment="number of Tx PDUs"/>
          <member name="nNumConnections" type="uint8" comment="number of connections"/>
          <member name="nNumTxConnections" type="uint8" comment="number of Tx connection"/>
        </struct>
      </type>

      <!-- This is the type definition of the Tx PDU config structure -->
      <type name="FrTp_TxPduConfigType">
        <struct>
          <member name="PduLength" type="PduLengthType" comment="Length of this PDU"/>
          <member name="PduId" type="PduIdType" comment="PDU Id for this N-PDU"/>
        </struct>
      </type>

      <!-- This is the type definition of a FrTp connection -->
      <type name="FrTp_ConnectionType">
        <struct>
          <member name="TpOptions" type="uint32">
            <comment>
              <![CDATA[several boolean options:
              Bit 0: Has Acknowledge (Tx)
              Bit 1: 1-n message (Rx/Tx)

              Note: Type uint32 ensures a proper alignment
              of aConnections to the end of structure
              FrTp_ConfigType]]>
            </comment>
          </member>
          <member name="TxSduIdx" type="uint16">
            <comment><![CDATA[PduId of this connection (tx)]]></comment>
          </member>
          <member name="RxSduIdx" type="uint16">
            <comment><![CDATA[PduId of this connection (rx)]]>
            </comment>
          </member>
          <member name="LocalAddress" type="uint16">
            <comment><![CDATA[Local TP address (rx/tx)]]></comment>
          </member>
          <member name="RemoteAddress" type="uint16">
            <comment><![CDATA[timer AS initialization value (tx)]]></comment>
          </member>
          <member name="TimeroutAS" type="uint16">
            <comment><![CDATA[timer AS initialization value (tx)]]></comment>
          </member>
          <member name="TimeroutAR" type="uint16">
            <comment><![CDATA[timer AR initialization value (rx)]]></comment>
          </member>
          <member name="TimeroutBS" type="uint16">
            <comment><![CDATA[timer BS initialization value (tx)]]></comment>
          </member>
          <member name="TimeroutCR" type="uint16">
            <comment><![CDATA[timer CR initialization value (rx)]]></comment>
          </member>
          <member name="MaxRetry" type="uint16">
            <comment><![CDATA[maximum number of Retry requests (rx)]]></comment>
          </member>
          <member name="MaxWait" type="uint16">
            <comment><![CDATA[maximum number of wait requests (rx)]]></comment>
          </member>
          <member name="TimeBR" type="uint16">
            <comment><![CDATA[timer BR initialization value (rx)]]></comment>
          </member>
          <member name="MaxFrIfRetry" type="uint8">
            <comment><![CDATA[maximum number of retry to FrIf_Transmit in case it returns E_NOT_OK (tx)]]></comment>
          </member>
          <member name="BC" type="uint8">
            <comment><![CDATA[Bandwidth Control parameter]]></comment>
          </member>
          <member name="MaxBufReq" type="uint8">
            <comment><![CDATA[maximum number of retry to PduR_FrTpCopyTxData
              in case it returns BUFREQ_E_BUSY.(tx)]]></comment>
          </member>
          <member name="TxPduStartIdx" type="uint8">
            <comment><![CDATA[note that the tx Pdus must be sorted by SlotId.
              index to first TxPdu of pool within TxPdu array (tx)]]></comment>
          </member>
          <member name="TxPduEndIdx" type="uint8">
            <comment><![CDATA[Index to last Tx-PDU of pool within Tx-PDU array (tx)]]></comment>
          </member>
          <member name="TxPduMaxLength" type="uint8">
            <comment><![CDATA[maximum payload length of any Pdu assigned to this connection (tx)]]></comment>
          </member>
          [!IF "$FrTpLimitNumberOfConnections = 'true'"!]
          <member name="ConnectionLimitConfigIdx" type="[!"$ConnectionLimitConfigIdxType"!]">
            <comment><![CDATA[Index to the corresponding connection limit config in ConnectionLimitConfigs]]></comment>
          </member>
          [!ENDIF!]
        </struct>
      </type>

      [!IF "$FrTpLimitNumberOfConnections = 'true'"!]
      <!-- This is the type definition of the connection limit config structure -->
      <type name="FrTp_ConnectionLimitConfigType">
        <struct>
          <member name="Limit" type="uint8" comment="maximum number of active connections for this FrTpRa"/>
          <member name="BufferSize" type="uint8" comment="Buffer size for this FrTpRa"/>
          <member name="BufferOffset" type="[!"$ConnectionBufferIdxType"!]" comment="Offset of the beginning of this FrTpRa's buffer location"/>
        </struct>
      </type>
      [!ENDIF!]

    </configuration>  <!-- PreCompile -->

    <!-- This is the post-build configuration of the module. -->
    <configuration class="PostBuild">

      <?artifact directory="include" file="FrTp_PBcfg.h" type="postbuild-h" ?>
      <!-- !LINKSTO FRTP1002,1 -->
      <?artifact directory="src" file="FrTp_PBcfg.c" type="postbuild-c" ?>

      <!--
          Type declarations:
          Specifies the content of FrTp_Pbcfg.h and FrTp_Types.h
      -->

      <!-- This is the type definition of the layout type of the
           modules' postbuild configuration structure -->
      <type name="FrTp_ConfigLayoutType">
        <struct>

          <!-- Member of the layout type starting with the RootCfg -->
          <member name="RootCfg" type="FrTp_ConfigType"/>
          <!-- Number of parallel FrTp connections -->
          <member name="aConnections" type="FrTp_ConnectionType" count="[!"num:i($NumberOfConnections)"!]"/>
          [!IF "num:i($NumberOfTxPdus) > 0"!]
          <!-- Tx PDU configuration -->
          <member name="aTxPdus" type="FrTp_TxPduConfigType" count="[!"$NumberOfTxPdus"!]"/>
          <member name="aTxConfLookupTable" type="uint8" count="[!"$NumberOfTxPdus"!]"/>
          [!ENDIF!]
          [!IF "($FrTpLimitNumberOfConnections = 'true')"!]
          <member name="aConnectionLimitConfigs" type="FrTp_ConnectionLimitConfigType" count="[!"$NumberOfConnectionBuffers"!]"/>
          [!ENDIF!]
        </struct>
      </type>

      <type name="FrTp_ConstConfigLayoutType">
        <reference type="FrTp_ConfigLayoutType">
          <compiler-abstraction>
            <const memory-class="FRTP_APPL_CONST" />
          </compiler-abstraction>
        </reference>
      </type>

      <!--
          Type definition and initialisation:
          Specifies the content of FrTp_Pbcfg.c
      -->

      <!-- !LINKSTO FRTP210,1 -->
      <memory-section name="CONFIG_DATA_UNSPECIFIED">
      <instance type="FrTp_ConstConfigLayoutType"
                name="FrTp_ConfigLayout">

        <parameter name="postbuild-configuration-name">
          <symbolic-value>[!"node:name(FrTpMultipleConfig/*[1])"!]</symbolic-value>
        </parameter>

        <!-- FrTp_ConfigType -->
        <field>
          <!-- PlatformSignature -->
          <field>
            <int>[!"asc:getPlatformSignature()"!]</int>
          </field>
          <!-- LcfgSignature -->
          <field>
            <int>[!"asc:getConfigSignature(as:modconf('FrTp')[1]//*[not(child::*) and (node:configclass() = 'Link')])"!]</int>
          </field>
          <!-- CfgSignature -->
          <field>
            <int>[!"asc:getConfigSignature(as:modconf('FrTp')[1]//*[not(child::*) and (node:configclass() = 'PreCompile') ])"!]</int>
          </field>
          <!-- PublicInfoSignature -->
          <field>
            <int>[!"asc:getConfigSignature(node:difference(as:modconf('FrTp')[1]/CommonPublishedInformation//*[not(child::*) and (node:configclass() = 'PublishedInformation') ], as:modconf('FrTp')[1]/CommonPublishedInformation/Release))"!]</int>
          </field>
          <field>
            <ref>
              <struct-field name="aConnections"/>
              <array-field index="0" />
            </ref>
          </field>
          <field>
            <ref>
              [!IF "num:i($NumberOfTxPdus) > 0"!]
              <struct-field name="aTxPdus"/>
              <array-field index="0" />
              [!ENDIF!]
            </ref>
          </field>
          <field>
            <ref>
              [!IF "num:i($NumberOfTxPdus) > 0"!]
              <struct-field name="aTxConfLookupTable"/>
              <array-field index="0" />
              [!ENDIF!]
            </ref>
          </field>
          [!IF "$FrTpLimitNumberOfConnections = 'true'"!]
          <field>
            <ref>
              <struct-field name="aConnectionLimitConfigs"/>
              <array-field index="0" />
            </ref>
          </field>
          [!ENDIF!]
          <!-- NumberOfTxPdus -->
          <field>
            <int>[!"$NumberOfTxPdus"!]</int>
          </field>
          <!-- NumberOfConnections -->
          <field>
            <int>[!"$NumberOfConnections"!]</int>
          </field>
          <!-- NumberOfTxConnections -->
          <field>
            <int>[!"$NumberOfTxConnections"!]</int>
          </field>
        </field> <!-- FrTp_ConfigType -->

        <!-- aConnections -->
        <field>
[!MACRO "ConnectionProperties"!]
          <field>
            <comment><![CDATA[[!"node:name(.)"!]]]></comment>
            <!-- TpOptions -->
            [!VAR "TpOptions" = "0"!]
            [!IF "node:ref(FrTpConCtrlRef)/FrTpAckType = 'FRTP_ACK_WITH_RT'"!]
              [!VAR "TpOptions" = "bit:or($TpOptions,1)"!]
            [!ENDIF!]
            [!IF "FrTpMultipleReceiverCon = 'true'"!]
              [!VAR "TpOptions" = "bit:or($TpOptions,2)"!]
            [!ENDIF!]
            [!IF "FrTpBandwidthLimitation = 'true'"!]
              [!VAR "TpOptions" = "bit:or($TpOptions,4)"!]
            [!ENDIF!]
            <field>
              <int>[!"num:i($TpOptions)"!]</int>
            </field>
            <!-- TxSduIdx -->
            <field>
              [!IF "node:exists(FrTpTxSdu)"!]
              <int>[!"as:modconf('PduR')[1]/PduRRoutingTables/*[1]/PduRRoutingTable/*/PduRRoutingPath/*/PduRDestPdu/*[PduRDestPduRef = node:current()/FrTpTxSdu/FrTpTxSduRef][1]/PduRDestPduHandleId"!]</int>
              [!ELSE!]
              <int>65535</int>
              [!ENDIF!]
            </field>
            <!-- RxSduIdx -->
            <field>
              [!IF "node:exists(FrTpRxSdu)"!]
              <int>[!"as:modconf('PduR')[1]/PduRRoutingTables/*[1]/PduRRoutingTable/*/PduRRoutingPath/*/PduRSrcPdu[PduRSrcPduRef = node:current()/FrTpRxSdu/FrTpRxSduRef]/PduRSourcePduHandleId"!]</int>
              [!ELSE!]
              <int>65535</int>
              [!ENDIF!]
            </field>
            <!-- LocalAddress -->
            <field>
              <int>[!"FrTpLa"!]</int>
            </field>
            <!-- RemoteAddress -->
            <field>
              <int>[!"FrTpRa"!]</int>
            </field>
            <!-- TimeroutAS -->
            <field>
              <int>[!CALL "TimeoutToTicks", "Time"="node:ref(FrTpConCtrlRef)/FrTpTimeoutAs"!]</int>
            </field>
            <!-- TimeroutAR -->
            <field>
              <int>[!CALL "TimeoutToTicks", "Time"="node:ref(FrTpConCtrlRef)/FrTpTimeoutAr"!]</int>
            </field>
            <!-- TimeroutBS -->
            <field>
              <int>[!CALL "TimeoutToTicks", "Time"="node:ref(FrTpConCtrlRef)/FrTpTimeoutBs"!]</int>
            </field>
            <!-- TimeroutCR -->
            <field>
              <int>[!CALL "TimeoutToTicks", "Time"="node:ref(FrTpConCtrlRef)/FrTpTimeoutCr"!]</int>
            </field>
            <!-- MaxRetry -->
            <field>
              <int>[!"node:ref(FrTpConCtrlRef)/FrTpMaxRn"!]</int>
            </field>
            <!-- MaxWait -->
            <field>
              <int>[!"node:ref(FrTpConCtrlRef)/FrTpMaxFCWait"!]</int>
            </field>
            <!-- TimeBR -->
            <field>
              <int>[!CALL "TimeoutToTicks", "Time"="node:ref(FrTpConCtrlRef)/FrTpTimeBr"!]</int>
            </field>
            <!-- MaxFrIfRetry -->
            <field>
              <int>[!"node:ref(FrTpConCtrlRef)/FrTpMaxFrIf"!]</int>
            </field>
            <!-- BC -->
            <field>
              <int>[!"num:i(((node:ref(FrTpConCtrlRef)/FrTpMaxNbrOfNPduPerCycle)*8)+(node:ref(FrTpConCtrlRef)/FrTpSCexp))"!]</int>
            </field>
            <!-- MaxBufReq -->
            <field>
              <int>[!"node:ref(FrTpConCtrlRef)/FrTpMaxBufReq"!]</int>
            </field>
            [!IF "(node:exists(FrTpTxPduPoolRef)) and (node:refvalid(FrTpTxPduPoolRef))"!]
            <!-- TxPduStartIdx -->
            <field>
              <int>[!CALL "OutputFromMap", "Map"="$MapTxPduPoolToStartIdx", "Key"="node:path(node:ref(FrTpTxPduPoolRef))"!]</int>
            </field>
            <!-- TxPduEndIdx -->
            <field>
              <int>[!CALL "OutputFromMap", "Map"="$MapTxPduPoolToEndIdx", "Key"="node:path(node:ref(FrTpTxPduPoolRef))"!]</int>
            </field>
            <!-- TxPduMaxLength -->
            <field>
              <int>[!"num:i(num:max(node:refs(node:ref(FrTpTxPduPoolRef)/FrTpTxPdu/*/FrTpTxPduRef)/PduLength))"!]</int>
            </field>
            [!ELSE!]
            <!-- TxPduStartIdx -->
            <field>
              <int>0</int>
              </field>
            <!-- TxPduEndIdx -->
            <field>
              <int>0</int>
              </field>
            <!-- TxPduMaxLength -->
            <field>
              <int>0</int>
            </field>
            [!ENDIF!]
            [!IF "$FrTpLimitNumberOfConnections = 'true'"!]
            <!-- ConnectionLimitConfigIdx -->
            <field>
              <int>[!//
              [!IF "node:exists(as:modconf('FrTp')[1]/FrTpGeneral/VendorSpecific/FrTpConnectionLimitConfig/*[./FrTpRa = node:current()/FrTpRa])"!][!/*
                */!][!"num:i(count(as:modconf('FrTp')[1]/FrTpGeneral/VendorSpecific/FrTpConnectionLimitConfig/*[./FrTpRa = node:current()/FrTpRa]/preceding-sibling::*))"!][!//
              [!ELSE!][!/*
                */!][!"$NumberOfConnectionLimits"!][!//
              [!ENDIF!][!/*
              */!]</int>
            </field>
            [!ENDIF!]
          </field>
[!ENDMACRO!]
          [!// Loop over all connections containing FrTpTxSdus
          [!LOOP "node:order(FrTpMultipleConfig/*[1]/FrTpConnection/*/FrTpTxSdu/..,'FrTpTxSdu/FrTpTxSduId')"!]
          [!CALL "ConnectionProperties"!]
          [!ENDLOOP!]
          [!// Loop over the remaining connections
          [!LOOP "node:difference(FrTpMultipleConfig/*[1]/FrTpConnection/*,FrTpMultipleConfig/*[1]/FrTpConnection/*/FrTpTxSdu/..)"!]
          [!CALL "ConnectionProperties"!]
          [!ENDLOOP!]
        </field> <!-- aConnections[] -->

        [!IF "num:i($NumberOfTxPdus) > 0"!]
        <!-- aTxPdus -->
        <field>
          <comment><![CDATA[aTxPdus]]></comment>
          [!FOR "i" = "1" TO "count(FrTpMultipleConfig/*[1]/FrTpTxPduPool/*/FrTpTxPdu/*)"!]
            [!VAR "FrTpTxPduPath" = "text:split($SortedTxPduList, ',')[position() = $i]"!]
            [!VAR "EcuCPduPath" = "node:path(node:ref(node:ref($FrTpTxPduPath)/FrTpTxPduRef))"!]
            <field>
              <comment><![CDATA[[!"node:name($FrTpTxPduPath)"!]]]></comment>
              <field>
                <int>[!"node:ref($EcuCPduPath)/PduLength"!]</int>
              </field>
              <field>
                <int>[!"as:modconf('FrIf')[1]/FrIfConfig/*[1]/FrIfPdu/*/FrIfPduDirection/FrIfTxPduId[node:path(node:ref(../FrIfTxPduRef))=$EcuCPduPath]"!]</int>
              </field>
            </field>
          [!ENDFOR!]
        </field> <!-- aTxPdus -->

        <!-- aTxConfLookupTable -->
        <field>
          <comment><![CDATA[aTxConfLookupTable]]></comment>
          [!LOOP "node:order(FrTpMultipleConfig/*[1]/FrTpTxPduPool/*/FrTpTxPdu/*,'FrTpTxConfirmationPduId')"!]
            [!VAR "FrTpTxPduPath" = "node:path(.)"!]
            [!FOR "i" = "1" TO "count(as:modconf('FrTp')[1]/FrTpMultipleConfig/*[1]/FrTpTxPduPool/*/FrTpTxPdu/*)"!]
              [!IF "text:split($SortedTxPduList, ',')[position() = $i] = $FrTpTxPduPath"!]
          <field>
            <int>[!"num:i($i - 1)"!]</int>
          </field>
                [!BREAK!]
              [!ENDIF!]
            [!ENDFOR!]
          [!ENDLOOP!]
        </field> <!-- aTxConfLookupTable -->
        [!ENDIF!]

        [!IF "$FrTpLimitNumberOfConnections = 'true'"!]
        <!-- aConnectionLimitConfigs -->
        <field>
          <comment><![CDATA[aConnectionLimitConfigs]]></comment>
          [!VAR "ConnectionBufferOffset" = "num:i(0)"!]
          [!IF "$NumberOfConnectionLimits > 0"!]
          [!LOOP "FrTpGeneral/VendorSpecific/FrTpConnectionLimitConfig/*"!]
          <field>
            <comment><![CDATA[[!"node:name(.)"!]]]></comment>
            <field>
              <int>[!"FrTpConnectionLimit"!]</int>
            </field>
            <field>
              <int>[!"num:i(FrTpConnectionBufferSize + 1)"!]</int>
            </field>
            <field>
              <int>
              [!IF "FrTpConnectionBufferSize = num:i(0)"!]
                0
              [!ELSE!]
                [!"$ConnectionBufferOffset"!]
                [!VAR "ConnectionBufferOffset" = "num:i($ConnectionBufferOffset + 1 + FrTpConnectionBufferSize)"!]
              [!ENDIF!]
              </int>
            </field>
          </field>
          [!ENDLOOP!]
          [!ENDIF!]
          <field>
            <comment><![CDATA[Connection limit config for unlimited connections]]></comment>
            <field>
              <int>0</int>
            </field>
            <field>
              <int>[!"num:i(FrTpGeneral/VendorSpecific/FrTpConnectionBufferSizeUnlimited + 1)"!]</int>
            </field>
            <field>
              <int>
              [!IF "FrTpGeneral/VendorSpecific/FrTpConnectionBufferSizeUnlimited = num:i(0)"!]
                0
              [!ELSE!]
                [!"$ConnectionBufferOffset"!]
              [!ENDIF!]
              </int>
            </field>
          </field>
        </field> <!-- aConnectionLimitConfigs -->
        [!ENDIF!]

      </instance> <!-- FrTp_ConfigLayoutType -->
      </memory-section>

    </configuration>
  </module>

  <!-- include the AUTOSAR standard data types, etc. -->
  <!-- The xpointer attribute should rather be something like "xpointer(//module[name='...'])",
       but unfortunately our XML parser does not support the XPointer xpointer() Scheme.
       This is also the reason why all these xincludes must be at the end of the file rather
       than at the beginning, because that way the other xgen files that include this one can
       be sure that "element(/1/1)" is the FrTp module element.
  -->
  <xi:include href="Base.xgen" xpointer="element(/1/1)"/>

</xgen>

[!ENDCODE!]
