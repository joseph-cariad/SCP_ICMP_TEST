<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM1I0R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="Tls" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.2.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                      <ad:DATE>2011-11-09T11:36:22Z</ad:DATE>
                    </ad:DOC-REVISION>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>1.0.8</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>Elektrobit Automotive GmbH</ad:ISSUED-BY>
                      <ad:DATE>2021-07-14T23:59:59Z</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC" value="Configuration of the Tls module."/>
              <a:a name="RELEASE" value="asc:4.0"/>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="3"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="8"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="789"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the Tls can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
              <v:ctr name="TlsDefensiveProgramming" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                &lt;p&gt;Parameters for defensive programming&lt;/p&gt;
                &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Defensive Programming Options"/>
                <v:var name="TlsDefProgEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                    &lt;p&gt;Enables or disables the defensive
                    programming feature for the module Tls.&lt;/p&gt;
                    &lt;p&gt;Note: This feature is dependent on the use of the development error detection module.
                    To use the defensive programming feature, proceed as follows:
                    &lt;ol&gt;
                    &lt;li&gt;Enable development error detection&lt;/li&gt;
                    &lt;li&gt;Enable defensive programming&lt;/li&gt;
                    &lt;li&gt;Enable assertions as required&lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Defensive Programming"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../TlsGeneral/TlsDevErrorDetect = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="TlsPrecondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of precondition assertion checks reported from
                  the module Tls.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;TlsDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;TlsDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Precondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../TlsGeneral/TlsDevErrorDetect = &apos;true&apos;) and (../TlsDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="TlsPostcondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of postcondition assertion checks reported from
                  the module Tls.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;TlsDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;TlsDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Postcondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../TlsGeneral/TlsDevErrorDetect = &apos;true&apos;) and (../TlsDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="TlsStaticAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of static assertion checks reported from
                  the module Tls.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;TlsDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;TlsDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Static Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../TlsGeneral/TlsDevErrorDetect = &apos;true&apos;) and (../TlsDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="TlsUnreachAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of unreachable code assertion checks
                  reported from the module Tls.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;TlsDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;TlsDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Unreachable Code Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../TlsGeneral/TlsDevErrorDetect = &apos;true&apos;) and (../TlsDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="TlsInvariantAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of invariant assertion checks
                  reported from functions of the module Tls.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;TlsDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;TlsDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Invariant Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../TlsGeneral/TlsDevErrorDetect = &apos;true&apos;) and (../TlsDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
              </v:ctr>
              <v:ctr name="TlsGeneral" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;
                        Container for incorporation of TlsGeneral.
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="TlsGeneral"/>
                <v:var name="TlsDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Switches the development error detection and notification on or off.
                          TRUE = detection and notification is enabled. FALSE = detection and
                          notification is disabled.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="TlsDevErrorDetect"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="False"/>
                </v:var>
                <v:var name="TlsCsmProcessing" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Configures if the asynchronous or synchronous Csm interface is used. All jobs must be either synchronous or asynchronous.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="TlsCsmProcessing"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="TLS_CSM_ASYNCHRONOUS"/>
                  <a:da name="RANGE">
                    <a:v>TLS_CSM_ASYNCHRONOUS</a:v>
                    <a:v>TLS_CSM_SYNCHRONOUS</a:v>
                  </a:da>
                </v:var>
                <v:var name="TlsEnableJobBasedKeyExchange" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          TODO
                          NOTE: Currently function is declared by Tls
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="TlsEnableJobBasedKeyExchange"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="False"/>
                </v:var>
                <v:var name="TlsCsmKeyDeriveSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Specifies if the key derivation using Csm is supported:
                            - TRUE: The key derivation is done externally through the Csm module.
                            - FALSE: The key derivation is done in Tls.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="TlsMainFunctionPeriod" type="FLOAT">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Specifies the period of main function Tls_MainFunction in seconds.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="TlsMainFunctionPeriod"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="0.01"/>
                  <a:da name="ENABLE" value="True"/>
                  <a:da name="INVALID" type="Range" expr="&gt;0"/>
                </v:var>
                <v:var name="TlsEnableCertificates" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Specifies whether cipher suites using certificates are supported (True)
                          or not (False).
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="TlsEnableCertificates"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="False"/>
                  <a:da name="WARNING" type="XPath" 
                        expr="(. = &apos;true&apos;) and not(lic:feature(&apos;EB_OEM1_EXTENSION&apos;))" 
                        true="Certificate feature extension is not supported by your license"/>
                </v:var>
              </v:ctr>
              <v:ctr name="TlsExtensionsDetectionConfig" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Specifies the ExtensionDetection callout function
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                     type="IMPLEMENTATIONCONFIGCLASS">
                  <icc:v mclass="PostBuild">VariantPostBuild</icc:v>
                </a:a>
                <a:a name="OPTIONAL" value="true"/>
                <a:da name="ENABLE" value="false"/>
                <v:var name="TlsExtensionsDetectionHeaderFileName" 
                       type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            This parameter specifies the name of the
                            header file containing the definition of the
                            ExtensionsDetection callout function.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="Link">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst 
                           expr="text:match(., &apos;^.+\.h$&apos;) and not(text:match(., &apos; &apos;))" 
                           false="TlsExtensionsDetectionHeaderFileName must be a valid header file name without spaces and end with &apos;.h&apos;."/>
                    <a:tst expr="text:match(., &apos;.*:.*&apos;)" 
                           true="TlsExtensionsDetectionHeaderFileName may not contain a &apos;:&apos; character."/>
                  </a:da>
                </v:var>
                <v:var name="TlsExtensionsDetectionCalloutName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            This parameter defines the name of the ExtensionDetection callout function.
                            This function is used to report each extensions to the TLS protocol received.
                          &lt;/p&gt;
                          &lt;p&gt;
                           Syntax: void Up_TlsExtensionDetection
                                           (
                                            P2CONST(TcpIp_SockAddrType, AUTOMATIC, TCPIP_APPL_DATA) remoteSockAddPtr,
                                            uint16 extensionType,
                                           )
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="Link">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="ECU"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="TlsExtensionsDetectionCalloutName must be a valid C function name."/>
                </v:var>
              </v:ctr>
              <v:lst name="TlsConnection" type="MAP">
                <a:a name="COLUMNS" value="TlsConnectionId"/>
                <a:a name="LABEL" value="TlsConnection"/>
                <a:a name="TAB" value="TlsConnections"/>
                <a:da name="MAX" value="32"/>
                <a:da name="MIN" value="0"/>
                <v:ctr name="TlsConnection" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Container for incorporation of TlsConnection.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="TlsConnection"/>
                  <a:a name="TAB" value="TlsConnections"/>
                  <v:var name="TlsConnectionId" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Identifier of the Tls connection.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="TlsConnectionId"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&gt;=0"/>
                        <mt:tst expr="&lt;=4294967295"/>
                      </mt:range>
                      <mt:xpath 
                                false="Connection Id is not zero-based and consecutive" 
                                expr="node:isconsecutive(../../*/TlsConnectionId, 0)"/>
                    </a:da>
                  </v:var>
                  <v:var name="TlsTransmitBufferSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The size in bytes of the transmit buffer. It contains all data to be transmitted including TLS header overhead.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="1024"/>
                  </v:var>
                  <v:var name="TlsClientIdentity" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The TLS client identity that is sent during handshake.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="text:match(../TlsCipherSuite, &apos;^TLS_PSK_.*$&apos;) and (../TlsEndpoint = &apos;TLS_CLIENT&apos;)"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath true="Reference must be empty." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_PSK_.*$&apos;)) and not(node:empty(.))"/>
                    </a:da>
                  </v:var>
                  <v:var name="TlsServerIdentityHint" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The TLS server identity hint that is sent during handshake.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="Server_identity"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="text:match(../TlsCipherSuite, &apos;^TLS_PSK_.*$&apos;) and (../TlsEndpoint = &apos;TLS_SERVER&apos;)"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath true="Reference must be empty." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_PSK_.*$&apos;)) and not(node:empty(.))"/>
                    </a:da>
                  </v:var>
                  <v:var name="TlsReceiveBufferSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The size in bytes of the receive buffer. It contains all (encrypted) data that is received and the TLS record overhead(Header, MAC, IV).
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="1024"/>
                  </v:var>
                  <v:var name="TlsMaxRecordSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The maximum size of TLS records to be sent or received. Outgoing application data will be fragmented to fit this size.
                            Incoming records that are bigger will be dropped. This parameter controls the size of the decryption buffer, and will
                            be sent as the recordSizeLimit threshold if the corresponding extension is enabled.
                            Also, this size should not be bigger than the TcpIp send buffers as a record must fit into one buffer.
                            The size must be in the range 64 to 16384 bytes.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="1024"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&gt;=64"/>
                      <a:tst expr="&lt;=16384"/>
                    </a:da>
                  </v:var>
                  <v:var name="TcpIpTlsUseSecurityExtensionRecordSizeLimit" 
                         type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            TRUE Enables the RecordSizeLimit extension. The size is determined by the value configured in TlsMaxRecordSize.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="False"/>
                  </v:var>
                  <v:var name="TlsCipherSuite" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The cipher suite to negotiate for this connection.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="TLS_PSK_WITH_NULL_SHA256"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst 
                                true="Cipher suite requires TlsEnableCertificates to be True." 
                                expr="not(text:match(., &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;)) and (../../../TlsGeneral/TlsEnableCertificates = &apos;false&apos;)"/>
                        <mt:tst 
                                true="The key derivation by Csm is not supported for this algorithm. Disable the parameter TlsCsmKeyDeriveSupport or select another ciphersuite." 
                                expr="( (../../../TlsGeneral/TlsCsmKeyDeriveSupport = &apos;True&apos;) and not((. = &apos;TLS_PSK_WITH_NULL_SHA256&apos;) or (. = &apos;TLS_PSK_WITH_AES_128_GCM_SHA256&apos;)) )"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="RANGE">
                      <a:v>TLS_PSK_WITH_NULL_SHA256</a:v>
                      <a:v>TLS_PSK_WITH_AES_128_GCM_SHA256</a:v>
                      <a:v>TLS_ECDHE_ECDSA_WITH_NULL_SHA</a:v>
                      <a:v>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="TlsEndpoint" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Defines whether Tls acts as a client (TLS_CLIENT) or as a server
                            (TLS_SERVER) in this connection.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="TLS_CLIENT"/>
                    <a:da name="RANGE">
                      <a:v>TLS_CLIENT</a:v>
                      <a:v>TLS_SERVER</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="TlsDtls" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            TRUE Enables DTLS over UDP sockets.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="False"/>
                  </v:var>
                  <v:ref name="CsmPreMasterSecretKeyRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the TLS pre-master-secret Csm key. Can not be shared with other TLS connections.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmPreMasterSecretKeyRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="CsmMasterSecretKeyRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the TLS master-secret Csm key. Can not be shared with other TLS connections. Size must be 48 bytes.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmMasterSecretKeyRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../../../TlsGeneral/TlsCsmKeyDeriveSupport = &apos;false&apos;)"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="CsmMACGenerateKeyRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm key used for TLS record MAC generation. Can not be shared with other TLS connections.
                            Size must match the size defined by the cipher suite.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmMACGenerateKeyRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="CsmMACVerifyKeyRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm key used for TLS record MAC verification. Can not be shared with other TLS connections.
                            Size must match the size defined by the cipher suite.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmMACVerifyKeyRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="CsmEncryptKeyRef" type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm key used for TLS AEAD encryption. Can not be shared with other TLS connections.
                            Size must match the size defined by the cipher suite.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmEncryptKeyRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="CsmDecryptKeyRef" type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm key used for TLS AEAD decryption. Can not be shared with other TLS connections.
                            Size must match the size defined by the cipher suite.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmDecryptKeyRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="CsmPRFPreMasterSecretJobRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm job used for TLS PRF with pre-master-secret key as input. Can not be shared with other TLS connections.
                            Job primitive must be MacGenerate with HMAC-SHA256.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmPRFPreMasterSecretJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="(../../../TlsGeneral/TlsCsmKeyDeriveSupport = &apos;false&apos;)"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="CsmPRFMasterSecretJobRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm job used for TLS PRF with master-secret key as input. Can not be shared with other TLS connections.
                            Job primitive must be MacGenerate with HMAC-SHA256.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmPRFMasterSecretJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="CsmMACGenerateJobRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm job used for TLS MAC generation with CsmMACGenerateKeyRef as input. Can not be shared with other TLS connections.
                            Job primitive must be MacGenerate with an algorithm that is defined by the cipher suite.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmMACGenerateJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="CsmMACVerifyJobRef" 
                         type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm job used for TLS MAC verification with CsmMACVerifyKeyRef as input. Can not be shared with other TLS connections.
                            Job primitive must be MacVerify with an algorithm that is defined by the cipher suite.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmMACVerifyJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*WITH_((AES_\d+_GCM)|(NULL_NULL)).*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="CsmHashJobRef" type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm job used for hashing during handshake.
                            Hash algorithm must be SHA2-256.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmHashJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="CsmRandomJobRef" type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm random job used for generation of client_random, server_random and DTLS cookie. It must be seeded by the user.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmRandomJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="CsmEncryptJobRef" type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm job used for TLS AEAD encryption with CsmEncryptKeyRef as input.
                            Job primitive must be configured according to the cipher suite. E.g. CsmAEADEncryptAlgorithmFamily = CRYPTO_ALGOFAM_AES,
                            CsmAEADEncryptAlgorithmKeyLength = 16, CsmAEADEncryptAlgorithmMode = CRYPTO_ALGOMODE_GCM for TLS_PSK_WITH_AES_128_GCM_SHA256.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmEncryptJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="CsmDecryptJobRef" type="SYMBOLIC-NAME-REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the Csm job used for TLS AEAD decryption with CsmDecryptKeyRef as input.
                            Job primitive must be configured according to the cipher suite. E.g. CsmAEADEncryptAlgorithmFamiliy = CRYPTO_ALGOFAM_AES,
                            CsmAEADEncryptAlgorithmKeyLength = 16, CsmAEADEncryptAlgorithmMode = CRYPTO_ALGOMODE_GCM for TLS_PSK_WITH_AES_128_GCM_SHA256.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CsmDecryptJobRef"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_.*_WITH_NULL_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:ref name="TlsKeyMLocalCertRef" type="REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the local end-entity certificate.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificate"/>
                  </v:ref>
                  <v:var name="TlsKeyMLocalCertChainLength" type="INTEGER">
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Value must not be zero." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;)) and (. = 0)"/>
                        <mt:tst true="Value must be zero." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;) and (. != 0)"/>
                      </mt:xpath>
                    </a:da>
                  </v:var>
                  <v:ref name="TlsCsmLocalCertSigGenerateJobRef" 
                         type="REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the job that generates signatures using the private key of
                            the local end-entity certificate.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmJobs/CsmJob"/>
                  </v:ref>
                  <v:var name="TlsLocalCaDistinguishedName" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The distinguished name of the local certificate authority as an id-at-commonName uTF8String.
                            It will be used to generate the CertificateRequest sent by the server.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;)) and (../TlsEndpoint = &apos;TLS_SERVER&apos;)"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:length>
                        <mt:tst expr="&gt;=1"/>
                        <mt:tst expr="&lt;=116"/>
                      </mt:length>
                    </a:da>
                  </v:var>
                  <v:ref name="TlsKeyMRemoteCertRef" type="REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;Reference to the remote end-entity certificate.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;))"/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/KeyM/KeyMCertificate"/>
                  </v:ref>
                  <v:var name="TlsKeyMRemoteCertChainLength" type="INTEGER">
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;))"/>
                    <a:da name="ENABLE" value="false"/>
                  </v:var>
                  <v:ref name="TlsCsmKeyExchangeEphemeralGenerateKeyRef" 
                         type="REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the key that holds the local ephemeral private key used
                            for the key exchange. This key is used for the generation of the local
                            private key using Csm_KeyGenerate().
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                  <v:ref name="TlsCsmKeyExchangeEphemeralExchangeKeyRef" 
                         type="REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Reference to the key that holds the local ephemeral private key used
                            for the key exchange. This key is used for the calculation of the
                            local public key using Csm_KeyExchangeCalcPubVal() and the shared secret
                            using Csm_KeyExchangeCalcSecret(). It can reference the same key as
                            TlsCsmKeyExchangeEphemeralGenerateKeyRef.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="EDITABLE" type="XPath" 
                          expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;))"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:xpath>
                        <mt:tst true="Reference must be valid." 
                                expr="not(text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;)) and not(node:refvalid(.))"/>
                        <mt:tst true="Reference must be empty." 
                                expr="text:match(../TlsCipherSuite, &apos;^TLS_((NULL)|(PSK)|((EC)?DH_anon))_.*$&apos;) and not(node:empty(.))"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Csm/CsmKeys/CsmKey"/>
                  </v:ref>
                </v:ctr>
              </v:lst>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
