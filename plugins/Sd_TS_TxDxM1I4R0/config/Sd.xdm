<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM1I4R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="Sd" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC" 
                   value="EN: Configuration of the Service Discovery module."/>
              <a:a name="LOWER-MULTIPLICITY" value="1"/>
              <a:a name="POSTBUILDVARIANTSUPPORT" value="true"/>
              <a:a name="RELEASE" value="asc:4.2.1"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="2"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="9"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="171"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the Sd can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
              </v:ctr>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                     type="IMPLEMENTATIONCONFIGCLASS">
                  <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                </a:a>
                <a:a name="LABEL" value="Config Variant"/>
                <a:da name="DEFAULT" value="VariantPostBuild"/>
                <a:da name="RANGE" value="VariantPostBuild"/>
                <a:da name="WARNING" type="XPath" 
                      expr="node:value(.) = &apos;VariantPostBuild&apos;" 
                      false="This implementation only supports VariantPostBuild."/>
              </v:var>
              <v:lst name="SdConfig" type="MULTIPLE-CONFIGURATION-CONTAINER">
                <a:da name="MIN" value="1"/>
                <v:ctr name="SdConfig" type="MULTIPLE-CONFIGURATION-CONTAINER">
                  <a:a name="DESC" 
                       value="EN: This container contains the configuration parameters and sub containers of the AUTOSAR Service Discovery module."/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst 
                           expr="node:isconsecutive(SdInstance/*/SdClientService/*/SdClientServiceHandleId,0)" 
                           false="SdClientServiceHandleId shall be 0-based and consecutive."/>
                    <a:tst 
                           expr="node:isconsecutive(SdInstance/*/SdClientService/*/SdConsumedEventGroup/*/SdConsumedEventGroupHandleId,0)" 
                           false="SdConsumedEventGroupHandleId shall be 0-based and consecutive."/>
                    <a:tst 
                           expr="node:isconsecutive(SdInstance/*/SdServerService/*/SdServerServiceHandleId,0)" 
                           false="SdServerServiceHandleId shall be 0-based and consecutive."/>
                    <a:tst 
                           expr="node:isconsecutive(SdInstance/*/SdServerService/*/SdEventHandler/*/SdEventHandlerHandleId,0)" 
                           false="SdEventHandlerHandleId shall be 0-based and consecutive."/>
                  </a:da>
                  <v:lst name="SdInstance" type="MAP">
                    <v:ctr name="SdInstance" type="IDENTIFIABLE">
                      <a:a name="DESC" 
                           value="EN: This container represents an instance of the SD; i.e. the SD configuration for a certain link."/>
                      <v:var name="SdInstanceHostname" type="STRING">
                        <a:a name="DESC" 
                             value="EN: Configuration parameter to specify the Hostname."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="ENABLE" value="false"/>
                      </v:var>
                      <v:var name="SdMaximumRemoteNodes" type="INTEGER">
                        <a:a name="DESC" 
                             value="EN: Maximum number of remote nodes supported by this SdInstance."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=65533"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="SdSubscribeEventgroupRetryMax" 
                             type="INTEGER">
                        <a:a name="DESC" 
                             value="EN: Maximum count of retry a subscription, if a subscription to an event group is not acknowledged by SubscribeEventGroupAck or SubscribeEventGroupNack. 0x0=no retry, 0xFF=retry forever (as long as the event group is requested)."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="EDITABLE" type="XPath" 
                              expr="(node:value(../../../../../SdGeneral/SdSubscribeEventgroupRetryEnable) = &apos;true&apos;) and (node:exists(./../SdSubscribeEventgroupRetryDelay))" 
                              true="true" false="false"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=255"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                          <mt:xpath 
                                    true="If SdSubscribeEventgroupRetryMax has a value different to 0 then SdSubscribeEventgroupRetryDelay should be enabled." 
                                    expr="(node:value(.) &gt; &apos;0&apos;) and (node:value(../../../../../SdGeneral/SdSubscribeEventgroupRetryEnable) = &apos;true&apos;) and not(node:exists(./../SdSubscribeEventgroupRetryDelay))"/>
                        </a:da>
                      </v:var>
                      <v:var name="SdSubscribeEventgroupRetryDelay" 
                             type="FLOAT">
                        <a:a name="DESC" 
                             value="EN: Time in seconds when a subscription to an event group shall be retriggered, if no SubscribeEventGroupAck or SubscribeEventGroupNack was received."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="DEFAULT" value="0.01"/>
                        <a:da name="EDITABLE" type="XPath" 
                              expr="(node:value(../../../../../SdGeneral/SdSubscribeEventgroupRetryEnable) = &apos;true&apos;)" 
                              true="true" false="false"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=50"/>
                          <a:tst expr="&gt;=0.001"/>
                        </a:da>
                      </v:var>
                      <v:lst name="SdClientService" type="MAP">
                        <v:ctr name="SdClientService" type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container specifies all parameters used by Client services."/>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <v:var name="SdClientServiceAutoRequire" 
                                 type="BOOLEAN">
                            <a:a name="DESC" 
                                 value="EN: If existing and set to true, this Service will be set to &quot;required&quot; on start."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="false"/>
                          </v:var>
                          <v:var name="SdClientServiceHandleId" type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: The HandleId by which the BswM can identify this Client Service Instance."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65535"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientServiceId" type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Id to identify the service. This is unique for the service interface."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65534"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientServiceInstanceId" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Configuration parameter to specify Instance Id of the service as used in SD entries."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65534"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientServiceMajorVersion" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Major version number of the Service as used in the SD entries."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="1"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=254"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientServiceMinorVersion" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Minor version number of the Service as used in the SD Service Entries."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="4294967295"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=4294967295"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdVersionDrivenFindBehavior" 
                                 type="ENUMERATION">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                &lt;p&gt;Defines the possible acceptance kinds for required service instances.&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;&lt;code&gt;EXACT_OR_ANY_MINOR_VERSION&lt;/code&gt;: Search for ANY or specific minor version service instance and select either ALL returned service instances (in case of ANY) or exactly the specific minor version service instances defined in SdClientServiceMinorVersion.&lt;/li&gt;
                                  &lt;li&gt;&lt;code&gt;MINIMUM_MINOR_VERSION&lt;/code&gt;: Search for ANY minor version service instance and select only those service instances which have an equal or greater minor version than given in SdClientServiceMinorVersion.&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" 
                                 value="Elektrobit Automotive GmbH"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" 
                                  value="EXACT_OR_ANY_MINOR_VERSION"/>
                            <a:da name="RANGE">
                              <a:v>EXACT_OR_ANY_MINOR_VERSION</a:v>
                              <a:v>MINIMUM_MINOR_VERSION</a:v>
                            </a:da>
                            <a:da name="WARNING" type="XPath">
                              <a:tst 
                                     expr="(. = &apos;MINIMUM_MINOR_VERSION&apos;) and (../SdClientServiceMinorVersion = 4294967295)" 
                                     true="If SdVersionDrivenFindBehavior is set to MINIMUM_MINOR_VERSION then Minor Version should not have the maximum value 4294967295."/>
                              <a:tst 
                                     expr="(. = &apos;MINIMUM_MINOR_VERSION&apos;) and not(lic:feature(&apos;EB_OEM1_EXTENSION&apos;))" 
                                     true="Version driven find behavior extension is not supported by your license"/>
                            </a:da>
                          </v:var>
                          <v:ref name="SdClientServiceTcpRef" type="REFERENCE">
                            <a:a name="DESC" 
                                 value="EN: Reference to the SoAdSocketConnection representing the data path (TCP) for communication with methods."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="XPath">
                              <a:tst expr="node:refvalid(.)" 
                                     false="SdClientServiceTcpRef shall reference a SoAdSocketConnectionGroup"/>
                              <a:tst 
                                     expr="(as:ref(.)/SoAdSocketAutomaticSoConSetup = &apos;false&apos;)" 
                                     false="SoAdSocketAutomaticSoConSetup shall be disabled because setting of RemoteAddress is only allowed if SoAdSocketAutomaticSoConSetup is disabled."/>
                            </a:da>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup"/>
                          </v:ref>
                          <v:ref name="SdClientServiceTimerRef" 
                                 type="REFERENCE">
                            <a:a name="DESC" 
                                 value="EN: The reference of the SdClientTimer container for this service."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="node:refvalid(.)" 
                                  false="SdClientServiceTimerRef shall reference a SdClientTimer"/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdClientTimer"/>
                          </v:ref>
                          <v:ref name="SdClientServiceUdpRef" type="REFERENCE">
                            <a:a name="DESC" 
                                 value="EN: Reference to the SoAdSocketConnection representing the data path (UDP) for communication with methods."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="XPath">
                              <a:tst expr="node:refvalid(.)" 
                                     false="SdClientServiceUdpRef shall reference a SoAdSocketConnectionGroup"/>
                              <a:tst 
                                     expr="(as:ref(.)/SoAdSocketAutomaticSoConSetup = &apos;false&apos;)" 
                                     false="SoAdSocketAutomaticSoConSetup shall be disabled because setting of RemoteAddress is only allowed if SoAdSocketAutomaticSoConSetup is disabled."/>
                            </a:da>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup"/>
                          </v:ref>
                          <v:lst name="SdClientCapabilityRecord" type="MAP">
                            <v:ctr name="SdClientCapabilityRecord" 
                                   type="IDENTIFIABLE">
                              <a:a name="DESC" 
                                   value="EN: Sd uses capability records to store arbitrary name/value pairs conveying additional information about the named service."/>
                              <v:var name="SdClientServiceCapabilityRecordKey" 
                                     type="STRING">
                                <a:a name="DESC" 
                                     value="EN: Defines a CapabilityRecord key."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              </v:var>
                              <v:var 
                                     name="SdClientServiceCapabilityRecordValue" 
                                     type="STRING">
                                <a:a name="DESC" 
                                     value="EN: Defines the corresponding CapabilityRecord value."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="ENABLE" value="false"/>
                              </v:var>
                            </v:ctr>
                          </v:lst>
                          <v:lst name="SdConsumedEventGroup" type="MAP">
                            <v:ctr name="SdConsumedEventGroup" 
                                   type="IDENTIFIABLE">
                              <a:a name="DESC" 
                                   value="EN: A Service may have event groups which can be consumed. A service consumer has to subscribe to the corresponding event-group. After the subscription the event consumer takes the role of a server and the event provider that of a client."/>
                              <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                              <a:da name="INVALID" type="Multi">
                                <mt:xpath>
                                  <mt:tst 
                                          true="A SdConsumedEventGroup shall reference at least one SoAdRoutingGroup" 
                                          expr="not(node:exists(SdConsumedEventGroupMulticastActivationRef)) and not(node:exists(SdConsumedEventGroupUdpActivationRef)) and not(node:exists(SdConsumedEventGroupTcpActivationRef))"/>
                                  <mt:tst 
                                          true="The client service needs to have a configured reference to a SoAdSocketConnection for an unicast UDP data path" 
                                          expr="node:refvalid(SdConsumedEventGroupUdpActivationRef) and not(node:refvalid(../../SdClientServiceUdpRef))"/>
                                  <mt:tst 
                                          true="This consumed event group needs to have a configured reference to a SoAdSocketConnection for a multicast UDP data path" 
                                          expr="node:refvalid(SdConsumedEventGroupMulticastActivationRef) and not(node:exists(SdConsumedEventGroupMulticastGroupRef/*))"/>
                                  <mt:tst 
                                          true="The client service needs to have a configured reference to a SoAdSocketConnection for TCP data path" 
                                          expr="node:refvalid(SdConsumedEventGroupTcpActivationRef) and not(node:refvalid(../../SdClientServiceTcpRef))"/>
                                  <mt:tst 
                                          true="Routing group referenced in SdConsumedEventGroupUdpActivationRef has to be specific." 
                                          expr="(node:refvalid(SdConsumedEventGroupUdpActivationRef)) and (asc_soad:isSpecificRG(node:value(SdConsumedEventGroupUdpActivationRef)) = &apos;false&apos;)"/>
                                  <mt:tst 
                                          true="Routing group referenced in SdConsumedEventGroupTcpActivationRef has to be specific." 
                                          expr="(node:refvalid(SdConsumedEventGroupTcpActivationRef)) and (asc_soad:isSpecificRG(node:value(SdConsumedEventGroupTcpActivationRef)) = &apos;false&apos;)"/>
                                  <mt:tst 
                                          true="Routing group referenced in SdConsumedEventGroupMulticastActivationRef has to be specific." 
                                          expr="(node:refvalid(SdConsumedEventGroupMulticastActivationRef)) and (asc_soad:isSpecificRG(node:value(SdConsumedEventGroupMulticastActivationRef)) = &apos;false&apos;)"/>
                                </mt:xpath>
                              </a:da>
                              <a:da name="WARNING" type="Multi">
                                <mt:xpath 
                                          true="This consumed event group has a configured reference to a SoAdSocketConnection for a multicast UDP data path but it does not have a multicast routing group" 
                                          expr="not(node:exists(SdConsumedEventGroupMulticastActivationRef)) and node:exists(SdConsumedEventGroupMulticastGroupRef/*)"/>
                              </a:da>
                              <v:var name="SdConsumedEventGroupAutoRequire" 
                                     type="BOOLEAN">
                                <a:a name="DESC" 
                                     value="EN: If existing and set to true, this EventGroup will be set to &quot;required&quot; on start."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="DEFAULT" value="false"/>
                                <a:da name="INVALID" type="XPath" 
                                      expr="(node:value(.) = &apos;true&apos;) and (node:value(../../../SdClientServiceAutoRequire) = &apos;false&apos;)" 
                                      true="SdConsumedEventGroupAutoRequire is only allowed to be true if SdClientServiceAutoRequire of the according ClientService is also true."/>
                              </v:var>
                              <v:var name="SdConsumedEventGroupHandleId" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: The HandleId by which the BswM can identify this EventGroup."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                <a:da name="DEFAULT" value="0"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=65535"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                              </v:var>
                              <v:var name="SdConsumedEventGroupId" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: The Eventgroup Id of this eventGroup as a unique identifier of the eventgroup in this service. This identifier is used for EventGroup entries as well."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="DEFAULT" value="0"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=65534"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                              </v:var>
                              <v:lst 
                                     name="SdConsumedEventGroupMulticastGroupRef">
                                <v:ref 
                                       name="SdConsumedEventGroupMulticastGroupRef" 
                                       type="REFERENCE">
                                  <a:a name="DESC" 
                                       value="EN: Reference to the SoAdSocketConnectionGroup representing the multicast data path (UDP)."/>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SCOPE" value="LOCAL"/>
                                  <a:da name="INVALID" type="Multi">
                                    <mt:xpath>
                                      <mt:tst 
                                              false="The socket connection configured as MulticastGroupRef does not exist or may not be referenced." 
                                              expr="node:refvalid(.)"/>
                                      <mt:tst 
                                              true="MsgAcceptanceFilter of a socket connection bundle configured as MulticastGroupRef has to be disabled." 
                                              expr="node:value(as:ref(.)/SoAdSocketMsgAcceptanceFilterEnabled) = &apos;true&apos;"/>
                                      <mt:tst 
                                              true="UdpListenOnly of a socket connection bundle configured as MulticastGroupRef has to be enabled." 
                                              expr="node:value(as:ref(.)/SoAdSocketProtocol/SoAdSocketUdpListenOnly) = &apos;false&apos;"/>
                                    </mt:xpath>
                                  </a:da>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup"/>
                                </v:ref>
                              </v:lst>
                              <v:ref name="SdConsumedEventGroupTimerRef" 
                                     type="REFERENCE">
                                <a:a name="DESC" 
                                     value="EN: The reference of the SdClientTimer container for this eventGroup."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:da name="INVALID" type="XPath" 
                                      expr="node:refvalid(.)" 
                                      false="SdConsumedEventGroupTimerRef shall reference a SdClientTimer"/>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdClientTimer"/>
                              </v:ref>
                              <v:ref 
                                     name="SdConsumedEventGroupMulticastActivationRef" 
                                     type="SYMBOLIC-NAME-REFERENCE">
                                <a:a name="DESC" 
                                     value="EN: The reference of a Routing Group in order to activate and setup the Socket Connection for Multicast Events of this EventGroup. The multicast address from the received Multicast option is setup by SoAd_RequestIpAddrAssignment."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:da name="ENABLE" value="false"/>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                <a:da name="WARNING" type="XPath" 
                                      expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                      asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;SR&apos;),                                                      node:value(../../../SdClientServiceId))) = 0" 
                                      false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                              </v:ref>
                              <v:ref 
                                     name="SdConsumedEventGroupTcpActivationRef" 
                                     type="SYMBOLIC-NAME-REFERENCE">
                                <a:a name="DESC" 
                                     value="EN: The reference of the Routing Group for activation of the data path for receiving TCP events."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:da name="ENABLE" value="false"/>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                <a:da name="WARNING" type="XPath" 
                                      expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                    asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;SR&apos;),                                                    node:value(../../../SdClientServiceId))) = 0" 
                                      false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                              </v:ref>
                              <v:ref 
                                     name="SdConsumedEventGroupUdpActivationRef" 
                                     type="SYMBOLIC-NAME-REFERENCE">
                                <a:a name="DESC" 
                                     value="EN: The reference of the Routing Group for activation of the data path for receiving UDP events."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:da name="ENABLE" value="false"/>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                <a:da name="WARNING" type="XPath" 
                                      expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                    asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;SR&apos;),                                                    node:value(../../../SdClientServiceId))) = 0" 
                                      false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                              </v:ref>
                              <v:lst name="SdClientCapabilityRecord" type="MAP">
                                <v:ctr name="SdClientCapabilityRecord" 
                                       type="IDENTIFIABLE">
                                  <a:a name="DESC" 
                                       value="EN: Sd uses capability records to store arbitrary name/value pairs conveying additional information about the named service."/>
                                  <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                                  <v:var 
                                         name="SdClientServiceCapabilityRecordKey" 
                                         type="STRING">
                                    <a:a name="DESC" 
                                         value="EN: Defines a CapabilityRecord key."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                         type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                  </v:var>
                                  <v:var 
                                         name="SdClientServiceCapabilityRecordValue" 
                                         type="STRING">
                                    <a:a name="DESC" 
                                         value="EN: Defines the corresponding CapabilityRecord value."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                         type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:da name="ENABLE" value="false"/>
                                  </v:var>
                                </v:ctr>
                              </v:lst>
                            </v:ctr>
                          </v:lst>
                          <v:lst name="SdBlacklistedVersions" type="MAP">
                            <v:ctr name="SdBlacklistedVersions" 
                                   type="IDENTIFIABLE">
                              <v:var name="SdBlacklistedMinorVersion" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: Blacklisted MinorVersions."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=4294967294"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                                <a:da name="WARNING" type="XPath" 
                                      expr="(node:exists(.)) and not(lic:feature(&apos;EB_OEM1_EXTENSION&apos;))" 
                                      true="Blacklisted MinorVersions extension is not supported by your license"/>
                              </v:var>
                            </v:ctr>
                          </v:lst>
                          <v:ctr name="SdConsumedMethods" type="IDENTIFIABLE">
                            <a:a name="DESC" 
                                 value="EN: Container element for representing the data path for accessing the server methods."/>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:da name="ENABLE" value="false"/>
                            <v:ref name="SdClientServiceActivationRef" 
                                   type="SYMBOLIC-NAME-REFERENCE">
                              <a:a name="DESC" 
                                   value="EN: Reference to a SoAdRoutingGroupRef to activate/deactivate the data path for the methods."/>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:da name="INVALID" type="Multi">
                                <mt:xpath 
                                          true="Routing group referenced in SdClientServiceActivationRef has to be specific." 
                                          expr="(node:refvalid(.)) and (asc_soad:isSpecificRG(node:value(.)) = &apos;false&apos;)"/>
                              </a:da>
                              <a:da name="REF" 
                                    value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                              <a:da name="WARNING" type="XPath" 
                                    expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                   asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;Both&apos;),                                                   node:value(../../SdClientServiceId))) = 0" 
                                    false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                            </v:ref>
                          </v:ctr>
                        </v:ctr>
                      </v:lst>
                      <v:lst name="SdClientTimer" type="MAP">
                        <v:ctr name="SdClientTimer" type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container specifies all timers used by the Service Discovery module for Client Services."/>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <v:var name="SdClientTimerInitialFindDelayMax" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Max value in [s] to delay randomly the transmission of a find message. This parameter is mandatory for ClientService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.0"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Multi">
                              <mt:range>
                                <mt:tst expr="&lt;=4294967294"/>
                                <mt:tst expr="&gt;=0"/>
                              </mt:range>
                              <mt:xpath>
                                <mt:tst 
                                        false="SdClientTimerInitialFindDelayMax must be &gt;= SdClientTimerInitialFindDelayMin." 
                                        expr=". &gt;= ../SdClientTimerInitialFindDelayMin"/>
                                <mt:tst 
                                        false="exceeds maximum value of 4294967294 ticks..." 
                                        expr=". div node:value(../../../../../../../SdGeneral/SdMainFunctionCycleTime) &lt;= 4294967294"/>
                              </mt:xpath>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientTimerInitialFindDelayMin" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Min value in [s] to delay randomly the transmission of a find message. This parameter is mandatory for ClientService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.0"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=4294967294"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                          <v:var 
                                 name="SdClientTimerInitialFindRepetitionsBaseDelay" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: The base delay in [s] for find repetitions. Successive finds have an exponential back off delay (1x base delay, 2x base delay, 4x base delay, ...). This parameter is mandatory for ClientService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.01"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=Infinity"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientTimerInitialFindRepetitionsMax" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Configuration for the maximum number of find repetitions. This parameter is mandatory for ClientService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="3"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=10"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientTimerRequestResponseMaxDelay" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Maximum allowable response delay to entries received by multicast in seconds. This parameter is mandatory for ConsumedEventGroups."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.0"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Multi">
                              <mt:range>
                                <mt:tst expr="&lt;=4294967294"/>
                                <mt:tst expr="&gt;=0"/>
                              </mt:range>
                              <mt:xpath>
                                <mt:tst 
                                        false="SdClientTimerRequestResponseMaxDelay must be &gt;= SdClientTimerRequestResponseMinDelay." 
                                        expr=". &gt;= ../SdClientTimerRequestResponseMinDelay"/>
                                <mt:tst 
                                        false="exceeds maximum value of 4294967294 ticks..." 
                                        expr=". div node:value(../../../../../../../SdGeneral/SdMainFunctionCycleTime) &lt;= 4294967294"/>
                              </mt:xpath>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientTimerRequestResponseMinDelay" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Minimum allowable response delay to the find message in seconds. This parameter is mandatory for ConsumedEventGroups."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.0"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=4294967294"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdClientTimerTTL" type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Time to live for find and subscribe messages."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="1"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=16777215"/>
                              <a:tst expr="&gt;=1"/>
                            </a:da>
                          </v:var>
                        </v:ctr>
                      </v:lst>
                      <v:ctr name="SdInstanceDemEventParameterRefs" 
                             type="IDENTIFIABLE">
                        <a:a name="DESC" 
                             value="EN: Container for the references to DemEventParameter elements which shall be invoked using the API Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken from the referenced DemEventParameter&apos;s DemEventId value. The standardized errors are provided in the container and can be extended by vendor specific error references."/>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                        <a:da name="ENABLE" value="false"/>
                        <v:ref name="SD_E_MALFORMED_MSG" 
                               type="SYMBOLIC-NAME-REFERENCE">
                          <a:a name="DESC" 
                               value="EN: Reference to the DemEventParameter which shall be issued when the SD Instance received malformed message."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="ENABLE" value="false"/>
                          <a:da name="INVALID" type="XPath" 
                                expr="(node:exists(.) = &apos;true&apos;) and (node:value(../../../../../../SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_MALFORMED_MSG) = &apos;DEM&apos;)" 
                                false="To use DEM reporting /SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_MALFORMED_MSG has to be set to DEM."/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                        </v:ref>
                        <v:ref name="SD_E_OUT_OF_RES" 
                               type="SYMBOLIC-NAME-REFERENCE">
                          <a:a name="DESC" 
                               value="EN: Reference to the DemEventParameter which shall be issued when the SD Instance does not have enough resources to handle client."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="ENABLE" value="false"/>
                          <a:da name="INVALID" type="XPath" 
                                expr="(node:exists(.) = &apos;true&apos;) and (node:value(../../../../../../SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_OUT_OF_RES) = &apos;DEM&apos;)" 
                                false="To use DEM reporting /SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_OUT_OF_RES has to be set to DEM."/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                        </v:ref>
                        <v:ref name="SD_E_SUBSCR_NACK_RECV" 
                               type="SYMBOLIC-NAME-REFERENCE">
                          <a:a name="DESC" 
                               value="EN: Reference to the DemEventParameter which shall be issued when receiving SubscribeEventgroupNack entry."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="ENABLE" value="false"/>
                          <a:da name="INVALID" type="XPath" 
                                expr="(node:exists(.) = &apos;true&apos;) and (node:value(../../../../../../SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_SUBSCR_NACK_RECV) = &apos;DEM&apos;)" 
                                false="To use DEM reporting /SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_SUBSCR_NACK_RECV has to be set to DEM."/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                        </v:ref>
                        <v:ref name="SD_E_SERVER_NOT_AVAILABLE" 
                               type="SYMBOLIC-NAME-REFERENCE">
                          <a:a name="DESC" 
                               value="EN: Reference to the DemEventParameter which shall be issued when a server service which had previously sent an OFFER message does not sent any more OFFERs after the previous OFFER TTL dies out."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="ENABLE" value="false"/>
                          <a:da name="INVALID" type="XPath" 
                                expr="(node:exists(.) = &apos;true&apos;) and (node:value(../../../../../../SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_SERVER_NOT_AVAILABLE) = &apos;DEM&apos;)" 
                                false="To use DEM reporting /SdGeneral/VendorSpecific/ProductionErrorHandling/Enable_SD_E_SERVER_NOT_AVAILABLE has to be set to DEM."/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                        </v:ref>
                      </v:ctr>
                      <v:ctr name="SdInstanceMulticastRxPdu" 
                             type="IDENTIFIABLE">
                        <a:a name="DESC" 
                             value="EN: This container specifies the received PDU."/>
                        <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                        <v:var name="SdRxPduId" type="INTEGER">
                          <a:a name="DESC" 
                               value="EN: ID of the PDU that will be received via the API Sd_SoAdIfRxIndication()."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="ECU"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:da name="DEFAULT" type="XPath" 
                                expr="num:i(num:i(../../@index)*2)"/>
                          <a:da name="INVALID" type="Multi">
                            <mt:range>
                              <mt:tst expr="&lt;=65535"/>
                              <mt:tst expr="&gt;=0"/>
                            </mt:range>
                            <mt:xpath 
                                      false="SdRxPduId shall be set to 2 * Index of SdInstance." 
                                      expr=". = num:i(../../@index * 2)"/>
                          </a:da>
                        </v:var>
                        <v:ref name="SdRxPduRef" type="REFERENCE">
                          <a:a name="DESC" 
                               value="EN: Reference to the &quot;global&quot; Pdu structure to allow harmonization of handle IDs in the COM-Stack."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="node:refvalid(.)" 
                                   false="A SdInstance shall configure a multicast receive PDU."/>
                            <a:tst 
                                   expr="as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxPduHeaderId = 4294934784" 
                                   false="For all received SD messages the SoAdRxPduHeaderId shall be enabled and set to 0xFFFF8100 respectively."/>
                            <a:tst 
                                   expr="(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxSocketConnOrSocketConnBundleRef)/../../SoAdSocketAutomaticSoConSetup = &apos;false&apos;)" 
                                   false="SoAdSocketConnectionGroup used as multicast Sd control path shall be configured for manual setup, setting of RemoteAddress is only allowed if SoAdSocketAutomaticSoConSetup is disabled."/>
                            <a:tst 
                                   expr="(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxSocketConnOrSocketConnBundleRef)/../../SoAdSocketIpAddrAssignmentChgNotification = &apos;true&apos;)" 
                                   false="SoAdSocketConnectionGroup used as multicast Sd control path shall be configured for address assignment change notifications, SoAdSocketIpAddrAssignmentChgNotification has to be enabled."/>
                            <a:tst 
                                   expr="not(node:exists(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxSocketConnOrSocketConnBundleRef)/../../SoAdSocketProtocol/SoAdSocketUdpAliveSupervisionTimeout))" 
                                   false="SoAdSocketConnectionGroup used as multicast Sd control path shall not have and UDP alive timeout configured, SoAdSocketUdpAliveSupervisionTimeout has to be disabled."/>
                          </a:da>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                        </v:ref>
                      </v:ctr>
                      <v:ctr name="SdInstanceTxPdu" type="IDENTIFIABLE">
                        <a:a name="DESC" 
                             value="EN: This container specifies the transmitted PDU."/>
                        <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                        <v:ref name="SdTxPduRef" type="REFERENCE">
                          <a:a name="DESC" 
                               value="EN: Reference to the &quot;global&quot; Pdu structure to allow harmonization of handle IDs in the COM-Stack."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="node:refvalid(.)" 
                                   false="A SdInstance shall configure a transmit PDU."/>
                            <a:tst 
                                   expr="as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdPduRoute/*[SoAdTxPduRef = node:current()]/SoAdPduRouteDest/*/SoAdTxPduHeaderId = 4294934784" 
                                   false="For all sent SD messages the SoAdTxPduHeaderId shall be enabled and set to 0xFFFF8100 respectively."/>
                            <a:tst 
                                   expr="(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdPduRoute/*[SoAdTxPduRef = node:current()]/SoAdPduRouteDest/*[1]/SoAdTxSocketConnOrSocketConnBundleRef)/../../SoAdSocketProtocol/SoAdSocketUdpRetryEnabled = &apos;false&apos;)" 
                                   false="SoAdSocketConnectionGroup referenced by SdInstanceTxPdu/SdTxPduRef shall have the option SoAdSocketUdpRetryEnabled disabled."/>
                            <a:tst 
                                   expr="(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdPduRoute/*[SoAdTxPduRef = node:current()]/SoAdPduRouteDest/*[1]/SoAdTxSocketConnOrSocketConnBundleRef)/../../SoAdSocketProtocol/SoAdSocketUdpListenOnly = &apos;false&apos;)" 
                                   false="SoAdSocketConnectionGroup referenced by SdInstanceTxPdu/SdTxPduRef shall have the option SoAdSocketUdpListenOnly disabled."/>
                            <a:tst 
                                   expr="num:i(count(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdPduRoute/*[SoAdTxPduRef = node:current()]/SoAdPduRouteDest/*[1]/SoAdTxSocketConnOrSocketConnBundleRef)/../*)) &gt; 1" 
                                   true="SoAdSocketConnectionGroup used as unicast Tx and Rx Sd control path shall be configured to have just one socket connection."/>
                          </a:da>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                        </v:ref>
                      </v:ctr>
                      <v:ctr name="SdInstanceUnicastRxPdu" type="IDENTIFIABLE">
                        <a:a name="DESC" 
                             value="EN: This container specifies the received PDU."/>
                        <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                        <v:var name="SdRxPduId" type="INTEGER">
                          <a:a name="DESC" 
                               value="EN: ID of the PDU that will be received via the API Sd_SoAdIfRxIndication()."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="ECU"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:da name="DEFAULT" type="XPath" 
                                expr="num:i(num:i(../../@index)*2 + 1)"/>
                          <a:da name="INVALID" type="Multi">
                            <mt:range>
                              <mt:tst expr="&lt;=65535"/>
                              <mt:tst expr="&gt;=0"/>
                            </mt:range>
                            <mt:xpath 
                                      false="SdRxPduId shall be set to (2 * Index of SdInstance) + 1." 
                                      expr=". = (num:i(../../@index * 2) + 1)"/>
                          </a:da>
                        </v:var>
                        <v:ref name="SdRxPduRef" type="REFERENCE">
                          <a:a name="DESC" 
                               value="EN: Reference to the &quot;global&quot; Pdu structure to allow harmonization of handle IDs in the COM-Stack."/>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SCOPE" value="LOCAL"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="node:refvalid(.)" 
                                   false="A SdInstance shall configure a unicast receive PDU."/>
                            <a:tst 
                                   expr="as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxPduHeaderId = 4294934784" 
                                   false="For all received SD messages the SoAdRxPduHeaderId shall be enabled and set to 0xFFFF8100 respectively."/>
                            <a:tst 
                                   expr="(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxSocketConnOrSocketConnBundleRef)/../../SoAdSocketAutomaticSoConSetup = &apos;false&apos;)" 
                                   false="SoAdSocketConnectionGroup used as unicast Sd control path shall be configured for manual setup, setting of RemoteAddress is only allowed if SoAdSocketAutomaticSoConSetup is disabled."/>
                            <a:tst 
                                   expr="(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxSocketConnOrSocketConnBundleRef)/../../SoAdSocketIpAddrAssignmentChgNotification = &apos;true&apos;)" 
                                   false="SoAdSocketConnectionGroup used as unicast Sd control path shall be configured for address assignment change notifications, SoAdSocketIpAddrAssignmentChgNotification has to be enabled."/>
                            <a:tst 
                                   expr="not(node:exists(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxSocketConnOrSocketConnBundleRef)/../../SoAdSocketProtocol//SoAdSocketUdpAliveSupervisionTimeout))" 
                                   false="SoAdSocketConnectionGroup used as unicast Sd control path shall not have and UDP alive timeout configured, SoAdSocketUdpAliveSupervisionTimeout has to be disabled."/>
                            <a:tst 
                                   expr="num:i(count(as:ref(as:modconf(&apos;SoAd&apos;)[1]/SoAdConfig/*[1]/SoAdSocketRoute/*[SoAdSocketRouteDest/*/SoAdRxPduRef = node:current()]/SoAdRxSocketConnOrSocketConnBundleRef)/../*)) &gt; 1" 
                                   true="SoAdSocketConnectionGroup used as unicast Tx and Rx Sd control path shall be configured to have just one socket connection."/>
                          </a:da>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                        </v:ref>
                      </v:ctr>
                      <v:lst name="SdServerService" type="MAP">
                        <v:ctr name="SdServerService" type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container specifies all parameters used by Server services."/>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <a:da name="INVALID" type="Multi">
                            <mt:xpath>
                              <mt:tst 
                                      false="SdServerServiceUdpRef and/or SdServerServiceTcpRef shall reference a SoAdSocketConnectionGroup" 
                                      expr="node:refvalid(SdServerServiceTcpRef) or                             node:refvalid(SdServerServiceUdpRef)"/>
                              <mt:tst 
                                      true="SdServerServiceUdpRef shall reference a valid SoConGroup if SdEventHandlerUdp are configured." 
                                      expr="not(node:refvalid(SdServerServiceUdpRef)) and (count(SdEventHandler/*/SdEventHandlerUdp) != 0)"/>
                              <mt:tst 
                                      true="SdServerServiceTcpRef shall reference a valid SoConGroup if SdEventHandlerTcp are configured." 
                                      expr="not(node:refvalid(SdServerServiceTcpRef)) and (count(SdEventHandler/*/SdEventHandlerTcp) != 0)"/>
                            </mt:xpath>
                          </a:da>
                          <v:var name="SdServerServiceAutoAvailable" 
                                 type="BOOLEAN">
                            <a:a name="DESC" 
                                 value="EN: If existing and set to true, this Service will be set to &quot;Available&quot; on start."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="false"/>
                          </v:var>
                          <v:var name="SdServerServiceHandleId" type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: The HandleId by which the BswM can identify this Server Service Instance."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65535"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerServiceId" type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Id to identify the service. This is unique for the service interface."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65534"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerServiceInstanceId" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Configuration parameter to specify Instance Id of the Service implemented by the Server Service."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65534"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerServiceMajorVersion" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Major version number of the Service as used in SD Entries."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="1"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=254"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerServiceMinorVersion" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Minor version number of the Service as used e.g. in Offer Service entries."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=4294967294"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:ref name="SdServerServiceTcpRef" type="REFERENCE">
                            <a:a name="DESC" 
                                 value="EN: Reference to SoAdSocketConnectionGroup used for methods."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="XPath">
                              <a:tst 
                                     expr="node:isconsecutive(as:ref(.)/SoAdSocketConnection/*/SoAdSocketId, num:min(as:ref(.)/SoAdSocketConnection/*/SoAdSocketId))" 
                                     false="SoAdSocketId in referenced SoAdSocketConnectionGroup shall be dense."/>
                              <a:tst 
                                     expr="(as:ref(.)/SoAdSocketAutomaticSoConSetup = &apos;false&apos;)" 
                                     false="SoAdSocketAutomaticSoConSetup shall be disabled because setting of RemoteAddress is only allowed if SoAdSocketAutomaticSoConSetup is disabled."/>
                            </a:da>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup"/>
                          </v:ref>
                          <v:ref name="SdServerServiceTimerRef" 
                                 type="REFERENCE">
                            <a:a name="DESC" 
                                 value="EN: The reference of the SdServerTimer container for this service."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="node:refvalid(.)" 
                                  false="SdServerServiceTimerRef shall reference a SdServerTimer"/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdServerTimer"/>
                          </v:ref>
                          <v:ref name="SdServerServiceUdpRef" type="REFERENCE">
                            <a:a name="DESC" 
                                 value="EN: Reference to SoAdSocketConnectionGroup used for methods."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="XPath">
                              <a:tst 
                                     expr="node:isconsecutive(as:ref(.)/SoAdSocketConnection/*/SoAdSocketId, num:min(as:ref(.)/SoAdSocketConnection/*/SoAdSocketId))" 
                                     false="SoAdSocketId in referenced SoAdSocketConnectionGroup shall be dense."/>
                              <a:tst 
                                     expr="(as:ref(.)/SoAdSocketAutomaticSoConSetup = &apos;false&apos;)" 
                                     false="SoAdSocketAutomaticSoConSetup shall be disabled because setting of RemoteAddress is only allowed if SoAdSocketAutomaticSoConSetup is disabled."/>
                            </a:da>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup"/>
                          </v:ref>
                          <v:lst name="SdEventHandler" type="MAP">
                            <v:ctr name="SdEventHandler" type="IDENTIFIABLE">
                              <a:a name="DESC" 
                                   value="EN: Container Element for representing an EventGroup as part of the Service Instance."/>
                              <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                              <v:var name="SdEventHandlerEventGroupId" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: The EventGroup Id of this EventGroup as a unique identifier of the EventGroup in this service. This identifier is used for EventGroup entries as well."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=65534"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                              </v:var>
                              <v:var name="SdEventHandlerHandleId" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: The HandleId by which the BswM can identify this EventGroup."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="ECU"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                <a:da name="DEFAULT" value="0"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=65535"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                              </v:var>
                              <v:var name="SdEventHandlerMulticastThreshold" 
                                     type="INTEGER">
                                <a:a name="DESC" 
                                     value="EN: Specifies the number of subscribed clients that trigger the Server to change the transmission of events to Multicast."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="DEFAULT" value="0"/>
                                <a:da name="INVALID" type="Multi">
                                  <mt:range>
                                    <mt:tst expr="&lt;=65535"/>
                                    <mt:tst expr="&gt;=0"/>
                                  </mt:range>
                                  <mt:xpath>
                                    <mt:tst 
                                            true="If SdEventHandlerMulticastThreshold = 0, either SdEventHandlerUdp/SdEventActivationRef or SdEventHandlerTcp/SdEventActivationRef must be configured" 
                                            expr="(. = 0) and not(node:refvalid(../SdEventHandlerUdp/SdEventActivationRef)) and not(node:refvalid(../SdEventHandlerTcp/SdEventActivationRef))"/>
                                    <mt:tst 
                                            true="If SdEventHandlerMulticastThreshold &gt; 1, SdEventHandlerUdp/SdEventActivationRef must be configured" 
                                            expr="(. &gt; 1) and not(node:refvalid(../SdEventHandlerUdp/SdEventActivationRef))"/>
                                    <mt:tst 
                                            true="If SdEventHandlerMulticastThreshold &gt; 1, SdEventHandlerTcp/SdEventActivationRef can&apos;t be configured, Tcp and multicast are not possible" 
                                            expr="(. &gt; 1) and node:refvalid(../SdEventHandlerTcp/SdEventActivationRef)"/>
                                    <mt:tst 
                                            true="If SdEventHandlerMulticastThreshold != 0, SdEventHandlerMulticast/SdEventActivationRef must be configured" 
                                            expr="(. != 0) and not(node:refvalid(../SdEventHandlerMulticast/SdEventActivationRef))"/>
                                    <mt:tst 
                                            true="If SdEventHandlerMulticastThreshold != 0, SdEventHandlerMulticast/SdMulticastEventSoConRef must be configured" 
                                            expr="(. != 0) and not(node:refvalid(../SdEventHandlerMulticast/SdMulticastEventSoConRef))"/>
                                  </mt:xpath>
                                </a:da>
                                <a:da name="WARNING" type="Multi">
                                  <mt:xpath 
                                            true="If SdEventHandlerMulticastThreshold = 1, SdEventHandlerUdp/SdEventActivationRef can not be configured, this event handler is multicast only" 
                                            expr="(. = 1) and node:refvalid(../SdEventHandlerUdp/SdEventActivationRef)"/>
                                </a:da>
                              </v:var>
                              <v:ref name="SdEventHandlerTimerRef" 
                                     type="REFERENCE">
                                <a:a name="DESC" 
                                     value="EN: The reference of the SdServerTimer container for this EventGroup."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Sd/SdConfig/SdInstance/SdServerTimer"/>
                              </v:ref>
                              <v:ctr name="SdEventHandlerMulticast" 
                                     type="IDENTIFIABLE">
                                <a:a name="DESC" 
                                     value="EN: The subcontainer including the Routing Group for Activation of Events sent over Multicast."/>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:da name="ENABLE" value="false"/>
                                <v:ref name="SdEventActivationRef" 
                                       type="SYMBOLIC-NAME-REFERENCE">
                                  <a:a name="DESC" 
                                       value="EN: Reference to a SoAdRoutingGroup for activation of the data path for a subscribed client (start sending events after subscribe)."/>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="OPTIONAL" value="true"/>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SCOPE" value="LOCAL"/>
                                  <a:da name="ENABLE" value="false"/>
                                  <a:da name="INVALID" type="Multi">
                                    <mt:xpath 
                                              true="Routing group referenced in SdEventActivationRef has to be specific." 
                                              expr="(node:refvalid(../../SdEventHandlerMulticast/SdEventActivationRef)) and (asc_soad:isSpecificRG(node:value(../../SdEventHandlerMulticast/SdEventActivationRef)) = &apos;false&apos;)"/>
                                  </a:da>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                  <a:da name="WARNING" type="XPath" 
                                        expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                      asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;PR&apos;),                                                      node:value(../../../../SdServerServiceId))) = 0" 
                                        false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                                </v:ref>
                                <v:ref name="SdMulticastEventSoConRef" 
                                       type="SYMBOLIC-NAME-REFERENCE">
                                  <a:a name="DESC" 
                                       value="EN: Reference to the SoAdSocketConnection representing the multicast data path (UDP)."/>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="OPTIONAL" value="true"/>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SCOPE" value="LOCAL"/>
                                  <a:da name="ENABLE" value="false"/>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdSocketConnectionGroup/SoAdSocketConnection"/>
                                </v:ref>
                              </v:ctr>
                              <v:ctr name="SdEventHandlerTcp" 
                                     type="IDENTIFIABLE">
                                <a:a name="DESC" 
                                     value="EN: The subcontainer including the Routing Groups for Activation and Trigger Transmit for Events sent over TCP."/>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:da name="ENABLE" value="false"/>
                                <v:ref name="SdEventActivationRef" 
                                       type="SYMBOLIC-NAME-REFERENCE">
                                  <a:a name="DESC" 
                                       value="EN: Reference to a SoAdRoutingGroup for activation of the data path for a subscribed client (start sending events after subscribe)."/>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="OPTIONAL" value="true"/>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SCOPE" value="LOCAL"/>
                                  <a:da name="ENABLE" value="false"/>
                                  <a:da name="INVALID" type="Multi">
                                    <mt:xpath>
                                      <mt:tst 
                                              true="Per event handler of this service it shall be configured whether TCP or UDP is used." 
                                              expr="node:refvalid(../../SdEventHandlerUdp/SdEventActivationRef) and node:refvalid(../../SdEventHandlerTcp/SdEventActivationRef)"/>
                                      <mt:tst 
                                              true="Per event handler of this service it shall be configured whether TCP or UDP is used, multicast and TCP can&apos;t be configured" 
                                              expr="node:refvalid(../../SdEventHandlerMulticast/SdEventActivationRef) and node:refvalid(../../SdEventHandlerTcp/SdEventActivationRef)"/>
                                      <mt:tst 
                                              true="TCP routing group referenced in SdEventActivationRef has to be specific." 
                                              expr="(node:refvalid(../../SdEventHandlerTcp/SdEventActivationRef)) and (asc_soad:isSpecificRG(node:value(../../SdEventHandlerTcp/SdEventActivationRef)) = &apos;false&apos;)"/>
                                    </mt:xpath>
                                  </a:da>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                  <a:da name="WARNING" type="XPath" 
                                        expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                      asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;PR&apos;),                                                      node:value(../../../../SdServerServiceId))) = 0" 
                                        false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                                </v:ref>
                                <v:ref name="SdEventTriggeringRef" 
                                       type="SYMBOLIC-NAME-REFERENCE">
                                  <a:a name="DESC" 
                                       value="EN: Reference to a SoAdRoutingGroup that is used for triggered transmit. Triggering is needed to sent out initial events on the server side after a client got subscribed."/>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="OPTIONAL" value="true"/>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SCOPE" value="LOCAL"/>
                                  <a:da name="ENABLE" value="false"/>
                                  <a:da name="INVALID" type="Multi">
                                    <mt:xpath>
                                      <mt:tst 
                                              true="Per event handler of this service it shall be configured whether TCP or UDP is used." 
                                              expr="node:refvalid(../../SdEventHandlerUdp/SdEventTriggeringRef) and node:refvalid(../../SdEventHandlerTcp/SdEventTriggeringRef)"/>
                                      <mt:tst 
                                              true="TCP routing group referenced in SdEventTriggeringRef has to be specific." 
                                              expr="(node:refvalid(../../SdEventHandlerTcp/SdEventTriggeringRef)) and (asc_soad:isSpecificRG(node:value(../../SdEventHandlerTcp/SdEventTriggeringRef)) = &apos;false&apos;)"/>
                                    </mt:xpath>
                                  </a:da>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                  <a:da name="WARNING" type="XPath" 
                                        expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                      asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;PR&apos;),                                                      node:value(../../../../SdServerServiceId))) = 0" 
                                        false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                                </v:ref>
                              </v:ctr>
                              <v:ctr name="SdEventHandlerUdp" 
                                     type="IDENTIFIABLE">
                                <a:a name="DESC" 
                                     value="EN: The subcontainer including the Routing Groups for Activation and Trigger Transmit for Events sent over UDP."/>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:da name="ENABLE" value="false"/>
                                <v:ref name="SdEventActivationRef" 
                                       type="SYMBOLIC-NAME-REFERENCE">
                                  <a:a name="DESC" 
                                       value="EN: Reference to a SoAdRoutingGroup for activation of the data path for a subscribed client (start sending events after subscribe)."/>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="OPTIONAL" value="true"/>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SCOPE" value="LOCAL"/>
                                  <a:da name="ENABLE" value="false"/>
                                  <a:da name="INVALID" type="Multi">
                                    <mt:xpath>
                                      <mt:tst 
                                              true="Per event handler of this service it shall be configured whether TCP or UDP is used." 
                                              expr="node:refvalid(../../SdEventHandlerUdp/SdEventActivationRef) and node:refvalid(../../SdEventHandlerTcp/SdEventActivationRef)"/>
                                      <mt:tst 
                                              true="UDP routing group referenced in SdEventActivationRef has to be specific." 
                                              expr="(node:refvalid(../../SdEventHandlerUdp/SdEventActivationRef)) and (asc_soad:isSpecificRG(node:value(../../SdEventHandlerUdp/SdEventActivationRef)) = &apos;false&apos;)"/>
                                    </mt:xpath>
                                  </a:da>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                  <a:da name="WARNING" type="XPath" 
                                        expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                      asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;PR&apos;),                                                      node:value(../../../../SdServerServiceId))) = 0" 
                                        false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                                </v:ref>
                                <v:ref name="SdEventTriggeringRef" 
                                       type="SYMBOLIC-NAME-REFERENCE">
                                  <a:a name="DESC" 
                                       value="EN: Reference to a SoAdRoutingGroup that is used for triggered transmit. Triggering is needed to sent out initial events on the server side after a client got subscribed."/>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="OPTIONAL" value="true"/>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SCOPE" value="LOCAL"/>
                                  <a:da name="ENABLE" value="false"/>
                                  <a:da name="INVALID" type="Multi">
                                    <mt:xpath>
                                      <mt:tst 
                                              true="Per event handler of this service it shall be configured whether TCP or UDP is used." 
                                              expr="node:refvalid(../../SdEventHandlerUdp/SdEventTriggeringRef) and node:refvalid(../../SdEventHandlerTcp/SdEventTriggeringRef)"/>
                                      <mt:tst 
                                              true="UDP routing group referenced in SdEventTriggeringRef has to be specific." 
                                              expr="(node:refvalid(../../SdEventHandlerUdp/SdEventTriggeringRef)) and (asc_soad:isSpecificRG(node:value(../../SdEventHandlerUdp/SdEventTriggeringRef)) = &apos;false&apos;)"/>
                                    </mt:xpath>
                                  </a:da>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                                  <a:da name="WARNING" type="XPath" 
                                        expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                      asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;PR&apos;),                                                      node:value(../../../../SdServerServiceId))) = 0" 
                                        false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                                </v:ref>
                              </v:ctr>
                              <v:lst name="SdServerCapabilityRecord" type="MAP">
                                <v:ctr name="SdServerCapabilityRecord" 
                                       type="IDENTIFIABLE">
                                  <a:a name="DESC" 
                                       value="EN: Sd uses capability records to store arbitrary name/value pairs conveying additional information about the named service."/>
                                  <v:var name="SdServerCapabilityRecordKey" 
                                         type="STRING">
                                    <a:a name="DESC" 
                                         value="EN: Defines a CapabilityRecord key."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                         type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                  </v:var>
                                  <v:var name="SdServerCapabilityRecordValue" 
                                         type="STRING">
                                    <a:a name="DESC" 
                                         value="EN: Defines the corresponding CapabilityRecord value."/>
                                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                         type="IMPLEMENTATIONCONFIGCLASS">
                                      <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                    </a:a>
                                    <a:a name="OPTIONAL" value="true"/>
                                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                    <a:a name="SCOPE" value="LOCAL"/>
                                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                    <a:da name="ENABLE" value="false"/>
                                  </v:var>
                                </v:ctr>
                              </v:lst>
                            </v:ctr>
                          </v:lst>
                          <v:ctr name="SdProvidedMethods" type="IDENTIFIABLE">
                            <a:a name="DESC" 
                                 value="EN: Container element for representing the needed elements of the data path for the methods provided by the service."/>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:da name="ENABLE" value="false"/>
                            <v:ref name="SdServerServiceActivationRef" 
                                   type="SYMBOLIC-NAME-REFERENCE">
                              <a:a name="DESC" 
                                   value="EN: Reference to a SoAdRoutingGroup to activated and deactivate the data path for methods of the service."/>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="SCOPE" value="ECU"/>
                              <a:da name="REF" 
                                    value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup"/>
                              <a:da name="WARNING" type="XPath" 
                                    expr="count(asc_soad:getInvalidHeaderIdRoutesOfService(                                                  asc_soad:getSoAdRoutesForRoutingGroup(node:value(.), &apos;Both&apos;),                                                  node:value(../../SdServerServiceId))) = 0" 
                                    false="The header id of at least one PDU of the routing group is not consistent with the service id."/>
                            </v:ref>
                          </v:ctr>
                          <v:lst name="SdServerCapabilityRecord" type="MAP">
                            <v:ctr name="SdServerCapabilityRecord" 
                                   type="IDENTIFIABLE">
                              <a:a name="DESC" 
                                   value="EN: Sd uses capability records to store arbitrary name/value pairs conveying additional information about the named service."/>
                              <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                              <v:var name="SdServerCapabilityRecordKey" 
                                     type="STRING">
                                <a:a name="DESC" 
                                     value="EN: Defines a CapabilityRecord key."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              </v:var>
                              <v:var name="SdServerCapabilityRecordValue" 
                                     type="STRING">
                                <a:a name="DESC" 
                                     value="EN: Defines the corresponding CapabilityRecord value."/>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SCOPE" value="LOCAL"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:da name="ENABLE" value="false"/>
                              </v:var>
                            </v:ctr>
                          </v:lst>
                        </v:ctr>
                      </v:lst>
                      <v:lst name="SdServerTimer" type="MAP">
                        <v:ctr name="SdServerTimer" type="IDENTIFIABLE">
                          <a:a name="DESC" 
                               value="EN: This container specifies all timers used by the Service Discovery module for Server Services."/>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <v:var name="SdServerTimerInitialOfferDelayMax" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Max value in [s] to delay randomly the first offer. This parameter is mandatory for ServerService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.0"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Multi">
                              <mt:range>
                                <mt:tst expr="&lt;=4294967294"/>
                                <mt:tst expr="&gt;=0"/>
                              </mt:range>
                              <mt:xpath>
                                <mt:tst 
                                        false="SdServerTimerInitialOfferDelayMax must be &gt;= SdServerTimerInitialOfferDelayMin." 
                                        expr=". &gt;= ../SdServerTimerInitialOfferDelayMin"/>
                                <mt:tst 
                                        false="exceeds maximum value of 4294967294 ticks..." 
                                        expr=". div node:value(../../../../../../../SdGeneral/SdMainFunctionCycleTime) &lt;= 4294967294"/>
                              </mt:xpath>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerTimerInitialOfferDelayMin" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Min value in [s] to delay randomly the first offer. This parameter is mandatory for ServerService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=4294967294"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                          <v:var 
                                 name="SdServerTimerInitialOfferRepetitionBaseDelay" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: The base delay in [s] for offer repetitions. Successive offers have an exponential back off delay (1x base delay, 2x base delay, 4x base delay, ...). This parameter is mandatory for ServerService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=Infinity"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerTimerInitialOfferRepetitionsMax" 
                                 type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Configure the maximum amount of offer repetition. This parameter is mandatory for ServerService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="3"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=10"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerTimerOfferCyclicDelay" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Interval between cyclic offers in the main phase. This parameter is mandatory for ServerService."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=Infinity"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerTimerRequestResponseMaxDelay" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Maximum allowable response delay to entries received by multicast in seconds."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.0"/>
                            <a:da name="INVALID" type="Multi">
                              <mt:range>
                                <mt:tst expr="&lt;=4294967294"/>
                                <mt:tst expr="&gt;=0"/>
                              </mt:range>
                              <mt:xpath>
                                <mt:tst 
                                        false="SdServerTimerRequestResponseMaxDelay must be &gt;= SdServerTimerRequestResponseMinDelay." 
                                        expr=". &gt;= ../SdServerTimerRequestResponseMinDelay"/>
                                <mt:tst 
                                        false="exceeds maximum value of 4294967294 ticks..." 
                                        expr=". div node:value(../../../../../../../SdGeneral/SdMainFunctionCycleTime) &lt;= 4294967294"/>
                              </mt:xpath>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerTimerRequestResponseMinDelay" 
                                 type="FLOAT">
                            <a:a name="DESC" 
                                 value="EN: Minimum allowable response delay to entries received by multicast in seconds."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="DEFAULT" value="0.0"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=4294967294"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                          <v:var name="SdServerTimerTTL" type="INTEGER">
                            <a:a name="DESC" 
                                 value="EN: Time to live for offer service."/>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=16777215"/>
                              <a:tst expr="&gt;=1"/>
                            </a:da>
                          </v:var>
                        </v:ctr>
                      </v:lst>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <v:ctr name="SdGeneral" type="IDENTIFIABLE">
                <a:a name="DESC" 
                     value="EN: This container lists the general configuration parameters for the Service Discovery module."/>
                <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                <v:lst name="SdHeaderFileInclusion">
                  <v:var name="SdHeaderFileInclusion" type="STRING">
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  </v:var>
                </v:lst>
                <v:var name="SdDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables and disables the development error detection and notification mechanism."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="SdMainFunctionCycleTime" type="FLOAT">
                  <a:a name="DESC" 
                       value="EN: This parameter defines the cycle time in seconds of the periodic calling of Sd main function."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="0.005"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=1.0"/>
                    <a:tst expr="&gt;=1.0E-4"/>
                  </a:da>
                </v:var>
                <v:var name="SdSubscribeEventgroupRetryEnable" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Switch to enable or disable retry functionality to subscribe to Eventgroups of ServerServices with TTL set to 0xFFFFFF."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="WARNING" type="XPath" 
                        expr="(. = &apos;true&apos;) and not(lic:feature(&apos;EB_OEM1_EXTENSION&apos;))" 
                        true="Retry feature extension is not supported by your license"/>
                </v:var>
                <v:var name="SdVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC" 
                       value="EN: Enables and disables the version info API."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="SdRelocatablePbcfgEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                         Enables/disable support for relocatable postbuild configuration.
                         &lt;ul&gt;
                           &lt;li&gt;True: Postbuild configuration relocatable in memory.&lt;/li&gt;
                           &lt;li&gt;False: Postbuild configuration not relocatable in memory.&lt;/li&gt;
                         &lt;/ul&gt;
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(node:contains(node:refs(as:modconf(&apos;PbcfgM&apos;)/PbcfgMBswModules/*/PbcfgMBswModuleRef), as:modconf(&apos;Sd&apos;)) = &apos;true&apos;)" 
                        true="false" false="true"/>
                </v:var>
                <v:var name="SdMaxInstanceCount" type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum number of instances that can be defined in the configuration."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="8"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=128"/>
                      <mt:tst expr="&gt;=1"/>
                    </mt:range>
                    <mt:xpath 
                              true="Total number of defined instances in the configuration is bigger than this value of maximum number of instances." 
                              expr=". &lt; count(as:modconf(&apos;Sd&apos;)[1]/SdConfig/*[1]/SdInstance/*)"/>
                  </a:da>
                </v:var>
                <v:var name="SdMaxClientServiceCount" type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum number of client services that can be defined in the configuration."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="32"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=1024"/>
                      <mt:tst expr="&gt;=0"/>
                    </mt:range>
                    <mt:xpath 
                              true="Total number of defined client services in the configuration is bigger than this value." 
                              expr=". &lt; count(as:modconf(&apos;Sd&apos;)[1]/SdConfig/*[1]/SdInstance/*/SdClientService/*)"/>
                  </a:da>
                </v:var>
                <v:var name="SdMaxServerServiceCount" type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum number of client services that can be defined in the configuration."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="32"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=1024"/>
                      <mt:tst expr="&gt;=0"/>
                    </mt:range>
                    <mt:xpath 
                              true="Total number of defined server services in the configuration is bigger than this value." 
                              expr=". &lt; count(as:modconf(&apos;Sd&apos;)[1]/SdConfig/*[1]/SdInstance/*/SdServerService/*)"/>
                  </a:da>
                </v:var>
                <v:var name="SdMaxClientServiceEventGroupCount" type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum number of client services that can be defined in the configuration."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="32"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=8096"/>
                      <mt:tst expr="&gt;=0"/>
                    </mt:range>
                    <mt:xpath 
                              true="Total number of defined consumed event groups in all client services in the configuration is bigger than this value." 
                              expr=". &lt; count(as:modconf(&apos;Sd&apos;)[1]/SdConfig/*[1]/SdInstance/*/SdClientService/*/SdConsumedEventGroup/*)"/>
                  </a:da>
                </v:var>
                <v:var name="SdMaxServerServiceEventCount" type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum number of server services that can be defined in the configuration."/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="32"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=8096"/>
                      <mt:tst expr="&gt;=0"/>
                    </mt:range>
                    <mt:xpath 
                              true="Total number of defined event handlers in all server services in the configuration is bigger than this value." 
                              expr=". &lt; count(as:modconf(&apos;Sd&apos;)[1]/SdConfig/*[1]/SdInstance/*/SdServerService/*/SdEventHandler/*)"/>
                  </a:da>
                </v:var>
                <v:var name="SdMaxConsumedEventGroupMulticastReferences" 
                       type="INTEGER">
                  <a:a name="DESC" 
                       value="EN: Maximum number of multicast references to the existing consumed event groups. This number can never exceed the total number of consumed event groups defined in the configuration"/>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="num:i(count(as:modconf(&apos;Sd&apos;)[1]/SdConfig/*[1]/SdInstance/*/SdClientService/*/SdConsumedEventGroup/*))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=8096"/>
                      <mt:tst expr="&gt;=0"/>
                    </mt:range>
                    <mt:xpath 
                              true="Total number of multicast references to the existing consumed event groups can not be bigger than the number of consumed event groups." 
                              expr=". &gt; count(as:modconf(&apos;Sd&apos;)[1]/SdConfig/*[1]/SdInstance/*/SdClientService/*/SdConsumedEventGroup/*)"/>
                  </a:da>
                </v:var>
                <v:ctr name="VendorSpecific" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        Contains the vendor specific configuration parameters of the AUTOSAR Sd module.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                  <a:a name="TAB" value="VendorSpecific"/>
                  <v:var name="SdTxFrameBufferSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          Defines the internal buffer size used to assemble frames for
                          transmissions of Sd control messages. Indirectly defines the maximal size
                          of Sd control frames. This buffer size also holds 8 byte of the SOME/IP header, 
                          resulting in a SOME/IP payload 8 bytes less.
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="1408"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=1408"/>
                      <a:tst expr="&gt;=40"/>
                    </a:da>
                  </v:var>
                  <v:var name="SdTxOptionsBufferSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          Defines the maximum number of options transmitted within a Sd control messages.
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="40"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=250"/>
                      <a:tst expr="&gt;=3"/>
                    </a:da>
                  </v:var>
                  <v:var name="SdRxOptionsBufferSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          Defines the maximum number of options being processes in a received Sd control messages.
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="120"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=250"/>
                      <a:tst expr="&gt;=3"/>
                    </a:da>
                  </v:var>
                  <v:ctr name="ProductionErrorHandling" type="IDENTIFIABLE">
                    <v:var name="Enable_SD_E_MALFORMED_MSG" type="ENUMERATION">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;Enables DEM reporting in SD.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;: All errors are reported to the Diagnostics Event Manager (Dem).&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;: All errors are reported to the Development Error Tracer (Det) if enabled.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;: Production errors are not reported at all.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the ROM consumption of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                                &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the execution time of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="Enable SD_E_MALFORMED_MSG"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="DISABLE"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="(. = &apos;DET&apos;) and (../../../SdDevErrorDetect = &apos;false&apos;)" 
                            true="SdDevErrorDetect is set to false which means that production errors cannot be reported to the development error tracer (Det)."/>
                      <a:da name="RANGE">
                        <a:v>DEM</a:v>
                        <a:v>DET</a:v>
                        <a:v>DISABLE</a:v>
                      </a:da>
                    </v:var>
                    <v:var name="SD_E_MALFORMED_MSG_ReportToDemDetErrorId" 
                           type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                          &lt;p&gt;
                            If a production error is reported towards the Det, this parameter defines the
                            error id which is reported towards the Det.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="SD_E_MALFORMED_MSG Det Error ID"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="129"/>
                      <a:da name="ENABLE" type="XPath" 
                            expr="../Enable_SD_E_MALFORMED_MSG = &apos;DET&apos;"/>
                      <a:da name="INVALID" type="Range" expr="&lt;=255"/>
                    </v:var>
                    <v:var name="Enable_SD_E_OUT_OF_RES" type="ENUMERATION">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;Enables DEM reporting in SD.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;: All errors are reported to the Diagnostics Event Manager (Dem).&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;: All errors are reported to the Development Error Tracer (Det) if enabled.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;: Production errors are not reported at all.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the ROM consumption of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                                &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the execution time of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="Enable SD_E_OUT_OF_RES"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="DISABLE"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="(. = &apos;DET&apos;) and (../../../SdDevErrorDetect = &apos;false&apos;)" 
                            true="SdDevErrorDetect is set to false which means that production errors cannot be reported to the development error tracer (Det)."/>
                      <a:da name="RANGE">
                        <a:v>DEM</a:v>
                        <a:v>DET</a:v>
                        <a:v>DISABLE</a:v>
                      </a:da>
                    </v:var>
                    <v:var name="SD_E_OUT_OF_RES_ReportToDemDetErrorId" 
                           type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                          &lt;p&gt;
                            If a production error is reported towards the Det, this parameter defines the
                            error id which is reported towards the Det.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="SD_E_OUT_OF_RES Det Error ID"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="130"/>
                      <a:da name="ENABLE" type="XPath" 
                            expr="../Enable_SD_E_OUT_OF_RES = &apos;DET&apos;"/>
                      <a:da name="INVALID" type="Range" expr="&lt;=255"/>
                    </v:var>
                    <v:var name="Enable_SD_E_SUBSCR_NACK_RECV" 
                           type="ENUMERATION">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;Enables DEM reporting in SD.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;: All errors are reported to the Diagnostics Event Manager (Dem).&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;: All errors are reported to the Development Error Tracer (Det) if enabled.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;: Production errors are not reported at all.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the ROM consumption of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                                &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the execution time of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="Enable SD_E_SUBSCR_NACK_RECV"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="DISABLE"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="(. = &apos;DET&apos;) and (../../../SdDevErrorDetect = &apos;false&apos;)" 
                            true="SdDevErrorDetect is set to false which means that production errors cannot be reported to the development error tracer (Det)."/>
                      <a:da name="RANGE">
                        <a:v>DEM</a:v>
                        <a:v>DET</a:v>
                        <a:v>DISABLE</a:v>
                      </a:da>
                    </v:var>
                    <v:var name="SD_E_SUBSCR_NACK_RECV_ReportToDemDetErrorId" 
                           type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                          &lt;p&gt;
                            If a production error is reported towards the Det, this parameter defines the
                            error id which is reported towards the Det.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v class="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="LABEL" 
                           value="SD_E_SUBSCR_NACK_RECV Det Error ID"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="131"/>
                      <a:da name="ENABLE" type="XPath" 
                            expr="../Enable_SD_E_SUBSCR_NACK_RECV = &apos;DET&apos;"/>
                      <a:da name="INVALID" type="Range" expr="&lt;=255"/>
                    </v:var>
                    <v:var name="Enable_SD_E_SERVER_NOT_AVAILABLE" 
                           type="ENUMERATION">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;Enables DEM reporting in SD.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;DEM&lt;/code&gt;: All errors are reported to the Diagnostics Event Manager (Dem).&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DET&lt;/code&gt;: All errors are reported to the Development Error Tracer (Det) if enabled.&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;DISABLE&lt;/code&gt;: Production errors are not reported at all.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the ROM consumption of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                                &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the execution time of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="Enable SD_E_SERVER_NOT_AVAILABLE"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="DISABLE"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="(. = &apos;DET&apos;) and (../../../SdDevErrorDetect = &apos;false&apos;)" 
                            true="SdDevErrorDetect is set to false which means that production errors cannot be reported to the development error tracer (Det)."/>
                      <a:da name="RANGE">
                        <a:v>DEM</a:v>
                        <a:v>DET</a:v>
                        <a:v>DISABLE</a:v>
                      </a:da>
                    </v:var>
                    <v:var 
                           name="SD_E_SERVER_NOT_AVAILABLE_ReportToDemDetErrorId" 
                           type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                          &lt;p&gt;
                            If a production error is reported towards the Det, this parameter defines the
                            error id which is reported towards the Det.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v class="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" 
                           value="SD_E_SERVER_NOT_AVAILABLE Det Error ID"/>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="DEFAULT" value="133"/>
                      <a:da name="ENABLE" type="XPath" 
                            expr="../Enable_SD_E_SERVER_NOT_AVAILABLE = &apos;DET&apos;"/>
                      <a:da name="INVALID" type="Range" expr="&lt;=255"/>
                    </v:var>
                  </v:ctr>
                  <v:ctr name="Sd_SendDataBackServerNotAvailable" 
                         type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              This container provides the functionality to call a user defined function.
                            &lt;/p&gt;
                            &lt;p&gt;
                              If this container is not configured this functionality is disabled.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:da name="ENABLE" value="false"/>
                    <v:var name="Sd_ServerNotAvailableCallBack" 
                           type="FUNCTION-NAME">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                User defined callback function
                                to be called each time that a Server Service that had previously sent an OFFER stops sending OFFERs.
                                This function will only be called if the client service is requested.
                              &lt;/p&gt;
                              &lt;p&gt;
                                Syntax: &lt;code&gt; (void) UserDefinedFunction(uint16 ServiceID, uint16 InstanceID, TcpIp_SockAddrType* UdpIpAddrPtr, TcpIp_SockAddrType* TcpIpAddrPtr)&lt;/code&gt;
                              &lt;/p&gt;
                              &lt;p&gt;
                                with UserDefinedFunction as placeholder for a user defined function
                                name provided with this configuration field.
                              &lt;/p&gt;
                              &lt;p&gt;
                                &lt;b&gt;Note:&lt;/b&gt; User defined header files can be added to configuration
                                container SdHeaderFileInclusion.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="INVALID" type="XPath" expr="node:empty(.)" 
                            true="Callback function name must be specified when Sd_SendDataBackServerNotAvailable Callback container is enabled."/>
                    </v:var>
                  </v:ctr>
                  <v:ctr name="Sd_SendDataBackMalformedMsg" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              This container provides the functionality to call a user defined function.
                            &lt;/p&gt;
                            &lt;p&gt;
                              If this container is not configured this functionality is disabled.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:da name="ENABLE" value="false"/>
                    <v:var name="Sd_MalformedMsgCallBack" type="FUNCTION-NAME">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                User defined callback function
                                to be called each time that a malformed Sd UDP frame is received.
                              &lt;/p&gt;
                              &lt;p&gt;
                                Syntax: &lt;code&gt; (void) UserDefinedFunction(void)&lt;/code&gt;
                              &lt;/p&gt;
                              &lt;p&gt;
                                with UserDefinedFunction as placeholder for a user defined function
                                name provided with this configuration field.
                              &lt;/p&gt;
                              &lt;p&gt;
                                &lt;b&gt;Note:&lt;/b&gt; User defined header files can be added to configuration
                                container SdHeaderFileInclusion.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="INVALID" type="XPath" expr="node:empty(.)" 
                            true="Callback function name must be specified when Sd_SendDataBackMalformedMsg Callback container is enabled."/>
                    </v:var>
                  </v:ctr>
                  <v:ctr name="Sd_SendDataBackSubscribeNackReceived" 
                         type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              This container provides the functionality to call a user defined function.
                            &lt;/p&gt;
                            &lt;p&gt;
                              If this container is not configured this functionality is disabled.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:da name="ENABLE" value="false"/>
                    <v:var name="Sd_SubscribeNackReceivedCallBack" 
                           type="FUNCTION-NAME">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                User defined callback function
                                to be called each time that a subscribe nack entry is received.
                              &lt;/p&gt;
                              &lt;p&gt;
                                Syntax: &lt;code&gt; (void) UserDefinedFunction(void)&lt;/code&gt;
                              &lt;/p&gt;
                              &lt;p&gt;
                                with UserDefinedFunction as placeholder for a user defined function
                                name provided with this configuration field.
                              &lt;/p&gt;
                              &lt;p&gt;
                                &lt;b&gt;Note:&lt;/b&gt; User defined header files can be added to configuration
                                container SdHeaderFileInclusion.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:da name="INVALID" type="XPath" expr="node:empty(.)" 
                            true="Callback function name must be specified when Sd_SendDataBackSubscribeNackReceived Callback container is enabled."/>
                    </v:var>
                  </v:ctr>
                </v:ctr>
              </v:ctr>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/Sd"/>
              <v:ctr name="SdDefensiveProgramming" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                &lt;p&gt;Parameters for defensive programming&lt;/p&gt;
                &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Defensive Programming Options"/>
                <v:var name="SdDefProgEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                    &lt;p&gt;Enables or disables the defensive
                    programming feature for the module Sd.&lt;/p&gt;
                    &lt;p&gt;Note: This feature is dependent on the use of the development error detection module.
                    To use the defensive programming feature, proceed as follows:
                    &lt;ol&gt;
                    &lt;li&gt;Enable development error detection&lt;/li&gt;
                    &lt;li&gt;Enable defensive programming&lt;/li&gt;
                    &lt;li&gt;Enable assertions as required&lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Defensive Programming"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../SdGeneral/SdDevErrorDetect = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="SdPrecondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of precondition assertion checks reported from
                  the module Sd.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;SdDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;SdDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Precondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../SdGeneral/SdDevErrorDetect = &apos;true&apos;) and (../SdDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="SdPostcondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of postcondition assertion checks reported from
                  the module Sd.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;SdDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;SdDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Postcondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../SdGeneral/SdDevErrorDetect = &apos;true&apos;) and (../SdDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="SdStaticAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of static assertion checks reported from
                  the module Sd.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;SdDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;SdDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Static Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../SdGeneral/SdDevErrorDetect = &apos;true&apos;) and (../SdDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="SdUnreachAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of unreachable code assertion checks
                  reported from the module Sd.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;SdDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;SdDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Unreachable Code Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../SdGeneral/SdDevErrorDetect = &apos;true&apos;) and (../SdDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="SdInvariantAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of invariant assertion checks
                  reported from functions of the module Sd.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;SdDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;SdDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Invariant Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../SdGeneral/SdDevErrorDetect = &apos;true&apos;) and (../SdDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
          <d:chc name="myEcuParameterDefinition" type="AR-ELEMENT" 
                 value="ECU_PARAMETER_DEFINITION">
            <d:ctr type="AR-ELEMENT">
              <a:a name="DEF" 
                   value="ASPath:/AR_PACKAGE_SCHEMA/ECU_PARAMETER_DEFINITION"/>
              <d:lst name="MODULE_REF">
                <d:ref type="MODULE_REF" value="ASPath:/TS_TxDxM1I4R0/Sd"/>
              </d:lst>
            </d:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
