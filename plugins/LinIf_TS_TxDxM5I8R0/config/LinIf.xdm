<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM5I8R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="LinIf" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.2.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                      <ad:DATE>2011-11-09T11:36:22Z</ad:DATE>
                    </ad:DOC-REVISION>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>5.8.27</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>Elektrobit Automotive GmbH</ad:ISSUED-BY>
                      <ad:DATE>2021-07-14T23:59:59Z</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC">
                <a:v>&lt;html&gt;
                      Configuration of the LinIf (LIN Interface) module.
                    &lt;/html&gt;</a:v>
              </a:a>
              <a:a name="LOWER-MULTIPLICITY" value="0"/>
              <a:a name="RELEASE" value="asc:4.0"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <a:a name="UUID" value="ECUC:ac2ac1e0-b9bd-4f49-bfe2-3ce03cc8061d"/>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="5"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="8"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="27"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="62"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="LABEL" value="Config Variant"/>
                <a:da name="DEFAULT" value="VariantPostBuild"/>
                <a:da name="EDITABLE" value="false"/>
                <a:da name="RANGE" value="VariantPostBuild"/>
              </v:var>
              <v:ctr name="LinIfGeneral" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        Container that holds all LIN interface general parameters.
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="UUID" 
                     value="ECUC:dc9a773a-d7ca-42ff-a751-8f35fc1171e3"/>
                <a:da name="WARNING" type="XPath" 
                      expr="node:exists(../LinIfGlobalConfig/*/LinIfChannel/*[LinIfNodeType = &apos;LinIfSlave&apos;]) and not(node:exists(./LinIfSaveConfigurationCallout))" 
                      true="Slave nodes are configured but LinIfSaveConfigurationCallout is disabled. Save Configuration requests will not be supported."/>
                <v:var name="LinIfCancelTransmitSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Global Pre-Compile Switch to reliably prevent the generation of the dummy
                          LinIf_CancelTransmit API.
                          &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:d6679d00-fe67-48c5-9a7a-ffaeb82ebc57"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" value="false"/>
                </v:var>
                <v:var name="LinIfDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Switches the Development Error Detection and Notification ON or OFF.
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the
                              module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the execution time of the
                              module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1786d1df-f161-4bd4-be94-d671b4335008"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="LinIfMultipleDriversSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          States if multiple drivers are included in the LIN Interface or not. The reason
                          for this parameter is to reduce the size of LIN Interface if multiple drivers
                          are not used.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:c3f20a68-c3db-4a68-b9e8-254e8873f238"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" value="true"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst 
                           expr="((. = &apos;true&apos;) and (count(as:modconf(&apos;Lin&apos;)) &lt; 2))" 
                           true="If LinIfMultipleDriversSupported is activated, at least two Lin Drivers should be configured."/>
                    <a:tst 
                           expr="((. = &apos;false&apos;) and (count(as:modconf(&apos;Lin&apos;)) &gt; 1))" 
                           true="If at least two Lin Drivers are configured, LinIfMultipleDriversSupported shall be activated."/>
                  </a:da>
                  <a:da name="WARNING" type="XPath" 
                        expr="((. = &apos;true&apos;) and count(as:modconf(&apos;Lin&apos;)) != count(as:modconf(&apos;Lin&apos;)/CommonPublishedInformation[ArMinorVersion = as:modconf(&apos;Lin&apos;)[1]/CommonPublishedInformation/ArMinorVersion]))" 
                        true="If LinIfMultipleDriversSupported is activated, both drivers should be the same AUTOSAR Version (taken from Common Published Information) and in relation with the LinIfLinDriverAPI parameter (using drivers with different versions might impact generation and functionality)."/>
                </v:var>
                <v:var name="LinIfMultipleTrcvDriverSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          States if multiple LIN Transceivers are supported by the LIN Interface or not. The
                          reason for this parameter is to reduce the size of LIN Interface if multiple LIN
                          Transceivers are not used.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2265c857-1c3c-48fc-9e10-adeaa218d4d3"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="node:value(../LinIfTrcvDriverSupported)"/>
                </v:var>
                <v:var name="LinIfNcOptionalRequestSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          This parameter is ignored as disabling the node configuration commands
                          Assign NAD and Conditional Change NAD does not have an effect for this
                          LinIf implementation.
                          &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:43093996-93e3-461d-b50f-58021a6b42bc"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="EDITABLE" value="false"/>
                </v:var>
                <v:lst name="LinIfPublicCddHeaderFile">
                  <v:var name="LinIfPublicCddHeaderFile" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                           Defines header files for callback functions which shall be included in case of CDDs. Range of characters is 1.. 32.
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:90188127-bfd2-42e2-aacc-20d2a3283e45"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:length>
                        <mt:tst expr="&lt;=32"/>
                        <mt:tst expr="&gt;=1"/>
                      </mt:length>
                      <mt:xpath>
                        <mt:tst false="Invalid header file name." 
                                expr="text:match(.,&apos;^\w+\.h$&apos;)"/>
                        <mt:tst 
                                false="The specified CDD header files should be listed only once, each (Not unique)." 
                                expr="text:uniq(../*,node:value(.))"/>
                      </mt:xpath>
                    </a:da>
                  </v:var>
                </v:lst>
                <v:var name="LinIfTpSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          States if the TP is included in the LIN Interface or not. The reason for
                          this parameter is to reduce the size of LIN Interface if the TP is
                          not used.
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.config.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (config):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the
                              module configuration.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.config.ram.increase&quot;&gt;
                              &lt;strong&gt;RAM increase (config):&lt;/strong&gt;
                              Enabling this parameter increases the RAM consumption of the
                              module configuration.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the
                              module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the execution time of the
                              module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:395fa338-8613-4555-b427-29807f920ac3"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinIfTrcvDriverSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        States if transceiver drivers are included in the LIN Interface or not. The reason for this parameter is to reduce the size of LIN Interface if transceiver drivers are not used.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:021681e4-7dd7-48b9-a0ae-f46ba162c147"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinIfVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to enable/disable the API function
                          &lt;code&gt;LinIf_GetVersionInfo()&lt;/code&gt; to read
                          out the module&apos;s version information.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: Version info API enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: Version info API disabled.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:8e091b33-0f2b-41ea-bdcd-4e7f273f4746"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinIfBusMirroringSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;States if Bus Mirroring is enabled in the LIN Interface or not.
                          The reason for this parameter is to reduce the size of LIN Interface
                          if the Bus Mirroring is not used.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: Bus Mirroring enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: Bus Mirroring disabled.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:f7cb7ea4-c591-43f1-9e28-f5854a69592e"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinIfRuntimeErrorReporting" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switches the &lt;strong&gt;Runtime Error Reporting to Det&lt;/strong&gt; ON or OFF.&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;
                            &lt;strong&gt;TRUE&lt;/strong&gt;: &lt;tt&gt;LINIF_E_RESPONSE&lt;/tt&gt; is reported to Det
                          &lt;/li&gt;
                          &lt;li&gt;
                            &lt;strong&gt;FALSE&lt;/strong&gt;: &lt;tt&gt;LINIF_E_RESPONSE&lt;/tt&gt; is &lt;strong&gt;not&lt;/strong&gt; reported to Det
                          &lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the execution time of the module code.
                            &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="31aad231-95bf-4f14-90f0-69385270bc12"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="LinIfSingleLinTrcvAPIInfixEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This parameter defines if LinIf shall use the Vendor Id
                          and the API Infix for accessing the LinTrcv module in case
                          a single LinTrcv driver is configured.&lt;/p&gt;
                          &lt;ul&gt;
                          &lt;li&gt;
                            TRUE: LinIf uses the Vendor Id and the API Infix of the LinTrcv
                            for accessing the LinTrcv API (e.g. LinTrcv_1_T01_SetOpMode)
                            in case only a single LinTrcv driver is used. In addtion this name
                            mangling is also used for including the LinTrcv header file
                            (e.g. LinTrcv_1_T01.h)
                          &lt;/li&gt;
                          &lt;li&gt;
                            FALSE: LinIf does not use the Vendor Id and the API Infix of
                            the LinTrcv in case only a single LinTrcv driver is used.
                          &lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;Note: If &lt;strong&gt;more than one LinTrcv&lt;/strong&gt; driver is configured,
                          name mangling must be used. (&lt;strong&gt;LinIfSingleLinTrcvAPIInfixEnable&lt;/strong&gt;)&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="node:value(../LinIfTrcvDriverSupported)"/>
                </v:var>
                <v:var name="LinIfCheckWakeupSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Specifies if the Lin Interface supports check wake up functionality.
                          &lt;ul&gt;
                            &lt;li&gt;
                             TRUE: Check wake up functionality is supported.
                            &lt;/li&gt;
                            &lt;li&gt;
                             FALSE: Check wake up functionality is NOT supported.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the ROM consumption of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinIfScheduleTableEndNotificationSupported" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Specifies if the Lin Interface supports end-of-schedule notification functionality.
                          &lt;ul&gt;
                            &lt;li&gt;
                            TRUE: Functionality is supported.
                            &lt;/li&gt;
                            &lt;li&gt;
                            FALSE: Functionality is NOT supported.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;The callout names are specified in &lt;strong&gt;LinIfScheduleTableEndNotificationCallout/LinIfScheduleTableEndNotificationCalloutName&lt;/strong&gt;&lt;/p&gt;
                          &lt;p&gt;Declaration is supplied within a &lt;strong&gt;LinIfPublicCddHeaderFile&lt;/strong&gt; entry.&lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.config.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (config):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the module configuration.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:8414ba5b-9018-4006-a78d-8254e169f839"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinIfUpperLayerCddSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables UL Cdd support. Both LinSM and PduR substitution.&lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.config.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (config):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the module configuration.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="9c4ef94f-5e9a-4bca-9d93-9a2217fd2358"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinIfDriverAPIInfixEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This parameter defines if LinIf shall use the Vendor Id
                          and the API Infix for accessing the Lin Driver module in case
                          a single Lin driver is configured.&lt;/p&gt;
                          &lt;p&gt;true: LinIf uses the Vendor Id and the API Infix of the Lin Driver
                          for accessing the Driver API (e.g. Lin_1_T01_SendFrame)
                          in case only a single Lin driver is used. In addtion this name
                          mangling is also used for including the Lin Driver header file
                          (e.g. Lin_1_T01.h)&lt;/p&gt;
                          &lt;p&gt;false: LinIf does not use the Vendor Id and the API Infix of
                          the Lin Driver in case only a single Lin driver is used.&lt;/p&gt;
                          &lt;p&gt;Note: If more than one Lin driver is configured,
                          name mangling must be used.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="((. = &apos;false&apos;) and (../LinIfMultipleDriversSupported = &apos;true&apos;))" 
                        true="If LinIfMultipleDriversSupported is activated, LinIfDriverAPIInfixEnable should be activated because Infix is mandatory when multiple Lin drivers are used."/>
                </v:var>
                <v:var name="LinIfLinDriverAPI" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Specifies which AUTOSAR Revision of Lin driver API shall be used by the Lin Interface.
                          &lt;ul&gt;
                            &lt;li&gt;
                             &lt;strong&gt;REV2&lt;/strong&gt;: Use Lin according to AUTOSAR Specification of LIN Driver V1.4.0 R4.0 Rev 2.
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;REV3&lt;/strong&gt;: Use Lin according to AUTOSAR Specification of LIN Driver V1.5.0 R4.0 Rev 3.
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;4.2&lt;/strong&gt;: Use Lin according to AUTOSAR Specification of LIN Driver 4.2.1/4.2.2.
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;4.3.1&lt;/strong&gt;: Use Lin according to AUTOSAR Specification of LIN Driver 4.3.1.
                             (Only difference between this and 4.2, is the Lin_SendFrame function header, no other specific features/changes for 4.3.1 are included.)
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;4.4&lt;/strong&gt;: Use Lin according to AUTOSAR Specification of LIN Driver 4.4.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="REV3"/>
                  <a:da name="RANGE">
                    <a:v>REV2</a:v>
                    <a:v>REV3</a:v>
                    <a:v>REV42</a:v>
                    <a:v>REV431</a:v>
                    <a:v>REV44</a:v>
                  </a:da>
                  <a:da name="WARNING" type="XPath">
                    <a:tst 
                           expr="((. = &apos;REV3&apos;) and (node:exists(as:modconf(&apos;Lin&apos;)/CommonPublishedInformation)) and (as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMajorVersion &lt;= 4) and (as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMinorVersion &lt;= 1))" 
                           true="This configuration does not match the Common Published Information of the Lin driver module."/>
                    <a:tst 
                           expr="((. = &apos;REV42&apos;) and (node:exists(as:modconf(&apos;Lin&apos;)/CommonPublishedInformation)) and (as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMajorVersion &lt;= 4) and (as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMinorVersion != 2))" 
                           true="This configuration does not match the Common Published Information of the Lin driver module."/>
                    <a:tst 
                           expr="((. = &apos;REV431&apos;) and (node:exists(as:modconf(&apos;Lin&apos;)/CommonPublishedInformation)) and ((as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMajorVersion &lt; 4) or (as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMinorVersion &lt; 3) or ((as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMinorVersion = 3) and (as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArPatchVersion &lt; 1))))" 
                           true="This configuration does not match the Common Published Information of the Lin driver module."/>
                    <a:tst 
                           expr="((. = &apos;REV44&apos;) and (node:exists(as:modconf(&apos;Lin&apos;)/CommonPublishedInformation)) and ((as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMajorVersion &lt; 4) or (as:modconf(&apos;Lin&apos;)/CommonPublishedInformation/ArMinorVersion &lt; 4)))" 
                           true="This configuration does not match the Common Published Information of the Lin driver module."/>
                  </a:da>
                </v:var>
                <v:var name="LinIfLinErrorCalloutName" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            If enabled this configuration parameter defines an external user function which is called in case
                            Lin_GetStatus() returns LIN_TX_HEADER_ERROR, LIN_TX_ERROR or LIN_RX_ERROR.
                            If disabled, the user callout is not called.
                          &lt;/p&gt;
                          &lt;p&gt;
                            &lt;strong&gt;
                              The signature of the callout depends on the configuration parameter LinIfLinErrorCalloutStatusForward.
                            &lt;/strong&gt;
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="45babc35-0c38-4145-8edb-6a05f9cb71e2"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="LinIfLinErrorCalloutStatusForward" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          If ENABLED, this configuration parameter alters the signature of the error callout from
                          &lt;p&gt;
                            &lt;strong&gt;void functionName(NetworkHandleType ComMChannel),&lt;/strong&gt;
                          &lt;/p&gt;
                          to
                          &lt;p&gt;
                            &lt;strong&gt;void functionName(NetworkHandleType ComMChannel, Lin_StatusType Status),&lt;/strong&gt;
                          &lt;/p&gt;
                          where functionName is the name of the configured callout function (LinIfLinErrorCalloutName),
                          ComMChannel identifies the affected Lin channel according to the ComM channel configuration.
                          The Status parameter is forwarded as returned by Lin_GetStatus().
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="d63c76e0-657c-45de-b00b-d5cccc3899f5"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="node:exists(../LinIfLinErrorCalloutName)"/>
                </v:var>
                <v:var name="LinIfLinErrorCalloutHeaderFile" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            This configuration parameter specifies the name of the header file which
                            contains the callout function declaration of the function configured with LinIfLinErrorCalloutName.
                          &lt;/p&gt;
                          &lt;p&gt;
                            &lt;strong&gt;
                              Please note that if LinIfLinErrorCalloutName is enabled, no Det calls with error code LINIF_E_RESPONSE are performed
                              in the above mentioned error cases.
                            &lt;/strong&gt;
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="node:exists(../LinIfLinErrorCalloutName)"/>
                  <a:da name="INVALID" type="XPath" expr="node:value(.) = &apos;&apos;" 
                        true="LinIfLinErrorCalloutHeaderFile must contain a valid header file name"/>
                </v:var>
                <v:var name="LinIfLinSuccessCalloutName" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            If enabled this configuration parameter defines an external user function which is called in case
                            Lin_GetStatus() returns LIN_RX_OK or LIN_TX_OK.
                            If disabled, the user callout is not called.
                          &lt;/p&gt;
                          &lt;p&gt;
                            &lt;strong&gt;
                              The signature of the callout depends on the configuration parameter LinIfLinSuccessCalloutStatusForward.
                            &lt;/strong&gt;
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="b0cf2fcb-8fb7-4bbd-97f0-9469f6768003"/>
                  <a:da name="ENABLE" value="false"/>
                </v:var>
                <v:var name="LinIfLinSuccessCalloutStatusForward" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          If ENABLED, this configuration parameter alters the signature of the error callout from
                          &lt;p&gt;
                            &lt;strong&gt;void functionName(NetworkHandleType ComMChannel),&lt;/strong&gt;
                          &lt;/p&gt;
                          to
                          &lt;p&gt;
                            &lt;strong&gt;void functionName(NetworkHandleType ComMChannel, Lin_StatusType Status),&lt;/strong&gt;
                          &lt;/p&gt;
                          where functionName is the name of the configured callout function (LinIfLinSuccessCalloutName),
                          ComMChannel identifies the affected Lin channel according to the ComM channel configuration.
                          The Status parameter is forwarded as returned by Lin_GetStatus().
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="18fbce1e-7f02-47eb-992c-7be297aae69f"/>
                  <a:da name="DEFAULT" value="DISABLE"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="node:exists(../LinIfLinSuccessCalloutName)"/>
                </v:var>
                <v:var name="LinIfLinSuccessCalloutHeaderFile" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            This configuration parameter specifies the name of the header file which
                            contains the callout function declaration of the function configured with LinIfLinSuccessCalloutName.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="0e44540a-51a8-4de7-bdb1-102f9415ae6e"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="node:exists(../LinIfLinSuccessCalloutName)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="text:match(.,&apos;^\w+\.h$&apos;)" 
                        false="LinIfLinSuccessCalloutHeaderFile must contain a valid header file name"/>
                </v:var>
                <v:var name="LinIfMapChannelIdDirect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;ul&gt;
                            &lt;li&gt;
                             &lt;strong&gt;Map the LinIf channels to the Lin channels directly.&lt;/strong&gt;
                            &lt;/li&gt;
                            &lt;li&gt;
                             TRUE: Map the channels directly.
                            &lt;/li&gt;
                            &lt;li&gt;
                             FALSE: The channels are not mapped directly.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="LinIfMapComMChannelIdDirect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;ul&gt;
                            &lt;li&gt;
                             &lt;strong&gt;Map the LinIf channels to the COM channels directly.&lt;/strong&gt;
                            &lt;/li&gt;
                            &lt;li&gt;
                             TRUE: Map the channels directly.
                            &lt;/li&gt;
                            &lt;li&gt;
                             FALSE: The channels are not mapped directly.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="LinIfMaxChannels" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;ul&gt;
                            &lt;li&gt;
                             &lt;strong&gt;Maximum number of LinIf channels &lt;/strong&gt;
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="LinIfMaxEventTriggeredFrames" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;ul&gt;
                            &lt;li&gt;
                             &lt;strong&gt;Maximum number of Event triggered frames &lt;/strong&gt;
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="LinIfMaxTxPdus" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;ul&gt;
                            &lt;li&gt;
                             &lt;strong&gt;Maximum number of TxPdus &lt;/strong&gt;
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="LinIfRelocatablePbcfgEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Enables/disable support for relocatable postbuild configuration.
                          &lt;ul&gt;
                          &lt;li&gt;True: Postbuild configuration relocatable in memory.&lt;/li&gt;
                          &lt;li&gt;False: Postbuild configuration not relocatable in memory.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(node:contains(node:refs(as:modconf(&apos;PbcfgM&apos;)/PbcfgMBswModules/*/PbcfgMBswModuleRef), as:modconf(&apos;LinIf&apos;)) = &apos;true&apos;)" 
                        true="false" false="true"/>
                </v:var>
                <v:var name="LinIfMirroringOnMultiCoreSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          States if Mirroring on MultiCore is enabled for the LIN Interface or not. 
                          The reason for this parameter is to route the call from outside
                          of LIN Interface to direct calls of the APIs, in case of no MultiCore
                          or to SchM calls, in case of MultiCore.
                          It is only used in case of Bus Mirroring support enabled.
                          (LinIfBusMirroringSupported is set to true)
                          &lt;ul&gt;
                          &lt;li&gt;True:Mirroring on MultiCore is enabled for LIN.&lt;/li&gt;
                          &lt;li&gt;False: Mirroring MultiCore is not enabled for LIN.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../LinIfBusMirroringSupported = &apos;true&apos;)"/>
                </v:var>
                <v:var name="LinIfMirrorToCDDReportingEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;States if frames are mirrored to the Mirror module or to a specific CDD.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: Reporting to CDD&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: Reporting to Mirror&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../LinIfBusMirroringSupported = &apos;true&apos;)"/>
                </v:var>
                <v:var name="LinIfMirrorToCDDReportingFunctionName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Function name for CDD reporting.&lt;/p&gt;
                          &lt;p&gt;Example: Cdd_ReportLinFrame&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../LinIfMirrorToCDDReportingEnable = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:regex 
                              false="Function name should only contain letters, numbers or _" 
                              expr="[0-9a-zA-Z_]{1,32}"/>
                  </a:da>
                </v:var>
                <v:var name="LinIfMirrorToCDDReportingHeader" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Header containing the Cdd function for reporting.&lt;/p&gt;
                          &lt;p&gt;Example: Cdd.h&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../LinIfMirrorToCDDReportingEnable = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" expr="node:value(.) = &apos;&apos;" 
                        true="LinIfMirrorToCDDReportingHeader must contain a valid header file name"/>
                </v:var>
                <v:ctr name="ReportToDem" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        Production error handling
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Production error handling"/>
                  <a:a name="TAB" value="Optimization"/>
                  <a:da name="TITLE" value="Production error handling"/>
                  <v:var name="LinIfTxBitErrorReportToDem" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Selects the handling of the production error LINIF_E_TX_BIT_ERROR.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;DEM: The error is reported to the Diagnostic Event Manager (Dem).&lt;/li&gt;
                              &lt;li&gt;DET: The error is reported to the Default Error Tracer (Det) if enabled.&lt;/li&gt;
                              &lt;li&gt;DISABLE: The error is not reported at all.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Setting this parameter to a value of DISABLE reduces the ROM consumption of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                                &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                                Setting this parameter to a value of DISABLE reduces the execution time of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="LINIF_E_TX_BIT_ERROR report to"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:a name="UUID" 
                         value="eca27c19-9e9f-4574-b0c6-674b04ba7160"/>
                    <a:da name="DEFAULT" value="DISABLE"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;DEM&apos;) and (count(as:modconf(&apos;LinIf&apos;)[1]/LinIfGlobalConfig/*[1]/LinIfChannel/*/LinIfFrame/*[node:exists(LinIfFrameDemEventParameterRefs/LINIF_E_TX_BIT_ERROR)]) = 0)" 
                          true="There shall be at least one LinIfFrame, which contains a valid reference to the DemEventParameter."/>
                    <a:da name="RANGE">
                      <a:v>DEM</a:v>
                      <a:v>DET</a:v>
                      <a:v>DISABLE</a:v>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. = &apos;DET&apos;) and (../../LinIfDevErrorDetect = &apos;false&apos;)" 
                          true="LinIfDevErrorDetect is set to false which means that production errors cannot be reported to the default error tracer (Det)."/>
                  </v:var>
                  <v:var name="LinIfTxBitErrorDebounceMethod" 
                         type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                          If a production error is reported towards Dem, LinIfTxBitErrorDebounceMethod defines the
                          whether Event debouncing is performed in Dem (DEM) or not at all (INTERNAL).
                          &lt;/p&gt;
                          &lt;p&gt;
                          In case &apos;DEM&apos; is selected, LinIf always reports status PRE-PASSED/PRE-FAILED to Dem _ReportErrorStatus().
                          &lt;/p&gt;
                          &lt;p&gt;
                          In case &apos;INTERNAL&apos; is selected, LinIf always reports status PASSED/FAILED to Dem _ReportErrorStatus().
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_TX_BIT_ERROR Dem Debouncing method"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:da name="DEFAULT" value="INTERNAL"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../LinIfTxBitErrorReportToDem = &apos;DEM&apos;"/>
                    <a:da name="RANGE">
                      <a:v>DEM</a:v>
                      <a:v>INTERNAL</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="LinIfTxBitErrorDemDetErrorId" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          If a production error is reported towards the Det, LinIfTxBitErrorDemDetErrorId defines the
                          error ID which is reported towards the Det.
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_TX_BIT_ERROR Dem To Det error ID"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:da name="DEFAULT" value="9"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../LinIfTxBitErrorReportToDem = &apos;DET&apos;"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=255"/>
                      <a:tst expr="&gt;=9"/>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="((../LinIfRxChecksumErrorReportToDem = &apos;DET&apos;) and                                    (../LinIfRxChecksumErrDemDetErrorId = .)) or                                    ((../LinIfRxNoRespErrorReportToDem = &apos;DET&apos;) and                                    (../LinIfRxNoRespErrDemDetErrorId = .))" 
                          true="The configured Det error ID is already used! (not unique)"/>
                  </v:var>
                  <v:var name="LinIfRxChecksumErrorReportToDem" 
                         type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Selects the handling of the production error LINIF_E_RX_CHECKSUM_ERROR.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;DEM: The error is reported to the Diagnostic Event Manager (Dem).&lt;/li&gt;
                              &lt;li&gt;DET: The error is reported to the Default Error Tracer (Det) if enabled.&lt;/li&gt;
                              &lt;li&gt;DISABLE: The error is not reported at all.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Setting this parameter to a value of DISABLE reduces the ROM consumption of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                                &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                                Setting this parameter to a value of DISABLE reduces the execution time of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_RX_CHECKSUM_ERROR report to"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:a name="UUID" 
                         value="81f4c184-193e-4eec-a048-4a58f88cca62"/>
                    <a:da name="DEFAULT" value="DISABLE"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;DEM&apos;) and (count(as:modconf(&apos;LinIf&apos;)[1]/LinIfGlobalConfig/*[1]/LinIfChannel/*/LinIfFrame/*[node:exists(LinIfFrameDemEventParameterRefs/LINIF_E_RX_CHECKSUM_ERROR)]) = 0)" 
                          true="There shall be at least one LinIfFrame, which contains a valid reference to the DemEventParameter."/>
                    <a:da name="RANGE">
                      <a:v>DEM</a:v>
                      <a:v>DET</a:v>
                      <a:v>DISABLE</a:v>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. = &apos;DET&apos;) and (../../LinIfDevErrorDetect = &apos;false&apos;)" 
                          true="LinIfDevErrorDetect is set to false which means that production errors cannot be reported to the default error tracer (Det)."/>
                  </v:var>
                  <v:var name="LinIfRxChecksumDebounceMethod" 
                         type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                          If a production error is reported towards the Dem, LinIfRxChecksumDebounceMethod defines the
                          whether Event debouncing is performed in Dem (DEM) or not at all (INTERNAL).
                          &lt;/p&gt;
                          &lt;p&gt;
                          In case &apos;DEM&apos; is selected, LinIf always reports status PRE-PASSED/PRE-FAILED to Dem _ReportErrorStatus().
                          &lt;/p&gt;
                          &lt;p&gt;
                          In case &apos;INTERNAL&apos; is selected, LinIf always reports status PASSED/FAILED to Dem _ReportErrorStatus().
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_RX_CHECKSUM_ERROR Dem Debouncing method"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:da name="DEFAULT" value="INTERNAL"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../LinIfRxChecksumErrorReportToDem = &apos;DEM&apos;"/>
                    <a:da name="RANGE">
                      <a:v>DEM</a:v>
                      <a:v>INTERNAL</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="LinIfRxChecksumErrDemDetErrorId" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          If a production error is reported towards Det, LinIfRxChecksumErrDemDetErrorId defines the
                          error ID which is reported towards the Det.
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_RX_CHECKSUM_ERROR Dem To Det error ID"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:da name="DEFAULT" value="9"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../LinIfRxChecksumErrorReportToDem = &apos;DET&apos;"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=255"/>
                      <a:tst expr="&gt;=9"/>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="((../LinIfTxBitErrorReportToDem = &apos;DET&apos;) and                                    (../LinIfTxBitErrorDemDetErrorId = .)) or                                    ((../LinIfRxNoRespErrorReportToDem = &apos;DET&apos;) and                                    (../LinIfRxNoRespErrDemDetErrorId = .))" 
                          true="The configured Det error ID is already used! (not unique)"/>
                  </v:var>
                  <v:var name="LinIfRxNoRespErrorReportToDem" 
                         type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Selects the handling of the production error LINIF_E_RX_NO_RESPONSE_ERROR.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;DEM: The error is reported to the Diagnostic Event Manager (Dem).&lt;/li&gt;
                              &lt;li&gt;DET: The error is reported to the Default Error Tracer (Det) if enabled.&lt;/li&gt;
                              &lt;li&gt;DISABLE: The error is not reported at all.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Setting this parameter to a value of DISABLE reduces the ROM consumption of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                                &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                                Setting this parameter to a value of DISABLE reduces the execution time of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_RX_NO_RESPONSE_ERROR report to"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:a name="UUID" 
                         value="8d33cc70-11a8-4327-8d13-9465a34a2b9a"/>
                    <a:da name="DEFAULT" value="DISABLE"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;DEM&apos;) and (count(as:modconf(&apos;LinIf&apos;)[1]/LinIfGlobalConfig/*[1]/LinIfChannel/*/LinIfFrame/*[node:exists(LinIfFrameDemEventParameterRefs/LINIF_E_RX_NO_RESPONSE_ERROR)]) = 0)" 
                          true="There shall be at least one LinIfFrame, which contains a valid reference to the DemEventParameter."/>
                    <a:da name="RANGE">
                      <a:v>DEM</a:v>
                      <a:v>DET</a:v>
                      <a:v>DISABLE</a:v>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="(. = &apos;DET&apos;) and (../../LinIfDevErrorDetect = &apos;false&apos;)" 
                          true="LinIfDevErrorDetect is set to false which means that production errors cannot be reported to the default error tracer (Det)."/>
                  </v:var>
                  <v:var name="LinIfRxNoRespDebounceMethod" type="ENUMERATION">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                          If a production error is reported towards the Dem, LinIfRxNoRespDebounceMethod defines the
                          whether Event debouncing is performed in Dem (DEM) or not at all (INTERNAL).
                          &lt;/p&gt;
                          &lt;p&gt;
                          In case &apos;DEM&apos; is selected, LinIf always reports status PRE-PASSED/PRE-FAILED to Dem _ReportErrorStatus().
                          &lt;/p&gt;
                          &lt;p&gt;
                          In case &apos;INTERNAL&apos; is selected, LinIf always reports status PASSED/FAILED to Dem _ReportErrorStatus().
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_RX_NO_RESPONSE_ERROR Dem Debouncing method"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:da name="DEFAULT" value="INTERNAL"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../LinIfRxNoRespErrorReportToDem = &apos;DEM&apos;"/>
                    <a:da name="RANGE">
                      <a:v>DEM</a:v>
                      <a:v>INTERNAL</a:v>
                    </a:da>
                  </v:var>
                  <v:var name="LinIfRxNoRespErrDemDetErrorId" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          If a production error is reported towards the Det, LinIfRxNoRespErrDemDetErrorId defines the
                          error ID which is reported towards the Det.
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" 
                         value="LINIF_E_RX_NO_RESPONSE_ERROR Dem To Det error ID"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="TAB" value="Optimization"/>
                    <a:da name="DEFAULT" value="9"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="../LinIfRxNoRespErrorReportToDem = &apos;DET&apos;"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=255"/>
                      <a:tst expr="&gt;=9"/>
                    </a:da>
                    <a:da name="WARNING" type="XPath" 
                          expr="((../LinIfTxBitErrorReportToDem = &apos;DET&apos;) and                                    (../LinIfTxBitErrorDemDetErrorId = .)) or                                    ((../LinIfRxChecksumErrorReportToDem = &apos;DET&apos;) and                                    (../LinIfRxChecksumErrDemDetErrorId = .))" 
                          true="The configured Det error ID is already used! (not unique)"/>
                  </v:var>
                </v:ctr>
                <v:lst name="LinIfCddFunctionsUL" type="MAP">
                  <a:a name="LABEL" value="Functions used in UL Cdd"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../LinIfUpperLayerCddSupported"/>
                  <v:ctr name="LinIfCddFunctionsUL" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;List of ALL the used functions from the configured UL Cdds
                               which are used instead of PduR.&lt;/p&gt;
                            &lt;p&gt;Their respective configuration elements are PB (as implemented) and
                            these need to be enumerated latest at LinkTime.&lt;/p&gt;
                            &lt;p&gt;The function name can be calculated automatically if the Cdd and the Cdd Function Type are specified.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="NAME_PATTERN" value="UpperLayerCddFunction_?"/>
                    <a:a name="UUID" 
                         value="ECUC:8baef09a-f048-4a50-9d0f-aa2fa37b6806"/>
                    <v:var name="CddName" type="ENUMERATION">
                      <a:a name="COLUMN_TITLE" value="Cdd"/>
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Name of the Cdd.&lt;/p&gt;
                              &lt;p&gt;The list of possible choices is populated with the entries of LinIfPublicCddHeaderFile.&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="ECUC:8a35f255-9c7b-421d-9b33-24c7194d3fc9"/>
                      <a:da name="RANGE" type="XPath" 
                            expr="text:order(node:foreach(as:paths(as:modconf(&apos;Cdd&apos;)[node:exists(CddComStackContribution)]/../..), &apos;path&apos;, &apos;substring($path, 2)&apos;))"/>
                    </v:var>
                    <v:var name="CddFunctionType" type="ENUMERATION">
                      <a:a name="COLUMN_TITLE" value="Cdd Function Type"/>
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Type of the function used in the PduR surrogate Cdd&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="ECUC:6af2265e-b295-4d0c-8081-c38dab55326c"/>
                      <a:da name="DEFAULT" value="RxIndication"/>
                      <a:da name="RANGE">
                        <a:v>RxIndication</a:v>
                        <a:v>TriggerTransmit</a:v>
                        <a:v>TxConfirmation</a:v>
                      </a:da>
                    </v:var>
                    <v:var name="CddFunctionName" type="FUNCTION-NAME">
                      <a:a name="COLUMN_TITLE" value="Cdd Function Name"/>
                      <a:a name="COLUMN_TOOLTIP" 
                           value="Functions used in UL PduR substitue Cdd"/>
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Function name (from the Cdd)&lt;/p&gt;
                              &lt;p&gt;Can be calculated automatically if the Cdd and the Cdd Function Type are specified.&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="ECUC:e521919b-8084-4c17-9444-7d0137bbda79"/>
                      <a:da name="DEFAULT" type="XPath" 
                            expr="node:when(node:empty(../CddName), &apos;EDIT_OR_CALCULATE&apos;, concat(../CddName, &apos;_&apos;, ../CddFunctionType))"/>
                      <a:da name="INVALID" type="Multi">
                        <mt:regex false="Invalid identifier specified." 
                                  expr="[0-9a-zA-Z_]{1,32}"/>
                      </a:da>
                    </v:var>
                  </v:ctr>
                </v:lst>
                <v:lst name="LinIfScheduleTableEndNotificationCallout" 
                       type="MAP">
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../LinIfScheduleTableEndNotificationSupported"/>
                  <v:ctr name="LinIfScheduleTableEndNotificationCallout" 
                         type="IDENTIFIABLE">
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="Link">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="TAB" value="CalloutName"/>
                    <a:a name="UUID" 
                         value="ECUC:027e0e4a-5bf9-4f98-af41-cd4bf02a6669"/>
                    <a:da name="TITLE" 
                          value="End-of-schedule table notification callout"/>
                    <v:var name="LinIfScheduleTableEndNotificationCalloutName" 
                           type="FUNCTION-NAME">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Custom callout name invoked when the last entry of the schedule table is processed.&lt;/p&gt;
                              &lt;p&gt;Declaration is supplied within a &lt;strong&gt;LinIfPublicCddHeaderFile&lt;/strong&gt; entry.&lt;/p&gt;
                              &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                              &lt;ul&gt;
                                &lt;li class=&quot;optimization.config.rom.increase&quot;&gt;
                                  &lt;strong&gt;ROM increase (config):&lt;/strong&gt;
                                  Enabling this parameter increases the ROM consumption of the module configuration.
                                &lt;/li&gt;
                                &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                                  &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                                  Enabling this parameter increases the ROM consumption of the module code.
                                &lt;/li&gt;
                                &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                  &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                  Enabling this parameter increases the execution time of the module code.
                                &lt;/li&gt;
                              &lt;/ul&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="Link">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="UUID" 
                           value="ECUC:4ca76540-6b33-4db4-b61f-6cccda73d497"/>
                      <a:da name="INVALID" type="Multi">
                        <mt:length>
                          <mt:tst expr="&gt;=1"/>
                          <mt:tst expr="&lt;=32"/>
                        </mt:length>
                        <mt:regex false="Invalid identifier specified." 
                                  expr="[0-9a-zA-Z_]+"/>
                        <mt:xpath>
                          <mt:tst 
                                  false="No header file specified in LinIfPublicCddHeaderFile." 
                                  expr="node:exists(../../../LinIfPublicCddHeaderFile/*)"/>
                          <mt:tst false="Identifier is not unique." 
                                  expr="text:uniq(../../*/LinIfScheduleTableEndNotificationCalloutName, node:value(.))"/>
                        </mt:xpath>
                      </a:da>
                    </v:var>
                  </v:ctr>
                </v:lst>
                <v:var name="LinIfResponseErrorSignalChangedCallout" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          This parameter contains the name of the callout function that is called after a response error signal change.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:f7a53ed6-d2bc-402b-9202-c378c93f69a6"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:regex 
                              false="Invalid function name specified for LinIfResponseErrorSignalChangedCallout" 
                              expr="[a-zA-Z_][a-zA-Z0-9_]{1,31}"/>
                  </a:da>
                </v:var>
                <v:var name="LinIfSaveConfigurationCallout" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This parameter contains the name of the callout function that is called when a save configuration node configuration command is processed by this slave node.&lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;The service is only supported when this parameter is configured.&lt;/strong&gt;&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:27d3d6de-8a26-4a13-b89d-5ea56f75ec7d"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:regex 
                              false="Invalid function name specified for LinIfSaveConfigurationCallout" 
                              expr="[a-zA-Z_][a-zA-Z0-9_]{1,31}"/>
                  </a:da>
                </v:var>
              </v:ctr>
              <v:ctr name="LinIfEbGeneral" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                          &lt;p&gt;Container for EB specific common configurations.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                </a:a>
                <v:ctr name="LinIfEbGeneralBswmdImplementation" 
                       type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Container for configuring multiple Lin Drivers/Transceivers to be used by the LinIf
                          for determining the vendorId and vendorApiInfix of a specific driver/transceiver
                          from the corresponding BSWMD.
                          DISABLED = vendorId and vendorApiInfix of all Lin Drivers/Transceiver are
                          determined via CommonPublishedInformation.
                          ENABLED = vendorId and vendorApiInfix of configured Lin Drivers/Transceiver are
                          determined via BSWMD and for not configured Lin Drivers/Transceiver via
                          CommonPublishedInformation.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="TAB" value="EB General"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="node:exists(.) and node:value(./../../LinIfGeneral/LinIfMultipleDriversSupported) = &apos;false&apos; and node:value(./../../LinIfGeneral/LinIfDriverAPIInfixEnable) = &apos;false&apos; and                                                 (   (node:value(./../../LinIfGeneral/LinIfTrcvDriverSupported) = &apos;false&apos;)                                                  or (node:value(./../../LinIfGeneral/LinIfTrcvDriverSupported) = &apos;true&apos; and node:value(./../../LinIfGeneral/LinIfMultipleTrcvDriverSupported) = &apos;false&apos; and node:value(./../../LinIfGeneral/LinIfSingleLinTrcvAPIInfixEnable) = &apos;false&apos;))" 
                        true="LinIfEbGeneralBswmdImplementation cannot be active if none of LinIfMultipleDriversSupported, LinIfDriverAPIInfixEnable, LinIfMultipleTrcvDriverSupported and LinIfSingleLinTrcvAPIInfixEnable is true."/>
                  <v:lst name="LinIfEbGeneralBswmdImplementationRefs" 
                         type="MAP">
                    <a:a name="COLUMNS">
                      <a:v>LinIfDrvTrcvRef</a:v>
                      <a:v>LinIfDrvTrcvBswImplementationRef</a:v>
                    </a:a>
                    <a:a name="TAB" value="EB General"/>
                    <a:da name="MIN" value="1"/>
                    <v:ctr name="LinIfEbGeneralBswmdImplementationRefs" 
                           type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Container to configure a specific Lin Driver/Transceiver that shall
                              indicate the vendorId and vendorApiInfix from its BSWMD.&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v mclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="LinIfEbGeneralBswmdReferences"/>
                      <a:a name="TAB" value="EB General"/>
                      <v:ref name="LinIfDrvTrcvRef" type="CHOICE-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Reference that points to the used Lin driver/transceiver.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ECUC:8715c30d-96ef-473d-bad1-16e8692c606c"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="LinIfDrvTrcvRef must reference a valid Lin/LinTrcv."/>
                          <a:tst 
                                 expr="not(text:uniq(./../../*/LinIfDrvTrcvRef, .))" 
                                 true="LinIfDrvTrcvRef must be unique."/>
                        </a:da>
                        <a:da name="REF">
                          <a:v>ASPathDataOfSchema:/AUTOSAR/EcucDefs/Lin</a:v>
                          <a:v>ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinTrcv</a:v>
                        </a:da>
                      </v:ref>
                      <v:ref name="LinIfDrvTrcvBswImplementationRef" 
                             type="FOREIGN-REFERENCE">
                        <a:a name="DESC" 
                             value="EN: Reference to the BswImplementation of the underlying driver/transceiver which contains the vendorId and vendorApiInfix."/>
                        <a:a name="DESTINATION-TYPE" 
                             value="ASTyped:BSW-IMPLEMENTATION"/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="false"/>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="LinIfDrvTrcvBswImplementationRef must reference a valid BswImplementation."/>
                          <a:tst 
                                 expr="not(text:uniq(./../../*/LinIfDrvTrcvBswImplementationRef, .))" 
                                 true="LinIfDrvTrcvBswImplementationRef must be unique."/>
                        </a:da>
                        <a:da name="REF" value="ASTyped:BswImplementation"/>
                      </v:ref>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:ctr>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/LinIf"/>
              <v:lst name="LinIfGlobalConfig" 
                     type="MULTIPLE-CONFIGURATION-CONTAINER">
                <a:da name="MAX" value="1"/>
                <a:da name="MIN" value="1"/>
                <v:ctr name="LinIfGlobalConfig" 
                       type="MULTIPLE-CONFIGURATION-CONTAINER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This container contains the global configuration parameters of the
                          LinIf.&lt;/p&gt;
                          &lt;p&gt;It is a MultipleConfigurationContainer, i.e. this container and its
                          sub-containers exit once per configuration set.&lt;/p&gt;
                          &lt;p&gt;Please note that only one configuration is supported.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="UUID" 
                       value="ECUC:25d2741f-e24d-4278-923e-13bb5b219004"/>
                  <v:lst name="LinIfChannel" type="MAP">
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="num:i(count(*)) &gt; ../../../LinIfGeneral/LinIfMaxChannels" 
                             true="The number of channels configured is greater than the configuration variable LinIfGeneral/LinIfMaxChannels."/>
                      <a:tst 
                             expr="(1 &lt; num:i(count(node:refs(as:modconf(&apos;LinIf&apos;)/LinIfGlobalConfig/*[1]/LinIfChannel/*/LinIfTransceiverDrvConfig/LinIfTrcvIdRef)/../..))) and node:value(as:modconf(&apos;LinIf&apos;)/LinIfGeneral/LinIfMultipleTrcvDriverSupported) = &apos;false&apos;" 
                             true="Multiple Lin Transceivers are referenced, LinIfMultipleTrcvDriverSupported has to be ENABLED."/>
                    </a:da>
                    <a:da name="MIN" value="1"/>
                    <a:da name="WARNING" type="XPath">
                      <a:tst 
                             expr="((../../../LinIfGeneral/LinIfCheckWakeupSupported = &apos;false&apos;) or node:containsValue(node:refs(*/LinIfChannelRef)/LinChannelWakeupSupport,true()) or                           node:containsValue(node:refs(*/LinIfTransceiverDrvConfig/LinIfTrcvIdRef)/../../LinTrcvGeneral/LinTrcvWakeUpSupport,true()) )" 
                             false="LinIfCheckWakeupSupported is enabled but there is no LIN driver or transceiver configured with wakeup support!"/>
                      <a:tst expr="num:i(count(*)) = 0" 
                             true="Current global configuration of the LinIf must have at least one Channel."/>
                      <a:tst 
                             expr="(2 &gt; num:i(count(node:refs(as:modconf(&apos;LinIf&apos;)/LinIfGlobalConfig/*[1]/LinIfChannel/*/LinIfTransceiverDrvConfig/LinIfTrcvIdRef)/../..))) and node:value(as:modconf(&apos;LinIf&apos;)/LinIfGeneral/LinIfTrcvDriverSupported) = &apos;true&apos; and node:value(as:modconf(&apos;LinIf&apos;)/LinIfGeneral/LinIfMultipleTrcvDriverSupported) = &apos;true&apos;" 
                             true="LinIfMultipleTrcvDriverSupported is ENABLED, at least 2 Lin Transceivers should be configured."/>
                    </a:da>
                    <v:ctr name="LinIfChannel" type="IDENTIFIABLE">
                      <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                      <a:a name="UUID" 
                           value="ECUC:acb64525-220b-48db-b6f0-5bb8fdb46ff1"/>
                      <a:da name="INVALID" type="XPath">
                        <a:tst 
                               expr="(node:refvalid(LinIfChannelRef)) and                                (LinIfChannelId != (node:ref(LinIfChannelRef)/LinChannelId)) and                                (../../../../LinIfGeneral/LinIfMapChannelIdDirect = &apos;true&apos;)" 
                               true="The LinIf channel Id configured doesn&apos;t match with the Lin channels Id. This is not allowed if direct channel mapping is enabled (parameter: LinIfMapChannelIdDirect)."/>
                        <a:tst 
                               expr="(node:refvalid(LinIfComMNetworkHandleRef)) and                                (LinIfChannelId != as:ref(LinIfComMNetworkHandleRef)/ComMChannelId) and                                (../../../../LinIfGeneral/LinIfMapComMChannelIdDirect = &apos;true&apos;)" 
                               true="Parameter ComMChannelId of referenced ComM channel does not match LinIfChannelId. This is not allowed if direct channel mapping is enabled (parameter: LinIfMapComMChannelIdDirect)."/>
                        <a:tst 
                               expr="(count(LinIfScheduleTable/*[@name != &apos;NULL_SCHEDULE&apos;]/LinIfEntry/*) &gt; 0) and                                (node:refvalid(LinIfChannelRef)) and                                (node:exists(as:modconf(&apos;LinSM&apos;)/LinSMConfigSet//LinSMChannel/*                                               [LinSMComMNetworkHandleRef = node:current()/LinIfComMNetworkHandleRef]/LinSMConfirmationTimeout                                            )                                ) and                                ((as:modconf(&apos;LinSM&apos;)/LinSMConfigSet//LinSMChannel/*                                               [LinSMComMNetworkHandleRef = node:current()/LinIfComMNetworkHandleRef]/LinSMConfirmationTimeout &gt; 0                                 ) and                                 (as:modconf(&apos;LinSM&apos;)/LinSMConfigSet//LinSMChannel/*                                               [LinSMComMNetworkHandleRef = node:current()/LinIfComMNetworkHandleRef]/LinSMConfirmationTimeout * 1000000                                  &lt;                                  (num:i(num:max(node:current()/LinIfScheduleTable/*[@name != &apos;NULL_SCHEDULE&apos;]/LinIfEntry/*/LinIfDelay) * 1000000) +                                   num:i(ceiling(1.4*1000000*(44+10*8) div (as:ref(LinIfChannelRef)/LinChannelBaudRate)))                                  )                                 )                                )" 
                               true="The LinSM confirmation timeout for a channel must be greater than the time that a goto-sleep command takes on the bus."/>
                      </a:da>
                      <v:var name="LinIfChannelId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Implementation Type: NetworkHandleType&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="ECUC:0f6b0bda-545e-4531-baa3-9a231615e2f1"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=255"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:ref name="LinIfCddRef" type="CHOICE-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;EN: Reference to the CDD module description. This parameter is only required when LinIfWakeupConfirmationUL, LinIfScheduleRequestConfirmationUL, and/or LinIfGotoSleepConfirmationUL is set to CDD.&lt;/p&gt;
                                &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li class=&quot;optimization.config.rom.increase&quot;&gt;
                                    &lt;strong&gt;ROM increase (config):&lt;/strong&gt;
                                    Enabling this parameter increases the ROM consumption of the
                                    module configuration.
                                  &lt;/li&gt;
                                  &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                                    &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                                    Enabling this parameter increases the ROM consumption of the
                                    module code.
                                  &lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PreCompile">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="UUID" 
                             value="ECUC:27d8e1c6-76b5-4b60-97a6-6e70607c32d0"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="If enabled, LinIfCddRef must reference a Cdd module with a configured CddComStackContribution container."/>
                        <a:da name="RANGE" type="XPath" 
                              expr="node:paths(/AUTOSAR/TOP-LEVEL-PACKAGES/*/ELEMENTS/Cdd[@type=&apos;MODULE-CONFIGURATION&apos; and node:exists(CddComStackContribution)])"/>
                      </v:ref>
                      <v:ref name="LinIfChannelRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Reference to the used channel in Lin.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ECUC:8715c30d-96ef-473d-bad1-16e8692c606c"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="LinIfChannelRef must reference a valid LinChannel."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Lin/LinGlobalConfig/LinChannel"/>
                        <a:da name="WARNING" type="XPath" 
                              expr="(node:refvalid(.)) and (node:refvalid(../LinIfComMNetworkHandleRef))                                   and (as:ref(.)/LinChannelId != as:ref(../LinIfComMNetworkHandleRef)/ComMChannelId)" 
                              true="Parameter LinIfChannelId does not match the LinChannelId of referenced Lin channel and/or the ComMChannelId of referenced ComM channel. This will result in code and configuration size overhead."/>
                      </v:ref>
                      <v:ref name="LinIfComMNetworkHandleRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Unique handle to identify one certain LIN network. Reference to one
                                of the network handles configured for the ComM.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="Link">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ECUC:d5db781e-486d-447c-93ff-e6a9cb25adcf"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="LinIfComMNetworkHandleRef must reference a valid ComMChannel."/>
                          <a:tst 
                                 expr="(node:refvalid(.) and not (as:ref(.)/ComMBusType = &apos;COMM_BUS_TYPE_LIN&apos;))" 
                                 true="The referenced ComMChannel must be of the ComMBusType &apos;COMM_BUS_TYPE_LIN&apos;"/>
                          <a:tst 
                                 expr="count(../../*/LinIfComMNetworkHandleRef[.=node:current()]) &gt; 1" 
                                 true="Each ComMChannel must not be referenced more than once."/>
                          <a:tst 
                                 expr="node:refvalid(.) and (../LinIfNodeType = &apos;LinIfSlave&apos;) and (node:ref(.)/ComMNetworkManagement/ComMNmVariant != &apos;SLAVE_ACTIVE&apos;)" 
                                 true="For slaves the referenced ComMChannel must be of NmVariant &apos;SLAVE_ACTIVE&apos;"/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel"/>
                      </v:ref>
                      <v:var name="LinIfBusIdleTimeoutPeriod" type="FLOAT">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Bus idle timeout in seconds.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:e400f808-f0af-4f38-aa60-28228a8ce078"/>
                        <a:da name="DEFAULT" value="4.0"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=65535"/>
                            <mt:tst expr="&gt;=0.1"/>
                          </mt:range>
                          <mt:xpath 
                                    true="The LinIfBusIdleTimeoutPeriod can not be represented as a uint16 value. LinIfBusIdleTimeoutPeriod divided by the LinIfTimeBase must not exceed 65535" 
                                    expr="(((. * 1000000) div (../../../LinIfTimeBase * 1000000)) &gt; 65535)"/>
                        </a:da>
                        <a:da name="WARNING" type="XPath">
                          <a:tst expr="num:f(.) &gt; 10" 
                                 true="The LinIfBusIdleTimeoutPeriod has exceeded the limit of 10s allowed by the standard (ISO 17987-2:2016(E))"/>
                          <a:tst 
                                 expr="num:i((. * 1000000) mod (../../../LinIfTimeBase * 1000000)) != 0" 
                                 true="LinIfBusIdleTimeoutPeriod is not a multiple of the main function cycle time. The number of ticks for the timeout will be rounded up."/>
                        </a:da>
                      </v:var>
                      <v:var name="LinIfMaxFrameCnt" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Maximum number of Frames, not counting &lt;tt&gt;SRF&lt;/tt&gt; and &lt;tt&gt;MRF&lt;/tt&gt;.&lt;/p&gt;
                                &lt;p&gt;This parameter is needed only in case the node is a slave.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v mclass="Link">VariantPostBuild</icc:v>
                          <icc:v vclass="Link">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:600ada2e-ed6c-4545-a849-7c9b2c3ae02a"/>
                        <a:da name="DEFAULT" type="XPath" 
                              expr="num:i(count(../LinIfFrame/*[LinIfFrameType != &apos;MRF&apos; and LinIfFrameType != &apos;SRF&apos;]))"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="../LinIfNodeType = &apos;LinIfSlave&apos;"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=65535"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                          <mt:xpath 
                                    false="LinIfMaxFrameCnt must be greater than or equal the number of non-MRF/SRF frames configured." 
                                    expr=". &gt;= count(../LinIfFrame/*[LinIfFrameType != &apos;MRF&apos; and LinIfFrameType != &apos;SRF&apos;])"/>
                        </a:da>
                      </v:var>
                      <v:lst name="LinIfFrame" type="MAP">
                        <a:da name="INVALID" type="XPath">
                          <a:tst 
                                 expr="num:i(count(../../*/LinIfFrame/*[(LinIfFrameType=&apos;UNCONDITIONAL&apos; and LinIfPduDirection=&apos;LinIfTxPdu&apos;)]))  &gt; ../../../../../LinIfGeneral/LinIfMaxTxPdus" 
                                 true="The number of Tx Pdus added in the configuration is greater than the configuration variable LinIfGeneral/LinIfMaxTxPdus."/>
                          <a:tst 
                                 expr="num:i(count(../../*/LinIfFrame/*[(LinIfFrameType=&apos;EVENT_TRIGGERED&apos;)]))  &gt; ../../../../../LinIfGeneral/LinIfMaxEventTriggeredFrames" 
                                 true="The number of Event triggered frames added in the configuration is greater than the configuration variable LinIfGeneral/LinIfMaxEventTriggeredFrames."/>
                          <a:tst 
                                 expr="node:isconsecutive(*/LinIfFrameIndex, 0)" 
                                 false="LinIfFrameIndex must start from 0 and be consecutive."/>
                        </a:da>
                        <a:da name="WARNING" type="XPath" 
                              expr="num:i(count(*)) = 0" 
                              true="A channel must have at least one frame."/>
                        <v:ctr name="LinIfFrame" type="IDENTIFIABLE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  Generic container for all types of LIN frames. The shortName of
                                  this container is used as LinIfFrameName.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <a:a name="UUID" 
                               value="ECUC:1c7be285-63c0-4176-87e9-7af9e12e9593"/>
                          <a:da name="INVALID" type="XPath" 
                                expr="../../LinIfNodeType = &apos;LinIfSlave&apos; and not(node:exists(LinIfFrameIndex)) and (LinIfFrameType != &apos;MRF&apos;) and (LinIfFrameType != &apos;SRF&apos;)" 
                                true="LinIfFrameIndex has to be set for Slave nodes (except for MRF/SRF)."/>
                          <v:var name="LinIfChecksumType" type="ENUMERATION">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Type of checksum that the frame is using.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:1c4bccbb-94d9-47a9-8818-ab3f131f67a4"/>
                            <a:da name="DEFAULT" value="CLASSIC"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="(../LinIfFrameType = &apos;MRF&apos; or ../LinIfFrameType = &apos;SRF&apos;) and not (. = &apos;CLASSIC&apos;)" 
                                  true="Frames of LinIfFrameType &apos;MRF&apos; or &apos;SRF&apos; shall always use LinIfChecksumType &apos;CLASSIC&apos;"/>
                            <a:da name="RANGE">
                              <a:v>CLASSIC</a:v>
                              <a:v>ENHANCED</a:v>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfFrameId" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    ID of the LIN frame. The Protected ID including
                                    parity is calculated by the generation tool.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v mclass="PostBuild">VariantPostBuild</icc:v>
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTMULTIPLICITY" 
                                 value="true"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:8b81ef22-eb65-4119-842a-05a565724755"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Multi">
                              <mt:range>
                                <mt:tst expr="&lt;=63"/>
                                <mt:tst expr="&gt;=0"/>
                              </mt:range>
                              <mt:xpath false="LinIfFrameId has to be unique" 
                                        expr="text:uniq(../../*/LinIfFrameId, .)"/>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfFrameIndex" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    PID index of the frame. This index is used in the AssignFrameIdentifierRange
                                    node configuration service to identify the frame(s) to which a new PID shall
                                    be assigned.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v mclass="PostBuild">VariantPostBuild</icc:v>
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTMULTIPLICITY" 
                                 value="true"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:5d671382-2523-474e-92a8-139d50689205"/>
                            <a:da name="DEFAULT" type="XPath" expr="../@index"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="Multi">
                              <mt:range>
                                <mt:tst expr="&lt;=63"/>
                                <mt:tst expr="&gt;=0"/>
                              </mt:range>
                              <mt:xpath false="LinIfFrameIndex has to be unique" 
                                        expr="text:uniq(../../*/LinIfFrameIndex, .)"/>
                            </a:da>
                          </v:var>
                          <v:ctr name="LinIfFixedFrameSdu" type="IDENTIFIABLE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;In case this is a fixed frame this is the SDU (response).
                                    This container represent an eight byte array.
                                    The Byte order shall be MSB first.&lt;/p&gt;
                                    This container is only available for the following
                                    LinIfFrameTypes:
                                    &lt;ul&gt;
                                      &lt;li&gt;ASSIGN&lt;/li&gt;
                                      &lt;li&gt;ASSIGN_FRAME_ID_RANGE&lt;/li&gt;
                                      &lt;li&gt;ASSIGN_NAD&lt;/li&gt;
                                      &lt;li&gt;CONDITIONAL&lt;/li&gt;
                                      &lt;li&gt;FREE&lt;/li&gt;
                                      &lt;li&gt;SAVE_CONFIGURATION&lt;/li&gt;
                                      &lt;li&gt;UNASSIGN&lt;/li&gt;
                                    &lt;/ul&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="TAB" value="LinIfFixedFrameSdu"/>
                            <a:a name="UUID" 
                                 value="ECUC:839c724c-3ce5-4a4f-8258-f9473b61cbd0"/>
                            <a:da name="ENABLE" type="XPath" 
                                  expr="((../LinIfFrameType = &apos;ASSIGN&apos;) or                                         (../LinIfFrameType = &apos;ASSIGN_FRAME_ID_RANGE&apos;) or                                         (../LinIfFrameType = &apos;ASSIGN_NAD&apos;) or                                         (../LinIfFrameType = &apos;CONDITIONAL&apos;) or                                         (../LinIfFrameType = &apos;FREE&apos;) or                                         (../LinIfFrameType = &apos;SAVE_CONFIGURATION&apos;) or                                         (../LinIfFrameType = &apos;UNASSIGN&apos;))"/>
                            <v:lst name="LinIfFixedFrameSduByte" type="MAP">
                              <a:a name="TAB" value="LinIfFixedFrameSdu"/>
                              <a:da name="MAX" value="8"/>
                              <a:da name="MIN" value="8"/>
                              <v:ctr name="LinIfFixedFrameSduByte" 
                                     type="IDENTIFIABLE">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        This container represents a byte within the 8 byte array.
                                        The Byte order shall be MSB first.
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="UUID" 
                                     value="ECUC:0aa8d449-7336-45d1-acf2-a79b1451a9ff"/>
                                <v:var name="LinIfFixedFrameSduBytePos" 
                                       type="INTEGER">
                                  <a:a name="DESC">
                                    <a:v>&lt;html&gt;
                                          Index of the Byte in the SDU (response) 8 byte array.
                                        &lt;/html&gt;</a:v>
                                  </a:a>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                  <a:a name="UUID" 
                                       value="ECUC:0ab4ee67-172e-439e-bc01-1b107c277c05"/>
                                  <a:da name="DEFAULT" type="XPath" 
                                        expr="num:i(../@index)"/>
                                  <a:da name="INVALID" type="Multi">
                                    <mt:range>
                                      <mt:tst expr="&lt;=7"/>
                                      <mt:tst expr="&gt;=0"/>
                                    </mt:range>
                                    <mt:xpath>
                                      <mt:tst 
                                              false="LinIfFixedFrameSduBytePos must be a valid byte position [0..7]." 
                                              expr="(. &gt;= 0) and (. &lt;= 7)"/>
                                      <mt:tst 
                                              true="There is another LinIfFixedFrameSdu container which has this byte position configured. Each container must have a unique byte position within a LinIf frame." 
                                              expr="count(../../*[LinIfFixedFrameSduBytePos = node:current()]) &gt; 1"/>
                                    </mt:xpath>
                                  </a:da>
                                </v:var>
                                <v:var name="LinIfFixedFrameSduByteVal" 
                                       type="INTEGER">
                                  <a:a name="DESC">
                                    <a:v>&lt;html&gt;
                                          Byte value in the SDU (response) 8-byte array.
                                        &lt;/html&gt;</a:v>
                                  </a:a>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                  <a:a name="UUID" 
                                       value="ECUC:76133907-c78a-453d-bff1-c84964c755e6"/>
                                  <a:da name="DEFAULT" value="0"/>
                                  <a:da name="INVALID" type="Range">
                                    <a:tst expr="&lt;=255"/>
                                    <a:tst expr="&gt;=0"/>
                                  </a:da>
                                </v:var>
                              </v:ctr>
                            </v:lst>
                          </v:ctr>
                          <v:var name="LinIfFrameType" type="ENUMERATION">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;Type of frame that is described (e.g. sporadic frame).
                                    Note that types 7-11 are the fixed MRF types.&lt;/p&gt;
                                    &lt;p&gt;The sporadic slot is not found among the frame types.
                                    A sporadic slot is a set of sporadic frames.&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:b9735872-2db9-41ef-9047-01d69eb83851"/>
                            <a:da name="DEFAULT" value="UNCONDITIONAL"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="(. = &apos;SPORADIC&apos;) and (../../../LinIfNodeType = &apos;LinIfSlave&apos;)" 
                                  true="Only LIN Masters can transmit SPORADIC frames."/>
                            <a:da name="RANGE">
                              <a:v>ASSIGN</a:v>
                              <a:v>ASSIGN_FRAME_ID_RANGE</a:v>
                              <a:v>ASSIGN_NAD</a:v>
                              <a:v>CONDITIONAL</a:v>
                              <a:v>EVENT_TRIGGERED</a:v>
                              <a:v>FREE</a:v>
                              <a:v>MRF</a:v>
                              <a:v>SAVE_CONFIGURATION</a:v>
                              <a:v>SPORADIC</a:v>
                              <a:v>SRF</a:v>
                              <a:v>UNASSIGN</a:v>
                              <a:v>UNCONDITIONAL</a:v>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfLength" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Length of the LIN SDU in bytes.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:9d278703-8bd9-4c02-b84a-82dbbe4347b2"/>
                            <a:da name="DEFAULT" value="8"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=8"/>
                              <a:tst expr="&gt;=1"/>
                            </a:da>
                          </v:var>
                          <v:chc name="LinIfPduDirection" type="IDENTIFIABLE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Direction of the frame.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="TAB" value="LinIfPduDirection"/>
                            <a:a name="UUID" 
                                 value="ECUC:ad560145-2b51-46ad-91c3-219c5c976f4c"/>
                            <a:da name="WARNING" type="XPath" 
                                  expr="(../LinIfFrameType != &apos;UNCONDITIONAL&apos;) and (. != &apos;LinIfInternalPdu&apos;)" 
                                  true="Deprecated configuration: All sporadic, event-triggered, configuration and TP frames should have LinIfPduDirection set to LinIfInternalPdu."/>
                            <v:ctr name="LinIfInternalPdu" type="IDENTIFIABLE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      Represents a Diagnostic or Configuration frame : no
                                      Message ID (no PduId).
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="UUID" 
                                   value="ECUC:c126513a-cf29-4918-bb7e-aea26cd3f5df"/>
                            </v:ctr>
                            <v:ctr name="LinIfRxPdu" type="IDENTIFIABLE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      Represents a received PDU/frame.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="UUID" 
                                   value="ECUC:13322c3b-51f2-40eb-b615-dfc3e665e5e8"/>
                              <v:var name="LinIfRxIndicationUL" 
                                     type="ENUMERATION">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;This parameter refers to the defined name of the
                                        &lt;code&gt;User_RxIndication&lt;/code&gt;.&lt;/p&gt;
                                        &lt;p&gt;This parameter depends on the parameter
                                        LinIfUserRxIndicationUL.&lt;/p&gt;
                                        &lt;p&gt;If LinIfUserRxIndicationUL equals CDD the name of
                                        the &lt;code&gt;User_RxIndication&lt;/code&gt; is selectable.&lt;/p&gt;
                                        &lt;p&gt;The name is defined in LinIfGeneral/LinIfCddFunctionsUL.&lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="UUID" 
                                     value="ECUC:0b35a654-3a05-4f5a-bdbd-6a74b026d4a8"/>
                                <a:da name="EDITABLE" type="XPath" 
                                      expr="../LinIfUserRxIndicationUL = &apos;CDD&apos;"/>
                                <a:da name="ENABLE" value="false"/>
                                <a:da name="RANGE" type="XPath" 
                                      expr="text:order(../../../../../../../../LinIfGeneral/LinIfCddFunctionsUL/*[CddFunctionType=&apos;RxIndication&apos;]/@name)"/>
                              </v:var>
                              <v:ref name="LinIfRxPduRef" type="REFERENCE">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        Reference to the PDU that is received in this frame.
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="UUID" 
                                     value="ECUC:a4b0259f-0d05-4a0e-b86a-89c2558bb7ba"/>
                                <a:da name="INVALID" type="XPath" 
                                      expr="node:refvalid(.)" 
                                      false="LinIfRxPduRef must reference a valid RxPdu."/>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                              </v:ref>
                              <v:var name="LinIfUserRxIndicationUL" 
                                     type="ENUMERATION">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;This parameter defines the upper layer (UL) module to
                                        which the indication of the successfully received LINRXPDUID
                                        has to be routed via
                                        &lt;code&gt;User_LinIfRxIndication&lt;/code&gt;.&lt;/p&gt;
                                        &lt;p&gt;This &lt;code&gt;User_LinIfRxIndication&lt;/code&gt; has to be
                                        invoked when the indication of the configured LINRXPDUID
                                        will be received by a Rx indication event from the LIN
                                        Driver module.&lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="ECUC:27972d9b-34b5-4115-bee3-e76a7f66edb5"/>
                                <a:da name="DEFAULT" value="PDUR"/>
                                <a:da name="INVALID" type="XPath" 
                                      expr=". = &apos;CDD&apos; and not(node:exists(../LinIfRxIndicationUL))" 
                                      true="Having a CDD configured as UL requires a function name specified in the parameter LinIfRxIndicationUL."/>
                                <a:da name="RANGE">
                                  <a:v>CDD</a:v>
                                  <a:v>PDUR</a:v>
                                </a:da>
                              </v:var>
                            </v:ctr>
                            <v:ctr name="LinIfSlaveToSlavePdu" 
                                   type="IDENTIFIABLE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      &lt;p&gt;Represents a slave-to-slave PDU/frame. Master does only send
                                      the header but doesn&apos;t receive the response.&lt;/p&gt;
                                      &lt;p&gt;Added for completeness.&lt;/p&gt;
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="UUID" 
                                   value="ECUC:01088ba1-2498-4a9a-ab0c-a5fa045e5621"/>
                            </v:ctr>
                            <v:ctr name="LinIfTxPdu" type="IDENTIFIABLE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      Represents a transmitted PDU/frame.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="FRAME" value="LINE"/>
                              <a:a name="UUID" 
                                   value="ECUC:7640ebc8-a9e9-4673-9ccd-ce63404a29ce"/>
                              <v:var name="LinIfTxConfirmationUL" 
                                     type="ENUMERATION">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;This parameter refers to the defined ame of the
                                        &lt;code&gt;User_TxConfirmation&lt;/code&gt;.&lt;/p&gt;
                                        &lt;p&gt;This parameter depends on the parameter LinIfUserTxUL.
                                        &lt;/p&gt;
                                        &lt;p&gt;If LinIfUserTxUL equals CDD, the name of the
                                        &lt;code&gt;User_TxConfirmation&lt;/code&gt; is selectable.&lt;/p&gt;
                                        &lt;p&gt;The name is defined in LinIfGeneral/LinIfCddFunctionsUL.&lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="UUID" 
                                     value="ECUC:881ff17f-46a2-475e-b06d-771f3fb8fb63"/>
                                <a:da name="EDITABLE" type="XPath" 
                                      expr="../LinIfUserTxUL = &apos;CDD&apos;"/>
                                <a:da name="ENABLE" value="false"/>
                                <a:da name="RANGE" type="XPath" 
                                      expr="text:order(../../../../../../../../LinIfGeneral/LinIfCddFunctionsUL/*[CddFunctionType=&apos;TxConfirmation&apos;]/@name)"/>
                              </v:var>
                              <v:var name="LinIfTxPduId" type="INTEGER">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;Identifier of the frame for the upper layer.&lt;/p&gt;
                                        &lt;p&gt;This id is only relevant for sporadic frames.&lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                                <a:a name="UUID" 
                                     value="ECUC:dd139fd4-fcb7-4f6e-8311-f18bb2cfe5c3"/>
                                <a:da name="DEFAULT" type="XPath" 
                                      expr="num:i(count(../../../../../*/LinIfFrame/*[LinIfFrameType=&apos;UNCONDITIONAL&apos; and LinIfPduDirection=&apos;LinIfTxPdu&apos;]))"/>
                                <a:da name="INVALID" type="Multi">
                                  <mt:range>
                                    <mt:tst expr="&lt;=65535"/>
                                    <mt:tst expr="&gt;=0"/>
                                  </mt:range>
                                  <mt:xpath>
                                    <mt:tst 
                                            false="LinIfTxPduId must be unique for all unconditional transmit frames. There is another unconditional transmit frame (LinIfFrameType is set to UNCONDITIONAL and LinIfPduDirection is set to LinIfTxPdu) with the same value for LinIfTxPduId." 
                                            expr="(../../LinIfFrameType != &apos;UNCONDITIONAL&apos;) or                                                (num:i(count(../../../../../*/LinIfFrame/*[(LinIfFrameType = &apos;UNCONDITIONAL&apos;) and                                                                                           (LinIfPduDirection = &apos;LinIfTxPdu&apos;) and                                                                                           (LinIfPduDirection/LinIfTxPduId = node:current())])) = 1)"/>
                                    <mt:tst 
                                            false="The PDU IDs of unconditional transmit frames must be zero-based and consecutive. There is no unconditional transmit frame (LinIfFrameType is set to UNCONDITIONAL and LinIfPduDirection is set to LinIfTxPdu) with a PDU ID that is 1 less than LinIfTxPduId." 
                                            expr="(../../LinIfFrameType != &apos;UNCONDITIONAL&apos;) or                                                ( (. = 0) or                                                  (num:i(count(../../../../../*/LinIfFrame/*[(LinIfFrameType = &apos;UNCONDITIONAL&apos;) and                                                                                             (LinIfPduDirection = &apos;LinIfTxPdu&apos;) and                                                                                             (LinIfPduDirection/LinIfTxPduId = (node:current() - 1))])) &gt; 0))"/>
                                  </mt:xpath>
                                </a:da>
                              </v:var>
                              <v:ref name="LinIfTxPduRef" type="REFERENCE">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        Reference to the PDU that is transmitted in this frame.
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="UUID" 
                                     value="ECUC:78cf5840-3ad7-412d-ac03-c32aec40298b"/>
                                <a:da name="INVALID" type="XPath" 
                                      expr="node:refvalid(.)" 
                                      false="LinIfTxPduRef must reference a valid TxPdu."/>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                              </v:ref>
                              <v:var name="LinIfTxTriggerTransmitUL" 
                                     type="ENUMERATION">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;This parameter refers to the defined name of the
                                        &lt;code&gt;User_TriggerTransmit&lt;/code&gt;.&lt;/p&gt;
                                        &lt;p&gt;This parameter depends on the
                                        parameter LinIfUserTxUL.&lt;/p&gt;
                                        &lt;p&gt;If LinIfUserTxUL equals CDD, the name of the
                                        &lt;code&gt;User_TriggerTransmit&lt;/code&gt; is selectable.&lt;/p&gt;
                                        &lt;p&gt;The name is defined in LinIfGeneral/LinIfCddFunctionsUL.&lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="true"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="UUID" 
                                     value="ECUC:5718fa01-e727-4c37-83e8-3faba3943c06"/>
                                <a:da name="EDITABLE" type="XPath" 
                                      expr="../LinIfUserTxUL = &apos;CDD&apos;"/>
                                <a:da name="ENABLE" value="false"/>
                                <a:da name="RANGE" type="XPath" 
                                      expr="text:order(../../../../../../../../LinIfGeneral/LinIfCddFunctionsUL/*[CddFunctionType=&apos;TriggerTransmit&apos;]/@name)"/>
                              </v:var>
                              <v:var name="LinIfUserTxUL" type="ENUMERATION">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;This parameter defines the upper layer (UL) module to
                                        which the trigger of the transmitted LinTxPdu (via the
                                        &lt;code&gt;User_TriggerTransmit&lt;/code&gt;) or the confirmation of the
                                        successfully transmitted LinTxPdu has to be routed (via the
                                        &lt;code&gt;User_TxConfirmation&lt;/code&gt;).&lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="ECUC:fe2c0d05-82ea-4af2-84db-989658a33d89"/>
                                <a:da name="DEFAULT" value="PDUR"/>
                                <a:da name="INVALID" type="XPath" 
                                      expr=". = &apos;CDD&apos; and (not(node:exists(../LinIfTxTriggerTransmitUL) and node:exists(../LinIfTxConfirmationUL)) or (as:modconf(&apos;LinIf&apos;)[1]/LinIfGeneral/LinIfCddFunctionsUL/*[@name=node:current()/../LinIfTxConfirmationUL]/CddName != as:modconf(&apos;LinIf&apos;)[1]/LinIfGeneral/LinIfCddFunctionsUL/*[@name=node:current()/../LinIfTxTriggerTransmitUL]/CddName))" 
                                      true="Having a CDD configured as UL requires function names specified in the parameters LinIfTxTriggerTransmitUL and LinIfTxConfirmationUL, referencing the same Cdd."/>
                                <a:da name="RANGE">
                                  <a:v>CDD</a:v>
                                  <a:v>PDUR</a:v>
                                </a:da>
                              </v:var>
                            </v:ctr>
                          </v:chc>
                          <v:ctr name="LinIfFrameDemEventParameterRefs" 
                                 type="IDENTIFIABLE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                  Container for the references to DemEventParameter elements which shall be invoked using the Dem_ReportErrorStatus API in case the corresponding error occurs. The EventId is taken from the referenced DemEventParameter&apos;s DemEventId value. The standardized errors are provided in the container and can be extended by vendor specific error references.
                                &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v mclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="(../LinIfFrameType = &apos;SPORADIC&apos;) or                                            (../LinIfFrameType = &apos;EVENT_TRIGGERED&apos;)" 
                                  true="If LinIfFrameType is set to &apos;SPORADIC&apos; or &apos;EVENT_TRIGGERED&apos;, LinIfFrameDemEventParameterRefs shall not be accesible."/>
                            <v:ref name="LINIF_E_TX_BIT_ERROR" 
                                   type="SYMBOLIC-NAME-REFERENCE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      &lt;p&gt;Reference to the DemEventParameter that shall be issued when the LIN Driver reports a bit error to LinIf.&lt;/p&gt;
                                      &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                                      &lt;ul&gt;
                                        &lt;li&gt;&lt;code&gt;LinIfTxBitErrorReportToDem&lt;/code&gt;: Select DEM to enable the reporting of &lt;code&gt;LINIF_E_TX_BIT_ERROR&lt;/code&gt;.&lt;/li&gt;
                                      &lt;/ul&gt;
                                      &lt;p&gt;Further notes:&lt;/p&gt;
                                      &lt;ul&gt;
                                        &lt;li&gt;Activation: This error is reported if a bit error is detected.&lt;/li&gt;
                                        &lt;li&gt;Healing: This error is healed as soon as no bit error is detected.&lt;/li&gt;
                                        &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                                        &lt;li&gt;Rate of diagnostic checks: Checked on every LinIf_MainFunction() call.&lt;/li&gt;
                                      &lt;/ul&gt;
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="OPTIONAL" value="true"/>
                              <a:a name="ORIGIN" 
                                   value="Elektrobit Automotive GmbH"/>
                              <a:da name="ENABLE" value="false"/>
                              <a:da name="INVALID" type="XPath">
                                <a:tst expr="node:refvalid(.)" 
                                       false="This configuration parameter must reference a valid Dem event"/>
                                <a:tst 
                                       expr="../../../../../../../../LinIfGeneral/ReportToDem/LinIfTxBitErrorDebounceMethod = &apos;INTERNAL&apos; and as:ref(.)/DemEventClass/DemDebounceAlgorithmClass != &apos;DemDebounceMonitorInternal&apos;" 
                                       true="If &apos;LinIfTxBitErrorDebounceMethod&apos; is set to INTERNAL, the referenced Dem event&apos;s configuration parameter DemDebounceAlgorithmClass must be set to &apos;DemDebounceMonitorInternal&apos;"/>
                                <a:tst 
                                       expr="../../../../../../../../LinIfGeneral/ReportToDem/LinIfTxBitErrorDebounceMethod = &apos;DEM&apos; and as:ref(.)/DemEventClass/DemDebounceAlgorithmClass = &apos;DemDebounceMonitorInternal&apos;" 
                                       true="If &apos;LinIfTxBitErrorDebounceMethod&apos; is set to DEM, the referenced Dem event&apos;s configuration parameter DemDebounceAlgorithmClass must not be set to &apos;DemDebounceMonitorInternal&apos;"/>
                                <a:tst 
                                       expr="(../LinIfFrameType = &apos;SPORADIC&apos;) or                                         (../LinIfFrameType = &apos;EVENT_TRIGGERED&apos;)" 
                                       true="There is no Dem support for SPORADIC and EVENT_TRIGGERED frame types"/>
                              </a:da>
                              <a:da name="REF" 
                                    value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                            </v:ref>
                            <v:ref name="LINIF_E_RX_CHECKSUM_ERROR" 
                                   type="SYMBOLIC-NAME-REFERENCE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      &lt;p&gt;Reference to the DemEventParameter that shall be issued when the LIN Driver reports a checksum error to LinIf.&lt;/p&gt;
                                      &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                                      &lt;ul&gt;
                                        &lt;li&gt;&lt;code&gt;LinIfRxChecksumErrorReportToDem&lt;/code&gt;: Select DEM to enable the reporting of &lt;code&gt;LINIF_E_RX_CHECKSUM_ERROR&lt;/code&gt;.&lt;/li&gt;
                                      &lt;/ul&gt;
                                      &lt;p&gt;Further notes:&lt;/p&gt;
                                      &lt;ul&gt;
                                        &lt;li&gt;Activation: This error is reported if a checksum error is detected.&lt;/li&gt;
                                        &lt;li&gt;Healing: This error is healed as soon as no checksum error is detected.&lt;/li&gt;
                                        &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                                        &lt;li&gt;Rate of diagnostic checks: Checked on every LinIf_MainFunction() call.&lt;/li&gt;
                                      &lt;/ul&gt;
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="OPTIONAL" value="true"/>
                              <a:a name="ORIGIN" 
                                   value="Elektrobit Automotive GmbH"/>
                              <a:da name="ENABLE" value="false"/>
                              <a:da name="INVALID" type="XPath">
                                <a:tst expr="node:refvalid(.)" 
                                       false="This configuration parameter must reference a valid Dem event"/>
                                <a:tst 
                                       expr="../../../../../../../../LinIfGeneral/ReportToDem/LinIfRxChecksumDebounceMethod = &apos;INTERNAL&apos; and node:refvalid(.) and as:ref(.)/DemEventClass/DemDebounceAlgorithmClass != &apos;DemDebounceMonitorInternal&apos;" 
                                       true="If &apos;LinIfRxChecksumDebounceMethod&apos; is set to INTERNAL, the referenced Dem event&apos;s configuration parameter DemDebounceAlgorithmClass must be set to &apos;DemDebounceMonitorInternal&apos;"/>
                                <a:tst 
                                       expr="../../../../../../../../LinIfGeneral/ReportToDem/LinIfRxChecksumDebounceMethod = &apos;DEM&apos; and node:refvalid(.) and as:ref(.)/DemEventClass/DemDebounceAlgorithmClass = &apos;DemDebounceMonitorInternal&apos;" 
                                       true="If &apos;LinIfRxChecksumDebounceMethod&apos; is set to DEM, the referenced Dem event&apos;s configuration parameter DemDebounceAlgorithmClass must not be set to &apos;DemDebounceMonitorInternal&apos;"/>
                              </a:da>
                              <a:da name="REF" 
                                    value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                            </v:ref>
                            <v:ref name="LINIF_E_RX_NO_RESPONSE_ERROR" 
                                   type="SYMBOLIC-NAME-REFERENCE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      &lt;p&gt;Reference to the DemEventParameter that shall be issued when the LIN Driver reports a slave not responding error to LinIf.&lt;/p&gt;
                                      &lt;p&gt;Dependency on parameter(s):&lt;/p&gt;
                                      &lt;ul&gt;
                                        &lt;li&gt;&lt;code&gt;LinIfRxNoRespErrorReportToDem&lt;/code&gt;: Select DEM to enable the reporting of &lt;code&gt;LINIF_E_RX_NO_RESPONSE_ERROR&lt;/code&gt;.&lt;/li&gt;
                                      &lt;/ul&gt;
                                      &lt;p&gt;Further notes:&lt;/p&gt;
                                      &lt;ul&gt;
                                        &lt;li&gt;Activation: This error is reported if a slave not responding error is detected.&lt;/li&gt;
                                        &lt;li&gt;Healing: This error is healed as soon as no slave not responding error is detected. &lt;/li&gt;
                                        &lt;li&gt;Trigger debounce: None. The error is reported on first occurrence.&lt;/li&gt;
                                        &lt;li&gt;Rate of diagnostic checks: Checked on every LinIf_MainFunction() call.&lt;/li&gt;
                                      &lt;/ul&gt;
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v class="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="OPTIONAL" value="true"/>
                              <a:a name="ORIGIN" 
                                   value="Elektrobit Automotive GmbH"/>
                              <a:da name="ENABLE" value="false"/>
                              <a:da name="INVALID" type="XPath">
                                <a:tst expr="node:refvalid(.)" 
                                       false="This configuration parameter must reference a valid Dem event"/>
                                <a:tst 
                                       expr="../../../../../../../../LinIfGeneral/ReportToDem/LinIfRxNoRespDebounceMethod = &apos;INTERNAL&apos; and node:refvalid(.) and as:ref(.)/DemEventClass/DemDebounceAlgorithmClass != &apos;DemDebounceMonitorInternal&apos;" 
                                       true="If &apos;LinIfRxNoRespDebounceMethod&apos; is set to INTERNAL, the referenced Dem event&apos;s configuration parameter DemDebounceAlgorithmClass must be set to &apos;DemDebounceMonitorInternal&apos;"/>
                                <a:tst 
                                       expr="../../../../../../../../LinIfGeneral/ReportToDem/LinIfRxNoRespDebounceMethod = &apos;DEM&apos; and node:refvalid(.) and as:ref(.)/DemEventClass/DemDebounceAlgorithmClass = &apos;DemDebounceMonitorInternal&apos;" 
                                       true="If &apos;LinIfRxNoRespDebounceMethod&apos; is set to DEM, the referenced Dem event&apos;s configuration parameter DemDebounceAlgorithmClass must not be set to &apos;DemDebounceMonitorInternal&apos;"/>
                              </a:da>
                              <a:da name="REF" 
                                    value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Dem/DemConfigSet/DemEventParameter"/>
                            </v:ref>
                          </v:ctr>
                          <v:var name="LinIfPid" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Protected ID of the LIN frame. There is no reason to calculate
                                    the Parity in run-time.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:5ea9c5f4-9012-4f2c-925b-348b6fb424ea"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="ENABLE" type="XPath" 
                                  expr="not(node:exists(../LinIfFrameId))"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=255"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:lst name="LinIfSubstitutionFrames" type="MAP">
                            <v:ctr name="LinIfSubstitutionFrames" 
                                   type="IDENTIFIABLE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      List of unconditional Frames that can be sent in a sporadic
                                      Frame slot.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                              <a:a name="UUID" 
                                   value="ECUC:c9f2d77f-3e93-450d-b8d7-c9e1940c044d"/>
                              <v:var name="LinIfFramePriority" type="INTEGER">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        Priority of an unconditional frame if used as a sporadic
                                        frame or in case of collision resolving of event triggered
                                        frames (0 is the highest priority, 255 the lowest).
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="ECUC:52c7ca27-7e7c-41f9-8a29-9660a446d4f7"/>
                                <a:da name="DEFAULT" type="XPath" 
                                      expr="num:i(256 - count(../../*/LinIfFramePriority))"/>
                                <a:da name="INVALID" type="Multi">
                                  <mt:range>
                                    <mt:tst expr="&lt;=255"/>
                                    <mt:tst expr="&gt;=0"/>
                                  </mt:range>
                                  <mt:xpath 
                                            true="The LinIfFramePriority must be unique for each entry in this LinIfSubstitutionFrames list." 
                                            expr="(num:i(count(../../*/LinIfFramePriority[.=node:current()]))&gt;1)"/>
                                </a:da>
                              </v:var>
                              <v:ref name="LinIfSubstitutionFrameRef" 
                                     type="REFERENCE">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        Reference to an unconditional Frame that is used as sporadic frame
                                        in a master node or event-triggered frame in a slave node.
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="UUID" 
                                     value="ECUC:d92f4f29-dbe9-4834-b3dd-031a34675f81"/>
                                <a:da name="INVALID" type="XPath">
                                  <a:tst 
                                         expr="(../../../LinIfFrameType=&apos;SPORADIC&apos;)                                       and not((node:ref(.)/LinIfPduDirection=&apos;LinIfTxPdu&apos;)                                               and (node:ref(.)/LinIfFrameType=&apos;UNCONDITIONAL&apos;))" 
                                         true="Only unconditional Tx frames are allowed in the sporadic frame list."/>
                                  <a:tst 
                                         expr="(../../../LinIfFrameType=&apos;EVENT_TRIGGERED&apos;) and (../../../../../LinIfNodeType = &apos;LinIfSlave&apos;)                                       and not((node:ref(.)/LinIfPduDirection=&apos;LinIfTxPdu&apos;)                                               and (node:ref(.)/LinIfFrameType=&apos;UNCONDITIONAL&apos;))" 
                                         true="Only unconditional Tx frames are allowed in the event-triggered frame list for Slave Nodes."/>
                                </a:da>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel/LinIfFrame"/>
                              </v:ref>
                            </v:ctr>
                          </v:lst>
                        </v:ctr>
                      </v:lst>
                      <v:chc name="LinIfNodeType" type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                This container defines the LIN node type of this channel.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="UUID" 
                             value="ECUC:9377bd0b-60d5-4a51-9b48-1de901128fed"/>
                        <a:da name="WARNING" type="XPath" 
                              expr="(. = &apos;LinIfSlave&apos;) and (../../../../../LinIfGeneral/LinIfLinDriverAPI != &apos;REV44&apos;)" 
                              true="LinIfLinDriverAPI has to be set as REV44 in order to use Slave functionality."/>
                        <v:ctr name="LinIfMaster" type="IDENTIFIABLE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                Each Master can only be connected to one physical channel.
                                This could be compared to the Node parameter in a LDF file.
                              &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="UUID" 
                               value="ECUC:4f684fcc-d115-41c2-be8a-62a09a31f5e5"/>
                          <v:var name="LinIfJitter" type="FLOAT">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    The jitter specifies the differences between the maximum
                                    and minimum delay from time base tick to the header sending
                                    start point in seconds.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:120714ea-419a-4e88-aa67-01082afdc636"/>
                            <a:da name="DEFAULT" type="XPath" 
                                  expr="node:fallback(../../LinIfMaster/LinIfJitter, 0)"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=0.255"/>
                              <a:tst expr="&gt;=0.0"/>
                            </a:da>
                          </v:var>
                        </v:ctr>
                        <v:ctr name="LinIfSlave" type="IDENTIFIABLE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  Describes all parameters which are only relevant
                                  for a LIN Slave node.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="UUID" 
                               value="ECUC:b22709e8-47bf-4eba-921a-368e76094ec1"/>
                          <v:var name="LinIfLinProtocolVersion" 
                                 type="ENUMERATION">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Defines the LIN protocol version of the slave node.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SCOPE" value="LOCAL"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:936c9ab3-572a-4dde-9278-0286157029b9"/>
                            <a:da name="DEFAULT" value="ISO17987"/>
                            <a:da name="EDITABLE" value="false"/>
                            <a:da name="RANGE">
                              <a:v>ISO17987</a:v>
                              <a:v>LIN13</a:v>
                              <a:v>LIN20</a:v>
                              <a:v>LIN21</a:v>
                              <a:v>LIN22</a:v>
                            </a:da>
                          </v:var>
                          <v:ref name="LinIfResponseErrorSignal" 
                                 type="REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Reference to the response_error signal.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="Link">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="REQUIRES-SYMBOLIC-NAME-VALUE" 
                                 value="true"/>
                            <a:a name="SCOPE" value="ECU"/>
                            <a:a name="UUID" 
                                 value="ECUC:12c709e2-7008-4abd-82ae-21af01d58042"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="node:refvalid(.) and (node:ref(.)/ComBitSize = 1)" 
                                  false="LinIfResponseErrorSignal must refer to a 1 bit ComSignal"/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Com/ComConfig/ComSignal"/>
                          </v:ref>
                          <v:ctr name="LinIfNodeConfigurationIdentification" 
                                 type="IDENTIFIABLE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    This container is mandatory for all LIN 2.x and ISO17987 LIN slave nodes,
                                    and ignored for LIN 1.3 slave nodes and all master nodes.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="UUID" 
                                 value="ECUC:7ba45145-76b1-4a4a-bb74-03ab276f2446"/>
                            <v:var name="LinIfSerialNumber" type="INTEGER">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      LIN serial number.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="OPTIONAL" value="true"/>
                              <a:a name="ORIGIN" 
                                   value="Elektrobit Automotive GmbH"/>
                              <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              <a:a name="UUID" 
                                   value="ECUC:3535d1a7-57ab-4f00-9291-5fce82626cf0"/>
                              <a:da name="ENABLE" value="true"/>
                              <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=0xFFFFFFFF"/>
                                <a:tst expr="&gt;=0"/>
                              </a:da>
                            </v:var>
                            <v:var name="LinIfConfiguredNAD" type="INTEGER">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      Slave node configured NAD.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              <a:a name="UUID" 
                                   value="ECUC:74cc319c-2c97-45d6-b6b1-446d4c251271"/>
                              <a:da name="DEFAULT" type="XPath" 
                                    expr="num:i(../../../../@index+1)"/>
                              <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=125"/>
                                <a:tst expr="&gt;=1"/>
                              </a:da>
                            </v:var>
                            <v:var name="LinIfFunctionId" type="INTEGER">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      LIN function Id.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              <a:a name="UUID" 
                                   value="ECUC:5d486a25-08a9-476f-bf49-2183d8a415a5"/>
                              <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=65535"/>
                                <a:tst expr="&gt;=0"/>
                              </a:da>
                            </v:var>
                            <v:var name="LinIfInitialNAD" type="INTEGER">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      Slave node initial NAD.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              <a:a name="UUID" 
                                   value="ECUC:7be2f7ed-3e90-4c3b-871e-89c0e73bdfbb"/>
                              <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=125"/>
                                <a:tst expr="&gt;=1"/>
                              </a:da>
                            </v:var>
                            <v:var name="LinIfNasTimeout" type="FLOAT">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      N_As timeout in seconds.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              <a:a name="UUID" 
                                   value="ECUC:47176bc5-7be0-4122-8569-d97d3e5c8e59"/>
                              <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=1.0"/>
                                <a:tst expr="&gt;=0.0"/>
                              </a:da>
                              <a:da name="WARNING" type="XPath" 
                                    expr="num:i((. * 1000000) mod (../../../../../LinIfTimeBase * 1000000)) != 0" 
                                    true="LinIfNasTimeout is not a multiple of the main function cycle time. The number of ticks for the timeout will be rounded up."/>
                            </v:var>
                            <v:var name="LinIfSupplierId" type="INTEGER">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      LIN consortium or ISO LIN supplier Id.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              <a:a name="UUID" 
                                   value="ECUC:9f47cdcd-685f-4c1f-9d93-5af3022b1318"/>
                              <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=32767"/>
                                <a:tst expr="&gt;=0"/>
                              </a:da>
                            </v:var>
                            <v:var name="LinIfVariantId" type="INTEGER">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      LIN variant Id.
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                   type="IMPLEMENTATIONCONFIGCLASS">
                                <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                              </a:a>
                              <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                              <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                              <a:a name="SCOPE" value="LOCAL"/>
                              <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                              <a:a name="UUID" 
                                   value="ECUC:c56f3492-da92-492e-b9d0-cf1e69a12442"/>
                              <a:da name="INVALID" type="Range">
                                <a:tst expr="&lt;=255"/>
                                <a:tst expr="&gt;=0"/>
                              </a:da>
                            </v:var>
                          </v:ctr>
                        </v:ctr>
                      </v:chc>
                      <v:var name="LinIfGotoSleepConfirmationUL" 
                             type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter defines the upper layer (UL) module to which the
                                confirmation of the goto-sleep command shall be sent.&lt;/p&gt;
                                &lt;p&gt;&lt;strong&gt;Must be used in conjunction with LinIfCddRef.&lt;/strong&gt;&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:40dc162a-06e8-4aa7-846f-43facbc0272d"/>
                        <a:da name="DEFAULT" value="LIN_SM"/>
                        <a:da name="INVALID" type="XPath" 
                              expr=". = &apos;CDD&apos; and not(node:exists(../LinIfCddRef))" 
                              true="Having a CDD configured as UL requires an enabled and configured LinIfCddRef."/>
                        <a:da name="RANGE">
                          <a:v>CDD</a:v>
                          <a:v>LIN_SM</a:v>
                        </a:da>
                      </v:var>
                      <v:var name="LinIfGotoSleepIndicationUL" 
                             type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter defines the upper layer (UL) module to which the indication
                                of the goto-sleep command shall be sent.&lt;/p&gt;
                                &lt;p&gt;&lt;strong&gt;Must be used in conjunction with LinIfCddRef.&lt;/strong&gt;&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="Link">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SCOPE" value="ECU"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:197379df-d73b-425f-bfe1-d8f9e92ba94b"/>
                        <a:da name="DEFAULT" value="LIN_SM"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath" 
                              expr=". = &apos;CDD&apos; and not(node:exists(../LinIfCddRef))" 
                              true="Having a CDD configured as UL requires an enabled and configured LinIfCddRef."/>
                        <a:da name="RANGE">
                          <a:v>CDD</a:v>
                          <a:v>LIN_SM</a:v>
                        </a:da>
                      </v:var>
                      <v:ctr name="LinIfMaster" type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Each Master can only be connected to one physical channel. This
                                could be compared to the Node parameter in a LDF file.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="TAB" value="LinIfMaster"/>
                        <a:a name="UUID" 
                             value="ECUC:4f684fcc-d115-41c2-be8a-62a09a31f5e5"/>
                        <v:var name="LinIfClusterTimeBase" type="FLOAT">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  Defines a time-base for one LIN cluster in seconds (normally
                                  0.002, 0.005 or 0.010s).
                                  &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" 
                               value="ECUC:cc38fa34-ef1b-4471-b680-edb4c6116888"/>
                          <a:da name="DEFAULT" value="0.010"/>
                          <a:da name="EDITABLE" value="false"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=0.255"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                        </v:var>
                        <v:var name="LinIfJitter" type="FLOAT">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  &lt;p&gt;
                                    The jitter specifies the differences between the maximum and
                                    minimum delay from time base tick to the header sending start
                                    point in seconds.
                                  &lt;/p&gt;
                                  &lt;p&gt;
                                    Config item kept for backwards compatibility.
                                    Please use &lt;a href=&quot;path:../../LinIfNodeType/LinIfJitter&quot;&gt;LinIfNodeType/LinIfMaster/LinIfJitter&lt;/a&gt;
                                  &lt;/p&gt;
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" 
                               value="ECUC:120714ea-419a-4e88-aa67-01082afdc636"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="EDITABLE" value="false"/>
                          <a:da name="INVALID" type="Range">
                            <a:tst expr="&lt;=0.255"/>
                            <a:tst expr="&gt;=0"/>
                          </a:da>
                        </v:var>
                      </v:ctr>
                      <v:var name="LinIfScheduleRequestConfirmationUL" 
                             type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                This parameter defines the upper layer (UL) module to which the
                                confirmation of the successfully performed schedule table change.
                                &lt;/p&gt;
                                &lt;p&gt;&lt;strong&gt;Must be used in conjunction with LinIfCddRef.&lt;/strong&gt;&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:8ed4be31-285b-4f4c-b944-2e349fe7185b"/>
                        <a:da name="DEFAULT" value="LIN_SM"/>
                        <a:da name="INVALID" type="XPath" 
                              expr=". = &apos;CDD&apos; and not(node:exists(../LinIfCddRef))" 
                              true="Having a CDD configured as UL requires an enabled and configured LinIfCddRef."/>
                        <a:da name="RANGE">
                          <a:v>CDD</a:v>
                          <a:v>LIN_SM</a:v>
                        </a:da>
                      </v:var>
                      <v:lst name="LinIfScheduleTable" type="MAP">
                        <a:da name="MIN" value="0"/>
                        <a:da name="WARNING" type="XPath" 
                              expr="../LinIfNodeType = &apos;LinIfMaster&apos; and num:i(count(*)) = 0" 
                              true="A Master channel must have at least one schedule table."/>
                        <v:ctr name="LinIfScheduleTable" type="IDENTIFIABLE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  Describes a schedule table. Each LinIfChannel may have several
                                  schedule tables. Each schedule table can only be connected to
                                  one channel.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <a:a name="UUID" 
                               value="ECUC:36bc9661-3231-4789-92b9-add11de9e32d"/>
                          <v:lst name="LinIfEntry" type="MAP">
                            <a:da name="WARNING" type="XPath" 
                                  expr="num:i(count(*[@name != &apos;NULL_SCHEDULE&apos;])) = 0" 
                                  true="A schedule table must have at least one entry."/>
                            <v:ctr name="LinIfEntry" type="IDENTIFIABLE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      Describes an entry in the schedule table (also known as
                                      Frame Slot).
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                              <a:a name="UUID" 
                                   value="ECUC:5856d22c-f08e-4597-aa05-a2fa836b7ec8"/>
                              <v:ref name="LinIfCollisionResolvingRef" 
                                     type="REFERENCE">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;Reference to the schedule table, which resolves the
                                        collision.&lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="OPTIONAL" value="false"/>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="UUID" 
                                     value="ECUC:b0729f03-6459-4a96-b816-9e8aa89cab6e"/>
                                <a:da name="EDITABLE" type="XPath" 
                                      expr="(node:refvalid(../LinIfFrameRef/*[1])) and (as:ref(../LinIfFrameRef/*[1])/LinIfFrameType=&apos;EVENT_TRIGGERED&apos;)"/>
                                <a:da name="ENABLE" type="XPath" 
                                      expr="(node:refvalid(../LinIfFrameRef/*[1])) and (as:ref(../LinIfFrameRef/*[1])/LinIfFrameType=&apos;EVENT_TRIGGERED&apos;)"/>
                                <a:da name="INVALID" type="Multi">
                                  <mt:xpath>
                                    <mt:tst 
                                            false="LinIfCollisionResolvingRef must reference a valid schedule table." 
                                            expr="node:refvalid(.)"/>
                                    <mt:tst 
                                            true="LinIfRunMode of collision resolving schedule must be RUN_ONCE" 
                                            expr="(node:refvalid(.)) and ((as:ref(.)/LinIfRunMode) != &apos;RUN_ONCE&apos;)"/>
                                  </mt:xpath>
                                </a:da>
                                <a:da name="REF" 
                                      value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel/LinIfScheduleTable"/>
                              </v:ref>
                              <v:var name="LinIfDelay" type="FLOAT">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        Delay to next entry in schedule table in seconds.
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="ECUC:d4db710c-4063-4b8d-81e4-d8cea455b14a"/>
                                <a:da name="DEFAULT" value="0.02"/>
                                <a:da name="INVALID" type="Multi">
                                  <mt:range>
                                    <mt:tst expr="&lt;=0.255"/>
                                    <mt:tst expr="&gt;=0"/>
                                  </mt:range>
                                  <mt:xpath>
                                    <mt:tst 
                                            true="The delay between processing two frames is not multiple of the LIN Interface time-base" 
                                            expr="                                     (num:f(as:modconf(&apos;LinIf&apos;)[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase) != 0) and                                     (num:mod(round(node:value(.) * &apos;1E10&apos;), round((as:modconf(&apos;LinIf&apos;)[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase) * &apos;1E10&apos;)) != 0)"/>
                                    <mt:tst 
                                            true="LinIfDelay is smaller than the maximum frame transmission duration (maximum LinIfLength) + LinIfJitter." 
                                            expr="(node:refvalid(../LinIfFrameRef/*[1])) and                                           (node:refvalid(../../../../../LinIfChannelRef)) and                                           (num:i(1000000*node:current()) &lt;                                            ((num:i(ceiling(1.4*1000000*((44+10*num:i(as:ref(../LinIfFrameRef/*[1])/LinIfLength))                                                                          div (as:ref(../../../../../LinIfChannelRef)/LinChannelBaudRate)                                                                        )                                                           )                                                   )                                             )                                             + num:i(1000000*(../../../../../LinIfMaster/LinIfJitter))                                            )                                           )"/>
                                  </mt:xpath>
                                </a:da>
                              </v:var>
                              <v:var name="LinIfEntryIndex" type="INTEGER">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        Position of the Frame Entry in the Schedule Table. The
                                        first entry index in the schedule table is 0.
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="ECUC:f0b28166-a295-4302-8662-4774593acd65"/>
                                <a:da name="DEFAULT" type="XPath" 
                                      expr="num:i(../@index)"/>
                                <a:da name="INVALID" type="Multi">
                                  <mt:range>
                                    <mt:tst expr="&lt;= 255"/>
                                    <mt:tst expr="&gt;= 0"/>
                                  </mt:range>
                                  <mt:xpath>
                                    <mt:tst 
                                            false="LinIfEntryIndex must be unique within one schedule table." 
                                            expr="(count(../../*[LinIfEntryIndex = node:current()]) = 1)"/>
                                    <mt:tst 
                                            true="LinIfEntryIndex can not be greater than 254. LinIfEntryIndex range is [0-255]. Value 255 is reserved for Invalid Entry." 
                                            expr="(num:i(.) &gt; num:i(254))"/>
                                  </mt:xpath>
                                </a:da>
                              </v:var>
                              <v:lst name="LinIfFrameRef">
                                <a:da name="MAX" value="1"/>
                                <a:da name="MIN" value="1"/>
                                <v:ref name="LinIfFrameRef" type="REFERENCE">
                                  <a:a name="DESC">
                                    <a:v>&lt;html&gt;
                                          Reference to the frames that belong to this schedule
                                          table entry.
                                        &lt;/html&gt;</a:v>
                                  </a:a>
                                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                       type="IMPLEMENTATIONCONFIGCLASS">
                                    <icc:v class="PostBuild">VariantPostBuild</icc:v>
                                  </a:a>
                                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                  <a:a name="UUID" 
                                       value="ECUC:5be22eba-daf3-4d41-b2ab-d9fe94e681a3"/>
                                  <a:da name="INVALID" type="XPath" 
                                        expr="node:refvalid(.)" 
                                        false="LinIfFrameRef must reference a valid frame."/>
                                  <a:da name="REF" 
                                        value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel/LinIfFrame"/>
                                </v:ref>
                              </v:lst>
                            </v:ctr>
                          </v:lst>
                          <v:var name="LinIfResumePosition" type="ENUMERATION">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Defines, where a schedule table shall be proceeded in case if
                                    it has been interrupted by a run-once table or MRF/SRF.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:1241c21b-2b43-4b02-a0a5-d95aca248cfb"/>
                            <a:da name="DEFAULT" value="START_FROM_BEGINNING"/>
                            <a:da name="RANGE">
                              <a:v>CONTINUE_AT_IT_POINT</a:v>
                              <a:v>START_FROM_BEGINNING</a:v>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfRunMode" type="ENUMERATION">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    The schedule table can be executed in two different modes.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:1281d31b-3c9b-41a9-96cf-c05155bc3364"/>
                            <a:da name="DEFAULT" value="RUN_CONTINUOUS"/>
                            <a:da name="RANGE">
                              <a:v>RUN_CONTINUOUS</a:v>
                              <a:v>RUN_ONCE</a:v>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfScheduleMode" type="ENUMERATION">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;The schedule table can be executed in the following three
                                    different modes:&lt;/p&gt;
                                    &lt;ul&gt;
                                      &lt;li&gt;
                                        &lt;strong&gt;LINTP_APPLICATIVE_SCHEDULE&lt;/strong&gt;:
                                        Applicative schedule is selected
                                      &lt;/li&gt;
                                      &lt;li&gt;
                                        &lt;strong&gt;LINTP_DIAG_REQUEST&lt;/strong&gt;:
                                        Master request schedule table is selected
                                      &lt;/li&gt;
                                      &lt;li&gt;
                                        &lt;strong&gt;LINTP_DIAG_RESPONSE&lt;/strong&gt;:
                                        Slave response schedule table is selected
                                      &lt;/li&gt;
                                    &lt;/ul&gt;
                                    &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:86bbb55b-c6e6-4a39-be37-418f827cc427"/>
                            <a:da name="DEFAULT" 
                                  value="LINTP_APPLICATIVE_SCHEDULE"/>
                            <a:da name="EDITABLE" value="false"/>
                            <a:da name="RANGE">
                              <a:v>LINTP_APPLICATIVE_SCHEDULE</a:v>
                              <a:v>LINTP_DIAG_REQUEST</a:v>
                              <a:v>LINTP_DIAG_RESPONSE</a:v>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfScheduleTableIndex" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;This is the unique index used by upper layers to identify a
                                    schedule.&lt;/p&gt;
                                    &lt;p&gt;Note that the NULL_SCHEDULE for each channel has index 0.&lt;/p&gt;
                                    Please also note the following rules for setting the schedule
                                    table index:
                                    &lt;ul&gt;
                                      &lt;li&gt;The indices for the schedule tables of each channel must
                                        start with 1 and be consecutive.&lt;/li&gt;
                                      &lt;li&gt;Each index must be unique within a channel.&lt;/li&gt;
                                      &lt;li&gt;The indices of each table must be ordered according to the
                                        priority of the schedule tables (parameter
                                        LinIfSchedulePriority).&lt;/li&gt;
                                      &lt;li&gt;The indices of RUN_ONCE tables must be lower than those of
                                        RUN_CONTINUOUS tables (parameter LinIfRunMode).&lt;/li&gt;
                                    &lt;/ul&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                            <a:a name="UUID" 
                                 value="ECUC:fd890a6a-8cf9-4e03-b6dd-058f8d7dd274"/>
                            <a:da name="DEFAULT" type="XPath" 
                                  expr="node:when(../@name = &apos;NULL_SCHEDULE&apos;, num:i(0), num:i(node:fallback(&quot;-&gt;num:max(node:difference(../../*[@name != &apos;NULL_SCHEDULE&apos;], node:current()/..)/LinIfScheduleTableIndex)&quot;, num:i(0)) + 1))"/>
                            <a:da name="INVALID" type="Multi">
                              <mt:range>
                                <mt:tst expr="&lt;= 255"/>
                                <mt:tst expr="&gt;= 0"/>
                              </mt:range>
                              <mt:xpath>
                                <mt:tst 
                                        false="LinIfScheduleTableIndex must be unique but there is at least one other schedule table with the same index." 
                                        expr="text:uniq(../../*[@name != &apos;NULL_SCHEDULE&apos;]/LinIfScheduleTableIndex, node:current())"/>
                                <mt:tst 
                                        false="LinIfScheduleTableIndex must start from 1 and be consecutive." 
                                        expr="node:isconsecutive(../../*[@name != &apos;NULL_SCHEDULE&apos;]/LinIfScheduleTableIndex, 1)"/>
                                <mt:tst 
                                        true="LinIfScheduleTableIndex can not be greater than 254. LinIfScheduleTableIndex range is [0 .. 255]. Value 255 is reserved for Invalid Schedule Table" 
                                        expr="(. &gt; num:i(254))"/>
                              </mt:xpath>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfScheduleTableName" type="STRING">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;Optional schedule name used to cross-reference with a LDF.&lt;/p&gt;
                                    &lt;p&gt;LIN_IF_SCHEDULE_INDEX shall be part of the schedule name.&lt;/p&gt;
                                    &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:413fe6ac-3350-4a4d-896d-728cf69160a3"/>
                            <a:da name="DEFAULT" type="XPath" 
                                  expr="concat(&apos;LINIF_CH&apos;, as:ref(../../../LinIfComMNetworkHandleRef)/ComMChannelId, &apos;_&apos;, node:name(..))"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="text:match(., &apos;^[a-zA-Z][a-zA-Z0-9_]*$&apos;)" 
                                  false="LinIfScheduleTableName must be a valid C identifier."/>
                          </v:var>
                          <v:ref name="LinIfScheduleTableEndNotificationRef" 
                                 type="REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;Reference to a custom callout name invoked when the last entry of the schedule table is processed.&lt;/p&gt;
                                    &lt;p&gt;The callout name is specified in &lt;strong&gt;LinIfScheduleTableEndNotificationCallout/LinIfScheduleTableEndNotificationCalloutName&lt;/strong&gt;&lt;/p&gt;
                                    &lt;p&gt;Declaration is supplied within a &lt;strong&gt;LinIfPublicCddHeaderFile&lt;/strong&gt; entry.&lt;/p&gt;
                                    &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                    &lt;ul&gt;
                                      &lt;li class=&quot;optimization.config.rom.increase&quot;&gt;
                                        &lt;strong&gt;ROM increase (config):&lt;/strong&gt;
                                        Enabling this parameter increases the ROM consumption of the module configuration.
                                      &lt;/li&gt;
                                      &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                                        &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                                        Enabling this parameter increases the ROM consumption of the module code.
                                      &lt;/li&gt;
                                      &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                        &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                        Enabling this parameter increases the execution time of the module code.
                                      &lt;/li&gt;
                                    &lt;/ul&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" 
                                 value="Elektrobit Automotive GmbH"/>
                            <a:a name="UUID" 
                                 value="ECUC:d713004d-12cb-4cd9-80be-7472fbbb5f68"/>
                            <a:da name="EDITABLE" type="XPath" 
                                  expr="../../../../../../../LinIfGeneral/LinIfScheduleTableEndNotificationSupported"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="node:refvalid(.)" 
                                  false="A LinIfScheduleTableEndNotificationCalloutName must be referenced."/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinIf/LinIfGeneral/LinIfScheduleTableEndNotificationCallout"/>
                          </v:ref>
                        </v:ctr>
                      </v:lst>
                      <v:lst name="LinIfSlave" type="MAP">
                        <a:da name="EDITABLE" value="false"/>
                        <v:ctr name="LinIfSlave" type="IDENTIFIABLE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  The Node attributes of the Slaves are provided with these
                                  parameter.
                                  &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;p&gt;&lt;strong&gt;The Slave can be configured under LinIfChannel/LinIfNodeType/LinIfSlave&lt;/strong&gt;&lt;/p&gt;
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                          <a:a name="UUID" 
                               value="ECUC:e071b12c-44e9-4260-b1db-d54fc2e02a8f"/>
                          <v:var name="LinIfConfiguredNad" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Definition of the initial node address.
                                    &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="Link">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:12ae340b-bce8-417e-8c8b-8fd78f073d91"/>
                            <a:da name="DEFAULT" type="XPath" 
                                  expr="num:i(../@index+1)"/>
                            <a:da name="EDITABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=255"/>
                              <a:tst expr="&gt;=1"/>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfFunctionId" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    LIN function ID.
                                    &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="Link">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:d42320ca-495a-4d03-8f65-51a1513c7bc5"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="EDITABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=65535"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfProtocolVersion" type="STRING">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Defines the LIN Protocol version which is used by the slave.
                                    &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="Link">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:cdaf5b4c-6111-4a97-a09e-614be235bd91"/>
                            <a:da name="DEFAULT" value="2.1"/>
                            <a:da name="EDITABLE" value="false"/>
                          </v:var>
                          <v:var name="LinIfSupplierId" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    LIN Supplier ID.
                                    &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="Link">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:58478360-77ad-41dc-a149-5196162b1f53"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="EDITABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=32767"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                          <v:var name="LinIfVariant" type="INTEGER">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Specifies the Variant ID.
                                    &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="Link">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="ECUC:1bec9005-853b-46dc-8607-091f91a537b5"/>
                            <a:da name="DEFAULT" value="0"/>
                            <a:da name="EDITABLE" value="false"/>
                            <a:da name="INVALID" type="Range">
                              <a:tst expr="&lt;=255"/>
                              <a:tst expr="&gt;=0"/>
                            </a:da>
                          </v:var>
                        </v:ctr>
                      </v:lst>
                      <v:var name="LinIfStartupState" type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Defines the state of each LIN channel after startup.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:59a7fb27-4bdc-49b5-9d06-fe139cf39575"/>
                        <a:da name="DEFAULT" value="NORMAL"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="((as:modconf(&apos;LinIf&apos;)/LinIfGeneral/LinIfCheckWakeupSupported = &apos;false&apos;) and                           (node:current() = &apos;SLEEP&apos;) and                           (node:exists(as:modconf(&apos;LinSM&apos;)/LinSMConfigSet/*/LinSMChannel/*                           [LinSMComMNetworkHandleRef = node:current()/../LinIfComMNetworkHandleRef]/LinSMSleepSupport                                       )                           )  and                           (as:modconf(&apos;LinSM&apos;)/LinSMConfigSet/*/LinSMChannel/*                           [LinSMComMNetworkHandleRef = node:current()/../LinIfComMNetworkHandleRef]/LinSMSleepSupport = &apos;false&apos;                           )      )" 
                              true="LinIfStartupState cant be SLEEP&apos; while LinIfCheckWakeupSupported is &apos;false&apos; and                           LinSMSleepSupport on the LinSM channel which is linked to LinIf channel is also &apos;false&apos; "/>
                        <a:da name="RANGE">
                          <a:v>NORMAL</a:v>
                          <a:v>SLEEP</a:v>
                        </a:da>
                      </v:var>
                      <v:ctr name="LinIfTransceiverDrvConfig" 
                             type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This container contains the configuration (parameters) of all
                                addressed LIN transceivers by each underlying
                                LIN Transceiver Driver.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="TAB" value="LinIfTransceiverDrvConfig"/>
                        <a:a name="UUID" 
                             value="ECUC:3ddbe282-a769-4c24-b63c-ec4af3e5b96c"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:value(../../../../../LinIfGeneral/LinIfTrcvDriverSupported)" 
                              false="LinIfTrcvDriverSupported has to be ENABLED (references to LinTrcv configured)."/>
                        <v:ref name="LinIfTrcvIdRef" 
                               type="SYMBOLIC-NAME-REFERENCE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  Logical handle of the underlying LIN transceiver to be served by
                                  the LIN Interface.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="Link">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="UUID" 
                               value="ECUC:df3c8eae-155e-48a0-bdac-7438e0cdd781"/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinTrcv/LinTrcvChannel"/>
                        </v:ref>
                      </v:ctr>
                      <v:var name="LinIfWakeupConfirmationUL" 
                             type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter defines the upper layer (UL) module to which the
                                confirmation of the wake-up shall be sent.&lt;/p&gt;
                                &lt;p&gt;&lt;strong&gt;Must be used in conjunction with LinIfCddRef.&lt;/strong&gt;&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:6eef5240-87ec-4625-bcd3-e7462d2b305c"/>
                        <a:da name="DEFAULT" value="LIN_SM"/>
                        <a:da name="INVALID" type="XPath" 
                              expr=". = &apos;CDD&apos; and not(node:exists(../LinIfCddRef))" 
                              true="Having a CDD configured as UL requires an enabled and configured LinIfCddRef."/>
                        <a:da name="RANGE">
                          <a:v>CDD</a:v>
                          <a:v>LIN_SM</a:v>
                        </a:da>
                      </v:var>
                    </v:ctr>
                  </v:lst>
                  <v:var name="LinIfTimeBase" type="FLOAT">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            The time-base for this channel in s (normally 0.002, 0.005 or 0.010s)
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:d3d4848c-709e-4d4b-b219-c54ea93f1156"/>
                    <a:da name="DEFAULT" value="0.005"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=0.255"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                </v:ctr>
              </v:lst>
              <v:ctr name="LinIfDefensiveProgramming" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                &lt;p&gt;Parameters for defensive programming&lt;/p&gt;
                &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Defensive Programming Options"/>
                <v:var name="LinIfDefProgEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                    &lt;p&gt;Enables or disables the defensive
                    programming feature for the module LinIf.&lt;/p&gt;
                    &lt;p&gt;Note: This feature is dependent on the use of the development error detection module.
                    To use the defensive programming feature, proceed as follows:
                    &lt;ol&gt;
                    &lt;li&gt;Enable development error detection&lt;/li&gt;
                    &lt;li&gt;Enable defensive programming&lt;/li&gt;
                    &lt;li&gt;Enable assertions as required&lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Defensive Programming"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../LinIfGeneral/LinIfDevErrorDetect = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="LinIfPrecondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of precondition assertion checks reported from
                  the module LinIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;LinIfDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;LinIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Precondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../LinIfGeneral/LinIfDevErrorDetect = &apos;true&apos;) and (../LinIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="LinIfPostcondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of postcondition assertion checks reported from
                  the module LinIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;LinIfDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;LinIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Postcondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../LinIfGeneral/LinIfDevErrorDetect = &apos;true&apos;) and (../LinIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="LinIfStaticAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of static assertion checks reported from
                  the module LinIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;LinIfDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;LinIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Static Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../LinIfGeneral/LinIfDevErrorDetect = &apos;true&apos;) and (../LinIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="LinIfUnreachAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of unreachable code assertion checks
                  reported from the module LinIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;LinIfDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;LinIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Unreachable Code Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../LinIfGeneral/LinIfDevErrorDetect = &apos;true&apos;) and (../LinIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="LinIfInvariantAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of invariant assertion checks
                  reported from functions of the module LinIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;LinIfDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;LinIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Invariant Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../LinIfGeneral/LinIfDevErrorDetect = &apos;true&apos;) and (../LinIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
              </v:ctr>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the LinIf can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
          <d:chc name="LinTp" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.2.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                      <ad:DATE>2011-11-09T11:36:22Z</ad:DATE>
                    </ad:DOC-REVISION>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>5.8.27</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>Elektrobit Automotive GmbH</ad:ISSUED-BY>
                      <ad:DATE>2021-07-14T23:59:59Z</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC">
                <a:v>&lt;html&gt;
                        Singleton descriptor for the LIN Transport Protocol.
                      &lt;/html&gt;</a:v>
              </a:a>
              <a:a name="LOWER-MULTIPLICITY" value="0"/>
              <a:a name="RELEASE" value="asc:4.0"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <a:a name="UUID" value="ECUC:6f8dbcae-995f-4506-b84b-0be0f7a3fdc8"/>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="LABEL" value="Config Variant"/>
                <a:da name="DEFAULT" value="VariantPostBuild"/>
                <a:da name="EDITABLE" value="false"/>
                <a:da name="RANGE" value="VariantPostBuild"/>
              </v:var>
              <v:ctr name="LinTpGeneral" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        Container that holds all LIN transport protocol general parameters.
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="UUID" 
                     value="ECUC:507bfde0-7d43-44d2-ba6d-7c896dc3a960"/>
                <v:var name="LinTpVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to enable/disable the API function
                          &lt;code&gt;LinTp_GetVersionInfo()&lt;/code&gt; to read
                          out the module&apos;s version information.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: Version info API enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: Version info API disabled.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:bc909b41-a1bb-4fca-9f1a-77f667a29850"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="LinTpRelocatablePbcfgEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Enables/disable support for relocatable postbuild configuration.
                          &lt;ul&gt;
                          &lt;li&gt;True: Postbuild configuration relocatable in memory.&lt;/li&gt;
                          &lt;li&gt;False: Postbuild configuration not relocatable in memory.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(node:contains(node:refs(as:modconf(&apos;PbcfgM&apos;)/PbcfgMBswModules/*/PbcfgMBswModuleRef), as:modconf(&apos;LinTp&apos;)) = &apos;true&apos;)" 
                        true="false" false="true"/>
                </v:var>
                <v:var name="LinTpScheduleChangeDiagApiEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Switches &lt;tt&gt;BswM_LinTp_RequestMode&lt;/tt&gt; API on and off. If turned on
                              diagnostic schedules are requested from  the BSwM automatically. This
                              configuration parameter can only be turned off if
                              LinTpScheduleChangeDiag is disabled in every LinTpChannelConfig.
                            &lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;&lt;tt&gt;true&lt;/tt&gt;: Enables change diagnostic schedule mode API.&lt;/li&gt;
                              &lt;li&gt;&lt;tt&gt;false&lt;/tt&gt;: Disables change diagnostic schedule mode API.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                                &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                                Disabling this parameter reduces the ROM consumption of the
                                module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                            Only used if LIN Master nodes are configured.
                          &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="7b67bfa0-bf2b-11df-851a-0800200c9a66"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="node:exists(as:modconf(&apos;LinIf&apos;)[1]/LinIfGlobalConfig/*[1]/LinIfChannel/*[LinIfNodeType = &apos;LinIfMaster&apos;])"/>
                </v:var>
              </v:ctr>
              <v:lst name="LinTpGlobalConfig" 
                     type="MULTIPLE-CONFIGURATION-CONTAINER">
                <a:da name="MAX" value="1"/>
                <a:da name="MIN" value="1"/>
                <v:ctr name="LinTpGlobalConfig" 
                       type="MULTIPLE-CONFIGURATION-CONTAINER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This container contains the global configuration parameter of the
                          LinTp.&lt;/p&gt;
                          &lt;p&gt;It is a MultipleConfigurationContainer, i.e. this container and its
                          sub-containers exit once per configuration set.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="UUID" 
                       value="ECUC:28592dff-ba46-4041-afc5-c7c2bebdbede"/>
                  <v:var name="LinTpMaxNumberOfRespPendingFrames" 
                         type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            Configures the maximum number of allowed response pending frames.
                            Only used for LIN Master nodes, ignored for slave nodes.
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:890a3d1a-3e8d-49b5-8790-f58e75209c9e"/>
                    <a:da name="DEFAULT" value="8"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="node:exists(node:refs(../LinTpRxNSdu/*/LinTpRxNSduChannelRef)/LinIfNodeType[. = &apos;LinIfMaster&apos;])"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=65534"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="LinTpNumberOfRxNSdu" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;strong&gt;This configuration parameter is not used.&lt;/strong&gt;
                            Number of transport protocol messages that can be received for all
                            channels this node is connected to.
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:78bf5c48-fb9d-4f36-b6db-a148eb98a1a7"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="EDITABLE" value="false"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=65535"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="LinTpNumberOfTxNSdu" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;strong&gt;This configuration parameter is not used.&lt;/strong&gt;
                            Number of transport protocol messages that can be transmitted for all
                            channels this node is connected to.
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:52db9c27-df92-4fee-b6c0-b9bf3d447091"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="EDITABLE" value="false"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=65535"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="LinTpP2Max" type="FLOAT">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            P2 Timeout when a response pending frame is expected in seconds.
                            Only used for LIN Master nodes, ignored for slave nodes.
                            &lt;p&gt;&lt;strong&gt;Note: A value of 0.0 disables this timeout.&lt;/strong&gt;&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:f5f9d77d-0657-40f0-802f-8c889a6c248a"/>
                    <a:da name="DEFAULT" value="2"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="node:exists(node:refs(../LinTpRxNSdu/*/LinTpRxNSduChannelRef)/LinIfNodeType[. = &apos;LinIfMaster&apos;])"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=0.05"/>
                      </mt:range>
                      <mt:xpath>
                        <mt:tst 
                                true="The P2 MAX timeout can not be represented as an uint16 value. The LinTpP2Max value divided by the LinIfTimeBase value must not exceed 65535!" 
                                expr="(((. * 1000000) div (as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase * 1000000)) &gt; 65535)"/>
                        <mt:tst 
                                false="Range check: The minimum value of LinTpP2Max shall be more than or equal to the value of LinTpP2Timing." 
                                expr=". &gt;= ../LinTpP2Timing"/>
                      </mt:xpath>
                    </a:da>
                    <a:da name="WARNING" type="XPath">
                      <a:tst 
                             expr="(as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase &gt; 0) and (num:i((. * 1000000) mod (as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase * 1000000)) != 0)" 
                             true="The timeout is not a multiple of the main function cycle time. The number of ticks for the timeout will be rounded up."/>
                      <a:tst expr="(node:value(.) &gt; 2)" 
                             true="The P2 MAX timeout has exceeded the limit of 2s allowed by the standard (ISO 17987-2:2016(E))"/>
                    </a:da>
                  </v:var>
                  <v:var name="LinTpP2Timing" type="FLOAT">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            Definition of the P2 timeout observation parameter in seconds.
                            &lt;p&gt;&lt;strong&gt;Note: A value of 0.0 disables this timeout.&lt;/strong&gt;&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ECUC:7224db3b-049b-4739-a1de-40d00a6c61c5"/>
                    <a:da name="DEFAULT" value="0.5"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="node:exists(node:refs(../LinTpRxNSdu/*/LinTpRxNSduChannelRef)/LinIfNodeType[. = &apos;LinIfMaster&apos;])"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=0.05"/>
                      </mt:range>
                      <mt:xpath 
                                true="The P2 timeout can not be represented as an uint16 value. The LinTpP2Timing value divided by the LinIfTimeBase value must not exceed 65535!" 
                                expr="(((. * 1000000) div (as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase * 1000000)) &gt; 65535)"/>
                    </a:da>
                    <a:da name="WARNING" type="XPath">
                      <a:tst 
                             expr="(as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase &gt; 0) and (num:i((. * 1000000) mod (as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase * 1000000)) != 0)" 
                             true="The timeout is not a multiple of the main function cycle time. The number of ticks for the timeout will be rounded up."/>
                      <a:tst expr="(node:value(.) &gt; 0.5)" 
                             true="The P2 timeout has exceeded the limit of 0.5s allowed by the standard (ISO 17987-2:2016(E))"/>
                    </a:da>
                  </v:var>
                  <v:lst name="LinTpChannelConfig" type="MAP">
                    <v:ctr name="LinTpChannelConfig" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              This container contains the channel specific configuration parameter of LinTp.
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                      <a:a name="UUID" 
                           value="ECUC:3b714729-b20a-4cd1-a2b2-fe456f2b166f"/>
                      <v:var name="LinTpDropNotRequestedNad" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Configures if TP Frames of not requested LIN-Slaves are dropped or not.
                                &lt;ul&gt;
                                  &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: Do drop TP Frames of Not requested LIN-Slaves&lt;/li&gt;
                                  &lt;li&gt;&lt;code&gt;true&lt;/code&gt;:  Drop not TP Frames of Not requested LIN-Slaves&lt;/li&gt;
                                &lt;/ul&gt;
                                Only used for LIN Master nodes, ignored for slave nodes.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:623b4adc-f857-4db4-8df2-6a4239c3ea12"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="node:exists(node:refs(../../../LinTpRxNSdu/*/LinTpRxNSduChannelRef)/LinIfNodeType[. = &apos;LinIfMaster&apos;])"/>
                      </v:var>
                      <v:var name="LinTpScheduleChangeDiag" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Enables or disables the call of BswM_LinTp_RequestMode() to diagnostic request/response schedule.
                                &lt;ul&gt;
                                  &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: BswM is not called&lt;/li&gt;
                                  &lt;li&gt;&lt;code&gt;true&lt;/code&gt;:  BswM is called&lt;/li&gt;
                                &lt;/ul&gt;
                                Only used for LIN Master nodes, ignored for slave nodes.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:a4f81595-1b5d-411a-b67c-12813b6e908e"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="node:exists(node:refs(../../../LinTpTxNSdu/*/LinTpTxNSduChannelRef)/LinIfNodeType[. = &apos;LinIfMaster&apos;])"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="(. = &apos;true&apos;) and                             (as:modconf(&apos;LinTp&apos;)/LinTpGeneral/LinTpScheduleChangeDiagApiEnable = &apos;false&apos;)" 
                              true="LinTpScheduleChangeDiag can only be enabled if LinTpScheduleChangeDiagApiEnable is turned on."/>
                      </v:var>
                    </v:ctr>
                  </v:lst>
                  <v:lst name="LinTpRxNSdu" type="MAP">
                    <v:ctr name="LinTpRxNSdu" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              Container for each received N-SDU on any channel the node is
                              connected to.
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                      <a:a name="UUID" 
                           value="ECUC:36e83088-e486-4dad-a4f7-aadafe50dfbe"/>
                      <v:var name="LinTpDl" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Data Length Code of this RxNsdu. In case of variable length message,
                                this value indicates the minimum data length.&lt;/p&gt;
                                &lt;p&gt;Range of minimum length is 1 to 4095.&lt;/p&gt;
                                &lt;p&gt;Note that this is not relevant for Tx. The reason for this is to
                                have identical structures for Tx and Rx.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:65010abc-68cc-4364-b4e1-63ab01696cfc"/>
                        <a:da name="DEFAULT" value="1"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=4095"/>
                          <a:tst expr="&gt;=1"/>
                        </a:da>
                      </v:var>
                      <v:var name="LinTpNcr" type="FLOAT">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Value in seconds of the N_Cr timeout. N_Cr is the time until
                                reception of the next Consecutive Frame N_PDU.
                                &lt;p&gt;&lt;strong&gt;Note: Disabling this config parameter or a value of 0.0 disables this timeout.&lt;/strong&gt;&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:afea2bb4-341b-478e-b5c3-85c660cf88be"/>
                        <a:da name="DEFAULT" value="1"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=1"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                        <a:da name="WARNING" type="XPath" 
                              expr="(as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase &gt; 0) and (num:i((. * 1000000) mod (as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase * 1000000)) != 0)" 
                              true="The timeout is not a multiple of the main function cycle time. The number of ticks for the timeout will be rounded up."/>
                      </v:var>
                      <v:var name="LinTpRxNSduId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                The identifier of the Transport Protocol message.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="ECUC:a260e374-b6ba-43eb-97ad-f35f03b2df6c"/>
                        <a:da name="DEFAULT" type="XPath" expr="../@index"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=65535"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                          <mt:xpath 
                                    false="LinTpRxNSduId must be zero-based and consecutive." 
                                    expr="node:isconsecutive(as:modconf( &apos;LinTp&apos; )[1]/LinTpGlobalConfig/*[1]/LinTpRxNSdu/*/LinTpRxNSduId, 0)"/>
                        </a:da>
                      </v:var>
                      <v:var name="LinTpRxNSduNad" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;A N-SDU transported on LIN is identified using the NAD for the
                                specific slave.&lt;/p&gt;
                                &lt;p&gt;Only used for LIN Master nodes, ignored for slave nodes.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:7d1d4df7-f790-4e69-a075-cbd01e2453a9"/>
                        <a:da name="DEFAULT" value="1"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="node:ref(../LinTpRxNSduChannelRef)/LinIfNodeType = &apos;LinIfMaster&apos;"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=255"/>
                            <mt:tst expr="&gt;=1"/>
                          </mt:range>
                          <mt:xpath>
                            <mt:tst 
                                    true="LinTpRxNSduNad must be unique for every channel. There is another LinTpRxNSduNad with the same value." 
                                    expr="num:i(count(../../*[(LinTpRxNSduNad = node:current()) and                             (LinTpRxNSduChannelRef = node:current()/../LinTpRxNSduChannelRef)])) &gt; 1"/>
                            <mt:tst 
                                    true="This NAD is reserved for functional addressed transmissions. A Slave will never respond with this NAD." 
                                    expr="(. = 126)"/>
                            <mt:tst 
                                    true="This NAD is reserved for broadcast transmissions. A Slave will never respond with this NAD." 
                                    expr="(. = 127)"/>
                            <mt:tst 
                                    true="LinTpRxNSduNad is not allowed to be 0. Zero is reserved for Sleep Command. " 
                                    expr="(. = 0)"/>
                          </mt:xpath>
                        </a:da>
                        <a:da name="WARNING" type="XPath" 
                              expr="num:i(count(../../../LinTpTxNSdu/*[(LinTpTxNSduNad = node:current()) and                                   (LinTpTxNSduChannelRef = node:current()/../LinTpRxNSduChannelRef)])) &gt; 0" 
                              false="A LinTpTxNSdu with the same NAD should be added to container LinTpTxNSdu. There always need to be a request before a response. If a response is sent without a request, the response will be ignored"/>
                      </v:var>
                      <v:ref name="LinTpRxNSduPduRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to the global PDU.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ECUC:c5020b6e-1867-43c2-8ac6-d986c14c95d8"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="LinTpRxNSduPduRef must reference a valid EcuC PDU (/AUTOSAR/EcuC/PduCollection/Pdu)."/>
                          <a:tst 
                                 expr="( num:i(count(../../../LinTpRxNSdu/*[LinTpRxNSduPduRef = node:current()])) +                                          num:i(count(../../../LinTpTxNSdu/*[LinTpTxNSduPduRef = node:current()])) ) &gt; 1" 
                                 true="LinTpRxNSduPduRef must reference a unique EcuC PDU within the LinTp. There is at least one further Rx or Tx N-SDU that uses the same (LinTpRxNSduPduRef or LinTpTxNSduPduRef) reference."/>
                          <a:tst 
                                 expr="node:refvalid(.) and node:value(node:ref(.)/PduLength) &gt; 4095" 
                                 true="The PduLength configured for this Pdu in EcuC module exceeds the maximum value (4095) supported by LinTp."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                      </v:ref>
                      <v:ref name="LinTpRxNSduChannelRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Index of the channel this N-SDU belongs to.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ECUC:50174cd9-703b-4f07-9f44-7d0cff4acef2"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="LinTpRxNSduChannelRef must reference a valid LinIf channel (/AUTOSAR/LinIf/LinIfGlobalConfig/LinIfChannel)."/>
                          <a:tst 
                                 expr="(node:ref(.)/LinIfNodeType = &apos;LinIfSlave&apos;) and (count(../../*[LinTpRxNSduChannelRef = node:current()]) &gt; 1)" 
                                 true="A single LinTpRxNSdu has to be configured for LIN Slaves. It shares all physical and functional requests."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel"/>
                      </v:ref>
                      <v:ref name="LinTpRxNSduTpChannelRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to LinTp configuration for this channel.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="UUID" 
                             value="ECUC:50174cd9-703b-3e16-9f44-7d0cff4acef2"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="LinTpRxNSduTpChannelRef must reference a valid LinTp channel config (/AUTOSAR/LinTp/LinTpGlobalConfig/LinTpChannelConfig)."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinTp/LinTpGlobalConfig/LinTpChannelConfig"/>
                      </v:ref>
                    </v:ctr>
                  </v:lst>
                  <v:lst name="LinTpTxNSdu" type="MAP">
                    <v:ctr name="LinTpTxNSdu" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              Container for each transmitted N-SDU on any channel the node is
                              connected to.
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                      <a:a name="UUID" 
                           value="ECUC:0f57fcb7-8212-43f3-b93d-775bbe842ee5"/>
                      <v:var name="LinTpMaxBufReq" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                This parameter defines the maximum number of times the LinTp
                                should request upper layer for the Tx Buffer. It is also used
                                to limit the number of retries for PduR_LinTpCopyTxData
                                when no timer is active.
                                &lt;p&gt;&lt;strong&gt;This parameter is currently not used.&lt;/strong&gt;&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:2341e503-9be7-4507-a014-35749034fa28"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="EDITABLE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=255"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="LinTpNas" type="FLOAT">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Value in second of the N_As timeout. N_As is the time for
                                transmission of a LIN frame (any N_PDU) on the part of the sender.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:53caf4f4-f8d1-4a6c-b58b-ba5b6587c1a8"/>
                        <a:da name="DEFAULT" value="1"/>
                        <a:da name="ENABLE" value="true"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=1"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                        <a:da name="WARNING" type="XPath" 
                              expr="(as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase &gt; 0) and (num:i((. * 1000000) mod (as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase * 1000000)) != 0)" 
                              true="The timeout is not a multiple of the main function cycle time. The number of ticks for the timeout will be rounded up."/>
                      </v:var>
                      <v:var name="LinTpNcs" type="FLOAT">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Value in seconds of for the maximum N_CS.
                                This timeout monitors the time waiting for Tx-data arrival within the Ecu.
                                 &lt;p&gt;&lt;strong&gt;Note: A value of 0.0 disables this timeout.&lt;/strong&gt;&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:8e2477c2-4d97-4bce-ad06-edbe632f95db"/>
                        <a:da name="DEFAULT" value="0.8"/>
                        <a:da name="ENABLE" value="true"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=1"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                        <a:da name="WARNING" type="XPath" 
                              expr="(as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase &gt; 0) and (num:i((. * 1000000) mod (as:modconf( &apos;LinIf&apos; )[1]/LinIfGlobalConfig/*[1]/LinIfTimeBase * 1000000)) != 0)" 
                              true="The timeout is not a multiple of the main function cycle time. The number of ticks for the timeout will be rounded up."/>
                      </v:var>
                      <v:var name="LinTpTxNSduId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                The identifier of the Transport Protocol message. This ID will
                                be the one that is communicated with upper layers.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="ECUC:e6fac2a8-b8d9-48c7-a221-b0d95b1a6dbb"/>
                        <a:da name="DEFAULT" type="XPath" expr="../@index"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=65535"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                          <mt:xpath 
                                    false="LinTpTxNSduId must be zero-based and consecutive." 
                                    expr="node:isconsecutive(as:modconf( &apos;LinTp&apos; )[1]/LinTpGlobalConfig/*[1]/LinTpTxNSdu/*/LinTpTxNSduId, 0)"/>
                        </a:da>
                      </v:var>
                      <v:var name="LinTpTxNSduNad" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;A N-SDU transported on LIN is identified using the NAD for the
                                specific slave.&lt;/p&gt;
                                &lt;p&gt;Only used for LIN Master nodes, ignored for slave nodes.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:68bd9442-1566-4238-a020-64413a564106"/>
                        <a:da name="DEFAULT" value="1"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="node:ref(../LinTpTxNSduChannelRef)/LinIfNodeType = &apos;LinIfMaster&apos;"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=255"/>
                            <mt:tst expr="&gt;=1"/>
                          </mt:range>
                          <mt:xpath>
                            <mt:tst 
                                    true="LinTpTxNSduNad must be unique for every channel. There is another LinTpTxNSduNad with the same value." 
                                    expr="num:i(count(../../*[(LinTpTxNSduNad = node:current()) and                             (LinTpTxNSduChannelRef = node:current()/../LinTpTxNSduChannelRef)])) &gt; 1"/>
                            <mt:tst 
                                    true="LinTpTxNSduNad is not allowed to be 0. Zero is reserved for Sleep Command. " 
                                    expr="(. = 0)"/>
                          </mt:xpath>
                        </a:da>
                      </v:var>
                      <v:ref name="LinTpTxNSduPduRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to the global PDU.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ECUC:fc9777f3-1e35-44c4-863c-26936aa20382"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="LinTpTxNSduPduRef must reference a valid EcuC PDU (/AUTOSAR/EcuC/PduCollection/Pdu)."/>
                          <a:tst 
                                 expr="( num:i(count(../../../LinTpRxNSdu/*[LinTpRxNSduPduRef = node:current()])) +                                          num:i(count(../../../LinTpTxNSdu/*[LinTpTxNSduPduRef = node:current()])) ) &gt; 1" 
                                 true="LinTpTxNSduPduRef must reference a unique EcuC PDU within the LinTp. There is at least one further Rx or Tx N-SDU that uses the same (LinTpRxNSduPduRef or LinTpTxNSduPduRef) reference."/>
                          <a:tst 
                                 expr="node:refvalid(.) and node:value(node:ref(.)/PduLength) &gt; 4095" 
                                 true="The PduLength configured for this Pdu in EcuC module exceeds the maximum value (4095) supported by LinTp."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                      </v:ref>
                      <v:ref name="LinTpTxNSduTpChannelRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to LinTp configuration for this channel.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="UUID" 
                             value="ECUC:cf97bb02-8432-5141-a195-bfa294ac463d"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="LinTpRxNSduTpChannelRef must reference a valid LinTp channel config ((/AUTOSAR/LinTp/LinTpGlobalConfig/LinTpChannelConfig)."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinTp/LinTpGlobalConfig/LinTpChannelConfig"/>
                      </v:ref>
                      <v:ref name="LinTpTxNSduChannelRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Index of the channel this N-SDU belongs to.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ECUC:cf97bb02-8432-4030-a195-bfa294ac463d"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="LinTpTxNSduChannelRef must reference a valid LinIf channel (/AUTOSAR/LinIf/LinIfGlobalConfig/LinIfChannel)."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel"/>
                      </v:ref>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/LinTp"/>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="5"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="8"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="27"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="32770"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the LinTp can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
