"""
 Copyright (C) Elektrobit Automotive GmbH
 All rights exclusively reserved for Elektrobit Automotive GmbH,
 unless expressly agreed to otherwise.
"""

from .constants import *

## Class representing one node
class Node :
    def __init__(self, id, label, color, shape, clusterid, fontcolor):
        """
        CTor creates new Node
        :param id: id of the node
        :param label: text to be added in the node
        :param color: color of the node
        :param shape: the node's generated shape
        :param clusterid: the id of the cluster owns this node
        :param fontcolor: the color of the text for this node
        """ 
        self.id = id
        self._label = label
        self._color = color if(color is not None) else WHITE
        self._shape = shape if(shape is not None) else ""
        self._clusterid = clusterid if(clusterid is not None) else DEFAULT_CLUSTER
        self._fontcolor = fontcolor


    def __get_unique_id(self):
        """
        Builds a unique id of the Node by combining the cluster id and the node id
        """ 
        return self._clusterid + "_" + self.id


    def generate(self, subgraph):
        """
        generates the node to the given subgraph
        :param subgraph: the subgraph to add the node to
        """ 
        subgraph.attr('node', fillcolor=self._color, shape = self._shape, label=self._label, style='filled', fontcolor=self._fontcolor)
        subgraph.node(self.id)


    @staticmethod
    def get_or_create_node(nodes, cluster, xmlelement, properties, shape = None, color = None, additionaltext = None, fontcolor = BLACK):
        """
        Create node from the given xmlelement and uses the passed property names 
        as label in the diagram
        :param nodes: dictionary of all nodes to check if the node already exist
        :param cluster: cluster to add the node to
        :param xmlelement: xml element that contains info to create this node
        :param properties: info from xml to add the node
        :param shape: shape of the node
        :param color: color of the node
        :param additionaltext: text to be added after the properties
        :param fontcolor: color of the text of the node
        :return: either the already existing node or the newly created one
        """ 
        elementId = xmlelement.get("id") + "_" + cluster.id
        return Node.get_or_create_node_with_customized_id(elementId, nodes, cluster, xmlelement, properties, shape, color, additionaltext, fontcolor)


    @staticmethod
    def get_or_create_node_with_customized_id(customizedid, nodes, cluster, xmlelement=None, properties={}, shape = None, color = None, additionaltext = None, fontcolor = None):
        """
        Create node from the given xmlelement with custom id
        :param customizedid: custom id of the node 
        :param nodes: dictionary of all nodes to check if the node already exist
        :param cluster: cluster to add the node to
        :param xmlelement: xml element that contains info to create this node
        :param properties: info from xml to add the node
        :param shape: shape of the node
        :param color: color of the node
        :param additionaltext: text to be added after the properties
        :param fontcolor: color of the text of the node
        :return: either the already existing node or the newly created one
        """ 
        elementId = customizedid
        node = nodes.get(elementId)
        if node is None:
            label = ""
            for prop_key, prop_value in properties.items():
                value = None
                if xmlelement.find(prop_key) is not None:
                    value = xmlelement.find(prop_key).text
                # if the property is the id (attribute in the xml element and not an element)
                elif xmlelement.get(prop_key) is not None:
                    value = xmlelement.get(prop_key)
                if value is not None:
                    label = '{}{}: {}\\n'.format(label, prop_value, value) if prop_key != '.' else '{}\\n'.format(value)
        
            if additionaltext is not None:
                label = label + additionaltext

            node = Node(elementId, label, color, shape, cluster.id, fontcolor)
            nodes[node.__get_unique_id()] = node
            cluster.add_node(node)
        return node


    def __repr__(self):
        return 'Node(' + self.id + ',' + self._label + ')'
