<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM1I7R0_GENERIC" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="Crypto" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>0.1.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY/>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC">
                <a:v>&lt;html&gt;
                    &lt;p&gt;
                      EN: Configuration of the Crypto module.
                    &lt;/p&gt;
                  &lt;/html&gt;</a:v>
              </a:a>
              <a:a name="LOWER-MULTIPLICITY" value="1"/>
              <a:a name="RELEASE" value="asc:4.3"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="3"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="7"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="42"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="114"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
                <v:var name="VendorApiInfix" type="STRING">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor Api Infix of the dedicated implementation of this module according to the AUTOSAR
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="VendorApiInfix"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="text:replaceAll(text:replaceAll(name(../../../..), &apos;Crypto&apos;, &apos;&apos;), &apos;_&apos;, &apos;&apos;)"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst 
                           expr="(num:i(1) &lt; num:i(count(as:modconf(&apos;Crypto&apos;)))) and (true() = node:empty(.))" 
                           true="&apos;VendorApiInfix&apos; shall not be empty if at least 2 &apos;Crypto&apos; modules are included. &apos;VendorApiInfix&apos; is derived (remove all &apos;Crypto&apos; and &apos;_&apos; substrings) from configured module name during addition of Crypto module instance in &apos;Module Configurations&apos;."/>
                    <a:tst 
                           expr="(num:i(1) &lt; num:i(count(as:modconf(&apos;Crypto&apos;)))) and (false() = text:uniq(as:modconf(&apos;Crypto&apos;)/CommonPublishedInformation/VendorApiInfix, node:value(.)))" 
                           true="&apos;VendorApiInfix&apos; shall be unique over all configured &apos;Crypto&apos; modules. &apos;VendorApiInfix&apos; is derived (remove all &apos;Crypto&apos; and &apos;_&apos; substrings) from configured module name during addition of Crypto module instance in &apos;Module Configurations&apos;."/>
                  </a:da>
                </v:var>
              </v:ctr>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;
                        Select the configuration variant. Currently only PreCompile is supported.
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                     type="IMPLEMENTATIONCONFIGCLASS">
                  <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                </a:a>
                <a:a name="LABEL" value="Config Variant"/>
                <a:da name="DEFAULT" value="VariantPreCompile"/>
                <a:da name="EDITABLE" value="false"/>
                <a:da name="RANGE" value="VariantPreCompile"/>
              </v:var>
              <v:ctr name="CryptoDefensiveProgramming" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                &lt;p&gt;Parameters for defensive programming&lt;/p&gt;
                &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Defensive Programming Options"/>
                <v:var name="CryptoDefProgEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                    &lt;p&gt;Enables or disables the defensive
                    programming feature for the module Crypto.&lt;/p&gt;
                    &lt;p&gt;Note: This feature is dependent on the use of the development error detection module.
                    To use the defensive programming feature, proceed as follows:
                    &lt;ol&gt;
                    &lt;li&gt;Enable development error detection&lt;/li&gt;
                    &lt;li&gt;Enable defensive programming&lt;/li&gt;
                    &lt;li&gt;Enable assertions as required&lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Defensive Programming"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../CryptoGeneral/CryptoDevErrorDetect = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CryptoPrecondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of precondition assertion checks reported from
                  the module Crypto.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CryptoDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CryptoDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Precondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CryptoGeneral/CryptoDevErrorDetect = &apos;true&apos;) and (../CryptoDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CryptoPostcondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of postcondition assertion checks reported from
                  the module Crypto.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CryptoDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CryptoDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Postcondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CryptoGeneral/CryptoDevErrorDetect = &apos;true&apos;) and (../CryptoDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CryptoStaticAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of static assertion checks reported from
                  the module Crypto.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CryptoDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CryptoDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Static Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CryptoGeneral/CryptoDevErrorDetect = &apos;true&apos;) and (../CryptoDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CryptoUnreachAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of unreachable code assertion checks
                  reported from the module Crypto.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CryptoDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CryptoDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Unreachable Code Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CryptoGeneral/CryptoDevErrorDetect = &apos;true&apos;) and (../CryptoDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CryptoInvariantAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of invariant assertion checks
                  reported from functions of the module Crypto.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CryptoDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CryptoDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Invariant Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CryptoGeneral/CryptoDevErrorDetect = &apos;true&apos;) and (../CryptoDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
              </v:ctr>
              <v:ctr name="CryptoGeneral" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;
                        Container for common configuration options.
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="CryptoGeneral"/>
                <a:da name="INVALID" type="XPath" 
                      expr="(num:i(0) != (num:i(count(./../CryptoDriverObjects/*/*[CryptoQueueSize != 0])))) and (false() = node:exists(./CryptoMainFunctionPeriod))" 
                      true="Parameter &apos;CryptoMainFunctionPeriod&apos; shall be enabled and configured if there exists a CryptoDriverObject with a configured CryptoQueueSize larger than zero."/>
                <v:var name="CryptoDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Switches the development error detection and notification on or off.
                        &lt;/p&gt;
                        &lt;p&gt;
                          TRUE = detection and notification is enabled.&lt;br/&gt;
                          FALSE = detection and notification is disabled.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CryptoDevErrorDetect"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:da name="DEFAULT" value="False"/>
                </v:var>
                <v:var name="CryptoInstanceId" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Instance ID of the crypto driver. This ID is used to discern several crypto
                          drivers in case more than one driver is used in the same ECU.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CryptoInstanceId"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:da name="DEFAULT" value="0"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&gt;=0"/>
                      <mt:tst expr="&lt;=255"/>
                    </mt:range>
                    <mt:xpath true="The instance Id node is not unique." 
                              expr="not(text:uniq(as:modconf(&apos;Crypto&apos;)/CryptoGeneral/CryptoInstanceId, node:value(.)))"/>
                  </a:da>
                </v:var>
                <v:var name="CryptoMainFunctionPeriod" type="FLOAT">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Specifies the period of main function Crypto_MainFunction in seconds.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CryptoMainFunctionPeriod"/>
                  <a:a name="OPTIONAL" value="True"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:da name="DEFAULT" value="0.01"/>
                  <a:da name="ENABLE" value="True"/>
                  <a:da name="INVALID" type="Range" expr="&gt;0"/>
                </v:var>
                <v:var name="CryptoVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Pre-processor switch to enable and disable availability of the API
                          Crypto_GetVersionInfo().
                        &lt;/p&gt;
                        &lt;p&gt;
                          TRUE = API Crypto_GetVersionInfo() is available.&lt;br/&gt;
                          FALSE = API Crypto_GetVersionInfo() is not available.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CryptoVersionInfoApi"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:da name="DEFAULT" value="False"/>
                </v:var>
              </v:ctr>
              <v:ctr name="CryptoDriverObjects" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;
                        Container for CRYPTO Objects.
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="CryptoDriverObjects"/>
                <a:a name="TAB" value="CryptoDriverObjects"/>
                <a:da name="INVALID" type="XPath">
                  <a:tst 
                         expr="node:isconsecutive(./*/*/CryptoDriverObjectId,0)" 
                         false="CryptoDriverObjectId&apos;s shall be consecutive starting from 0."/>
                  <a:tst 
                         expr="(num:i(count(node:refs(*/*/*/*)/CryptoPrimitiveAlgorithmFamiliy/*[. = &apos;CRYPTO_ALGOFAM_SIPHASH&apos;])) != num:i(0)) and (node:value(as:modconf(&apos;Base&apos;)/BaseTypes/BaseTypes64bit) = &apos;false&apos;)" 
                         true="Siphash is configured, Base 64 support shall be enabled."/>
                  <a:tst 
                         expr="num:i(0) != num:i(count(node:refs(*/*/*/*)/CryptoPrimitiveService[. != &apos;HASH&apos;])) and false() = node:exists(../CryptoKeys)" 
                         true="If a CryptoPrimitive (which is NOT part of CryptoPrimitiveService HASH) is referenced within a Crypto Driver Object, CryptoKeys have to be configured."/>
                </a:da>
                <v:lst name="CryptoDriverObject" type="MAP">
                  <a:a name="TAB" value="CryptoDriverObjects"/>
                  <a:da name="EDITABLE" value="False"/>
                  <a:da name="MIN" value="0"/>
                  <v:ctr name="CryptoDriverObject" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Configuration of a CryptoDriverObject.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="LABEL" value="CryptoDriverObject"/>
                    <v:var name="CryptoDriverObjectId" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Identifier of the Crypto Driver Object. The Crypto Driver Object
                              offers different crypto primitives.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoDriverObjectId"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="0"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&gt;=0"/>
                        <a:tst expr="&lt;=4294967295"/>
                      </a:da>
                    </v:var>
                    <v:lst name="CryptoPrimitiveRef">
                      <v:ref name="CryptoPrimitiveRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                              &lt;p&gt;
                                Refers to primitive in the CRYPTO.
                              &lt;/p&gt;
                              &lt;p&gt;
                                The CryptoPrimitive is a pre-configured container of the crypto
                                service that shall be used.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="CryptoPrimitiveRef"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="not(node:refvalid(.))" 
                                 true="The configured node does not exist or may not be referenced."/>
                          <a:tst 
                                 expr="not(text:uniq(node:paths(node:refs(./../*)), node:path(node:ref(.))))" 
                                 true="The configured node is not unique."/>
                          <a:tst 
                                 expr="(node:ref(.)/CryptoPrimitiveService = &apos;DECRYPT&apos; and node:ref(.)/CryptoPrimitiveAlgorithmMode/* = &apos;CRYPTO_ALGOMODE_RSAES_OAEP&apos;) and                                        (num:i(1) &lt; num:i(count(node:filter(node:refs(./../*), &apos;./CryptoPrimitiveService = &quot;DECRYPT&quot; and ./CryptoPrimitiveAlgorithmMode/* = &quot;CRYPTO_ALGOMODE_RSAES_OAEP&quot;&apos;))))" 
                                 true="Only one RSAES-OAEP decryption primitive per Crypto driver object can be configured at the same time."/>
                          <a:tst 
                                 expr="(node:ref(.)/CryptoPrimitiveService = &apos;ENCRYPT&apos; and node:ref(.)/CryptoPrimitiveAlgorithmMode/* = &apos;CRYPTO_ALGOMODE_RSAES_OAEP&apos;) and                                        (num:i(1) &lt; num:i(count(node:filter(node:refs(./../*), &apos;./CryptoPrimitiveService = &quot;ENCRYPT&quot; and ./CryptoPrimitiveAlgorithmMode/* = &quot;CRYPTO_ALGOMODE_RSAES_OAEP&quot;&apos;))))" 
                                 true="Only one RSAES-OAEP encryption primitive per Crypto driver object can be configured at the same time."/>
                        </a:da>
                        <a:da name="RANGE" type="XPath" 
                              expr="node:paths(./../../../../../CryptoPrimitives/*/CryptoPrimitive/*)"/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoPrimitives/CryptoPrimitive"/>
                      </v:ref>
                    </v:lst>
                    <v:var name="CryptoQueueSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Size of the queue in the Crypto Driver. Defines the maximum
                              number of jobs in the Crypto Driver Object queue. If it is set to
                              0, queueing is disabled in the Crypto Driver Object.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoQueueSize"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="0"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&gt;=0"/>
                        <a:tst expr="&lt;=4294967295"/>
                      </a:da>
                    </v:var>
                  </v:ctr>
                </v:lst>
              </v:ctr>
              <v:ctr name="CryptoKeyElements" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;
                        Container for Crypto key elements.
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="CryptoKeyElements"/>
                <a:a name="OPTIONAL" value="False"/>
                <a:a name="TAB" value="CryptoKeyElements"/>
                <a:da name="EDITABLE" value="False"/>
                <a:da name="ENABLE" value="True"/>
                <v:lst name="CryptoKeyElement" type="MAP">
                  <a:a name="TAB" value="CryptoKeyElements"/>
                  <a:da name="EDITABLE" value="True"/>
                  <a:da name="MIN" value="1"/>
                  <v:ctr name="CryptoKeyElement" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Configuration of a CryptoKeyElement.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="LABEL" value="CryptoKeyElement"/>
                    <a:da name="EDITABLE" value="True"/>
                    <v:var name="CryptoKeyElementAllowPartialAccess" 
                           type="BOOLEAN">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Enable or disable writing and reading the key element with data
                              smaller than the size of the element.
                            &lt;/p&gt;
                            &lt;p&gt;
                              TRUE = enable partial access of the key element.&lt;br/&gt;
                              FALSE = disable partial access of the key element.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" 
                           value="CryptoKeyElementAllowPartialAccess"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="False"/>
                      <a:da name="EDITABLE" value="True"/>
                    </v:var>
                    <v:var name="CryptoKeyElementId" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Identifier of the CRYPTO key element.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyElementId"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="1"/>
                      <a:da name="EDITABLE" value="True"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&gt;=0"/>
                        <a:tst expr="&lt;=4294967295"/>
                      </a:da>
                    </v:var>
                    <v:var name="CryptoKeyElementInitValue" type="STRING">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Value which will be used to fill the element during
                              initialization, when the element is not already initialized.
                              &lt;br/&gt;&lt;br/&gt;
                              The value is parsed as comma-separated byte values given in hexadecimal representation (uint8 array).
                              E.g. 0x12, 0xab, 0xff would be a valid input.
                              &lt;br/&gt;&lt;br/&gt;
                              If initialization value contains less hexadecimal values than configured by CryptoKeyElementSize the array is filled with 0x00 in the end.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyElementInitValue"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="EDITABLE" value="True"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="(node:empty(.) or text:match(node:value(.), &apos;^(\s*0x[A-Fa-f0-9]{2}\s*)(\s*,\s*0x[A-Fa-f0-9]{2}\s*)*$&apos;)) and node:value(../CryptoKeyElementSize) &gt;= count(text:split(node:value(.), &apos;,&apos;))" 
                            false="The initialization value is not given in the correct format or contains more values than configured by CryptoKeyElementSize."/>
                    </v:var>
                    <v:var name="CryptoKeyElementPersist" type="BOOLEAN">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Enable or disable persisting of the key element in non-volatile
                              storage.
                            &lt;/p&gt;
                            &lt;p&gt;
                              TRUE = enable persisting of the key element.&lt;br/&gt;
                              FALSE = disable persisting of the key element.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyElementPersist"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="False"/>
                      <a:da name="EDITABLE" value="True"/>
                    </v:var>
                    <v:var name="CryptoKeyElementReadAccess" type="ENUMERATION">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Define the reading access rights of the key element.
                            &lt;/p&gt;
                            &lt;p&gt;
                              CRYPTO_RA_DENIED = key element cannot be read from outside the
                              Crypto Driver.&lt;br/&gt;
                              CRYPTO_RA_INTERNAL_COPY = key element can be copied to another
                              key element in the same Crypto Driver.&lt;br/&gt;
                              CRYPTO_RA_ALLOWED = key element can be read as plaintext.&lt;br/&gt;
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyElementReadAccess"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="CRYPTO_RA_DENIED"/>
                      <a:da name="EDITABLE" value="True"/>
                      <a:da name="RANGE">
                        <a:v>CRYPTO_RA_ALLOWED</a:v>
                        <a:v>CRYPTO_RA_DENIED</a:v>
                        <a:v>CRYPTO_RA_INTERNAL_COPY</a:v>
                      </a:da>
                    </v:var>
                    <v:var name="CryptoKeyElementSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Maximum size of a Crypto key element in bytes.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyElementSize"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="1"/>
                      <a:da name="EDITABLE" value="True"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&gt;=1"/>
                        <a:tst expr="&lt;=4294967295"/>
                      </a:da>
                    </v:var>
                    <v:var name="CryptoKeyElementWriteAccess" 
                           type="ENUMERATION">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Define the writing access rights of the key element.
                            &lt;/p&gt;
                            &lt;p&gt;
                              CRYPTO_WA_DENIED = key element can not be written from outside
                              the Crypto Driver.&lt;br/&gt;
                              CRYPTO_WA_INTERNAL_COPY = key element can be filled with another
                              key element in the same Crypto Driver.&lt;br/&gt;

                              CRYPTO_WA_ALLOWED = key element can be written as plaintext.&lt;br/&gt;
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyElementWriteAccess"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="CRYPTO_WA_DENIED"/>
                      <a:da name="EDITABLE" value="True"/>
                      <a:da name="RANGE">
                        <a:v>CRYPTO_WA_ALLOWED</a:v>
                        <a:v>CRYPTO_WA_DENIED</a:v>
                        <a:v>CRYPTO_WA_INTERNAL_COPY</a:v>
                      </a:da>
                    </v:var>
                  </v:ctr>
                </v:lst>
              </v:ctr>
              <v:ctr name="CryptoKeyTypes" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;
                        Container for CRYPTO key types.
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="CryptoKeyTypes"/>
                <a:a name="OPTIONAL" value="False"/>
                <a:a name="TAB" value="CryptoKeyTypes"/>
                <a:da name="EDITABLE" value="False"/>
                <a:da name="ENABLE" value="True"/>
                <v:lst name="CryptoKeyType" type="MAP">
                  <a:a name="TAB" value="CryptoKeyTypes"/>
                  <a:da name="EDITABLE" value="True"/>
                  <a:da name="MIN" value="1"/>
                  <v:ctr name="CryptoKeyType" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Configuration of a CryptoKeyType.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="LABEL" value="CryptoKeyType"/>
                    <a:da name="EDITABLE" value="True"/>
                    <v:lst name="CryptoKeyElementRef">
                      <a:da name="EDITABLE" value="True"/>
                      <a:da name="MIN" value="1"/>
                      <v:ref name="CryptoKeyElementRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                              &lt;p&gt;
                                Refers to a CryptoKeyElement, which holds the configuration of
                                the crypto key element.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="CryptoKeyElementRef"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:da name="EDITABLE" value="True"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="not(node:refvalid(.))" 
                                 true="The configured node does not exist or may not be referenced."/>
                          <a:tst 
                                 expr="not(text:uniq(node:paths(node:refs(./../*)), node:path(node:ref(.))))" 
                                 true="The configured node is not unique."/>
                        </a:da>
                        <a:da name="RANGE" type="XPath" 
                              expr="node:paths(./../../../../../CryptoKeyElements/CryptoKeyElement/*)"/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoKeyElements/CryptoKeyElement"/>
                      </v:ref>
                    </v:lst>
                  </v:ctr>
                </v:lst>
              </v:ctr>
              <v:ctr name="CryptoKeys" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;
                        Container for CRYPTO keys.
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="CryptoKeys"/>
                <a:a name="OPTIONAL" value="True"/>
                <a:a name="TAB" value="CryptoKeys"/>
                <a:da name="ENABLE" value="True"/>
                <a:da name="INVALID" type="XPath" 
                      expr="node:isconsecutive(./*/*/CryptoKeyId,0)" 
                      false="CryptoKeyId&apos;s shall be consecutive starting from 0."/>
                <v:lst name="CryptoKey" type="MAP">
                  <a:a name="TAB" value="CryptoKeys"/>
                  <a:da name="MIN" value="1"/>
                  <v:ctr name="CryptoKey" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Configuration of a CryptoKey.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="LABEL" value="CryptoKey"/>
                    <v:var name="CryptoKeyDeriveIterations" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Holds the number of iterations to be performed by the key
                              derivation primitive.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyDeriveIterations"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="1"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&gt;=1"/>
                        <a:tst expr="&lt;=4294967295"/>
                      </a:da>
                    </v:var>
                    <v:var name="CryptoKeyId" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Identifier of the CRYPTO Key.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyId"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="DEFAULT" value="0"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&gt;=0"/>
                        <a:tst expr="&lt;=4294967295"/>
                      </a:da>
                    </v:var>
                    <v:ref name="CryptoKeyTypeRef" type="REFERENCE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Refers to a CryptoKeyType. The CryptoKeyType provides the
                              information which key elements are contained in a CryptoKey.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyTypeRef"/>
                      <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="not(node:refvalid(.))" 
                            true="The configured node does not exist or may not be referenced."/>
                      <a:da name="RANGE" type="XPath" 
                            expr="node:paths(./../../../../CryptoKeyTypes/CryptoKeyType/*)"/>
                      <a:da name="REF" 
                            value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoKeyTypes/CryptoKeyType"/>
                    </v:ref>
                    <v:lst name="CryptoKeyNvRamBlockIds" type="MAP">
                      <a:a name="COLUMNS">
                        <a:v>CryptoPersistKeyElement</a:v>
                        <a:v>CryptoNvramBlockIdRef</a:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoKeyNvRamBlockIds"/>
                      <a:da name="EDITABLE" type="XPath" 
                            expr="num:i(0) != num:i(count(node:refs(node:refs(./../CryptoKeyTypeRef)/*/*)/CryptoKeyElementPersist[node:value(.) = &apos;true&apos;]))"/>
                      <a:da name="MIN" value="0"/>
                      <a:da name="WARNING" type="XPath" 
                            expr="(count(as:modconf(&apos;NvM&apos;)) &gt; 0) or (count(*) = 0)" 
                            false="Verification of CryptoNvramBlockIdRef cannot be performed for CryptoNvramBlockIdRef as NvM module is not available."/>
                      <v:ctr name="CryptoKeyNvRamBlockIds" type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                              &lt;b&gt;Crypto Block Configuration&lt;/b&gt;
                              &lt;p&gt;This container contains the configuration (parameters) for a
                                non-volatile memory block reference, which is used from the Crypto. If the permanent
                                storage of a key element entry is required, a valid NvM block reference
                                needs to be configured.
                                Otherwise no NvM block and block reference need to be configured, so the data is stored only volatile.&lt;/p&gt;
                              &lt;p&gt;The required NvM block references (CryptoNvRamBlockId&apos;s) need to be configured by the user.
                              The user needs to create and configure the NvM blocks for Crypto.&lt;/p&gt;

                              &lt;b&gt;Integration Note:&lt;/b&gt;
                              &lt;p&gt;Do NOT trigger external write requests for any Crypto designated non-volatile memory block as
                              it is possible for this external trigger to block eventual internal write processing in the Crypto,
                              causing DET warnings to be reported and the internal request to stop as the NvM will be
                              busy handling the external requests for the specific memory block.&lt;/p&gt;

                            &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="UUID" 
                             value="e72a3794-327d-4da7-b2ab-75d7b3902c2c"/>
                        <a:da name="TITLE" value="Key Element"/>
                        <v:ref name="CryptoPersistKeyElement" 
                               type="SYMBOLIC-NAME-REFERENCE">
                          <a:a name="COLUMN_TITLE" value="Key Element"/>
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter holds the persistent
                                    key element.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="CryptoPersistKeyElement"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC V1.0.0"/>
                          <a:a name="UUID" 
                               value="9ca6ak07-1eb1-4680-8236-ccac7e0efbff"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="text:uniq(../../*/*, .)" 
                                   false="The CryptoKeyElement Reference must be unique."/>
                            <a:tst 
                                   expr="node:value(as:ref(.)/CryptoKeyElementPersist) = &apos;true&apos;" 
                                   false="The key element configured for NvM block usage must be persistent."/>
                            <a:tst 
                                   expr="contains(node:foreach(node:refs(../../../CryptoKeyTypeRef)/CryptoKeyElementRef/*, &apos;val&apos;, &apos;$val&apos;), substring-after(.,&apos;/CryptoKeyElements/&apos;))" 
                                   false="The key element must be contained in the referenced key type of the key."/>
                            <a:tst expr="not(node:refvalid(.))" 
                                   true="The configured node does not exist or may not be referenced."/>
                            <a:tst 
                                   expr="not(text:uniq(node:paths(./../*), node:path(node:value(.))))" 
                                   true="The configured node is not unique."/>
                          </a:da>
                          <a:da name="RANGE" type="XPath" 
                                expr="node:paths(./../../../../../../CryptoKeyElements/CryptoKeyElement/*)"/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Crypto/CryptoKeyElements/CryptoKeyElement"/>
                        </v:ref>
                        <v:ref name="CryptoNvramBlockIdRef" 
                               type="SYMBOLIC-NAME-REFERENCE">
                          <a:a name="COLUMN_TITLE" value="NVRAM Block"/>
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter references to the
                                NvmBlockDescriptor for NVRAM Blocks.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="CryptoNvramBlockIdRef"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC V1.0.0"/>
                          <a:a name="UUID" 
                               value="9cb61k07-1eb1-4680-8236-ccac7e0afbff"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst 
                                   expr="(count(as:modconf(&apos;NvM&apos;)) &gt; 0) and not(node:refvalid(.))" 
                                   true="Invalid reference."/>
                            <a:tst 
                                   expr="node:empty(as:ref(.)/NvMRamBlockDataAddress) = &apos;true&apos;" 
                                   true="Please define NvMRamBlockDataAddress of the NvM block."/>
                            <a:tst 
                                   expr="text:uniq(as:modconf(&apos;Crypto&apos;)/CryptoKeys/CryptoKey/*/CryptoKeyNvRamBlockIds/*/CryptoNvramBlockIdRef, .)" 
                                   false="The referenced NVRAM Block is already referenced by another Key Element.The configured NVRAM Block should be unique for each Key Element in all keys."/>
                          </a:da>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/NvM/NvMBlockDescriptor"/>
                        </v:ref>
                      </v:ctr>
                    </v:lst>
                  </v:ctr>
                </v:lst>
              </v:ctr>
              <v:lst name="CryptoPrimitives" type="MAP">
                <a:a name="OPTIONAL" value="False"/>
                <a:a name="TAB" value="CryptoPrimitives"/>
                <a:da name="EDITABLE" value="False"/>
                <a:da name="ENABLE" value="True"/>
                <a:da name="MIN" value="0"/>
                <v:ctr name="CryptoPrimitives" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                          Container for CRYPTO primitives.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="CryptoPrimitives"/>
                  <a:da name="EDITABLE" value="False"/>
                  <v:lst name="CryptoPrimitive" type="MAP">
                    <a:a name="TAB" value="CryptoPrimitives"/>
                    <a:da name="EDITABLE" value="False"/>
                    <a:da name="MIN" value="0"/>
                    <v:ctr name="CryptoPrimitive" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Configuration of a CryptoPrimitive.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="LABEL" value="CryptoPrimitive"/>
                      <a:da name="EDITABLE" value="False"/>
                      <v:lst name="CryptoPrimitiveAlgorithmFamiliy">
                        <a:da name="EDITABLE" value="False"/>
                        <a:da name="MIN" value="1"/>
                        <v:var name="CryptoPrimitiveAlgorithmFamiliy" 
                               type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Determines the algorithm family used for the crypto service.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" 
                               value="CryptoPrimitiveAlgorithmFamiliy"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:da name="DEFAULT" value="CRYPTO_ALGOFAM_3DES"/>
                          <a:da name="EDITABLE" value="False"/>
                          <a:da name="RANGE">
                            <a:v>CRYPTO_ALGOFAM_3DES</a:v>
                            <a:v>CRYPTO_ALGOFAM_AES</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_1_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_1_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_2s_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_2s_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_BRAINPOOL</a:v>
                            <a:v>CRYPTO_ALGOFAM_CHACHA</a:v>
                            <a:v>CRYPTO_ALGOFAM_CUSTOM</a:v>
                            <a:v>CRYPTO_ALGOFAM_ECCNIST</a:v>
                            <a:v>CRYPTO_ALGOFAM_ECIES</a:v>
                            <a:v>CRYPTO_ALGOFAM_ED25519</a:v>
                            <a:v>CRYPTO_ALGOFAM_NOT_SET</a:v>
                            <a:v>CRYPTO_ALGOFAM_RIPEMD160</a:v>
                            <a:v>CRYPTO_ALGOFAM_RNG</a:v>
                            <a:v>CRYPTO_ALGOFAM_RSA</a:v>
                            <a:v>CRYPTO_ALGOFAM_SECURECOUNTER</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA1</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_224</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_384</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_512_224</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_512_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_224</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_384</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHAKE128</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHAKE256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SIPHASH</a:v>
                          </a:da>
                        </v:var>
                      </v:lst>
                      <v:lst name="CryptoPrimitiveAlgorithmMode">
                        <a:da name="EDITABLE" value="False"/>
                        <a:da name="MIN" value="1"/>
                        <v:var name="CryptoPrimitiveAlgorithmMode" 
                               type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Determines the algorithm mode used for the crypto service.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" value="CryptoPrimitiveAlgorithmMode"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:da name="DEFAULT" value="CRYPTO_ALGOMODE_12ROUNDS"/>
                          <a:da name="EDITABLE" value="False"/>
                          <a:da name="RANGE">
                            <a:v>CRYPTO_ALGOMODE_12ROUNDS</a:v>
                            <a:v>CRYPTO_ALGOMODE_20ROUNDS</a:v>
                            <a:v>CRYPTO_ALGOMODE_8ROUNDS</a:v>
                            <a:v>CRYPTO_ALGOMODE_CBC</a:v>
                            <a:v>CRYPTO_ALGOMODE_CFB</a:v>
                            <a:v>CRYPTO_ALGOMODE_CMAC</a:v>
                            <a:v>CRYPTO_ALGOMODE_CTR</a:v>
                            <a:v>CRYPTO_ALGOMODE_CTRDRBG</a:v>
                            <a:v>CRYPTO_ALGOMODE_CUSTOM</a:v>
                            <a:v>CRYPTO_ALGOMODE_ECB</a:v>
                            <a:v>CRYPTO_ALGOMODE_GCM</a:v>
                            <a:v>CRYPTO_ALGOMODE_GMAC</a:v>
                            <a:v>CRYPTO_ALGOMODE_HMAC</a:v>
                            <a:v>CRYPTO_ALGOMODE_NOT_SET</a:v>
                            <a:v>CRYPTO_ALGOMODE_OFB</a:v>
                            <a:v>CRYPTO_ALGOMODE_RSAES_OAEP</a:v>
                            <a:v>CRYPTO_ALGOMODE_RSAES_PKCS1_v1_5</a:v>
                            <a:v>CRYPTO_ALGOMODE_RSASSA_PKCS1_v1_5</a:v>
                            <a:v>CRYPTO_ALGOMODE_RSASSA_PSS</a:v>
                            <a:v>CRYPTO_ALGOMODE_XTS</a:v>
                            <a:v>CRYPTO_ALGOMODE_SIPHASH_2_4</a:v>
                            <a:v>CRYPTO_ALGOMODE_SIPHASH_4_8</a:v>
                          </a:da>
                        </v:var>
                      </v:lst>
                      <v:lst name="CryptoPrimitiveAlgorithmSecondaryFamiliy">
                        <a:da name="EDITABLE" value="False"/>
                        <a:da name="MIN" value="1"/>
                        <v:var name="CryptoPrimitiveAlgorithmSecondaryFamiliy" 
                               type="ENUMERATION">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Determines the algorithm secondary family used for the crypto
                                  service.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PreCompile">VariantPreCompile</icc:v>
                          </a:a>
                          <a:a name="LABEL" 
                               value="CryptoPrimitiveAlgorithmSecondaryFamiliy"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:da name="DEFAULT" value="CRYPTO_ALGOFAM_NOT_SET"/>
                          <a:da name="EDITABLE" value="False"/>
                          <a:da name="RANGE">
                            <a:v>CRYPTO_ALGOFAM_3DES</a:v>
                            <a:v>CRYPTO_ALGOFAM_AES</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_1_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_1_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_2s_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_BLAKE_2s_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_BRAINPOOL</a:v>
                            <a:v>CRYPTO_ALGOFAM_CHACHA</a:v>
                            <a:v>CRYPTO_ALGOFAM_CUSTOM</a:v>
                            <a:v>CRYPTO_ALGOFAM_ECCNIST</a:v>
                            <a:v>CRYPTO_ALGOFAM_ECIES</a:v>
                            <a:v>CRYPTO_ALGOFAM_ED25519</a:v>
                            <a:v>CRYPTO_ALGOFAM_NOT_SET</a:v>
                            <a:v>CRYPTO_ALGOFAM_RIPEMD160</a:v>
                            <a:v>CRYPTO_ALGOFAM_RNG</a:v>
                            <a:v>CRYPTO_ALGOFAM_RSA</a:v>
                            <a:v>CRYPTO_ALGOFAM_SECURECOUNTER</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA1</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_224</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_384</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_512_224</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA2_512_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_224</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_384</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHA3_512</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHAKE128</a:v>
                            <a:v>CRYPTO_ALGOFAM_SHAKE256</a:v>
                            <a:v>CRYPTO_ALGOFAM_SIPHASH</a:v>
                          </a:da>
                        </v:var>
                      </v:lst>
                      <v:var name="CryptoPrimitiveService" type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                              &lt;p&gt;
                                Determines the crypto service used for defining the
                                capabilities.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="CryptoPrimitiveService"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:da name="DEFAULT" value="AEAD_DECRYPT"/>
                        <a:da name="EDITABLE" value="False"/>
                        <a:da name="RANGE">
                          <a:v>AEAD_DECRYPT</a:v>
                          <a:v>AEAD_ENCRYPT</a:v>
                          <a:v>DECRYPT</a:v>
                          <a:v>ENCRYPT</a:v>
                          <a:v>HASH</a:v>
                          <a:v>MAC_GENERATE</a:v>
                          <a:v>MAC_VERIFY</a:v>
                          <a:v>RANDOM</a:v>
                          <a:v>SIGNATURE_GENERATE</a:v>
                          <a:v>SIGNATURE_VERIFY</a:v>
                        </a:da>
                      </v:var>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/Crypto"/>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the Crypto can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
