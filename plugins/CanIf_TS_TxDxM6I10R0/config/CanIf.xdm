<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM6I10R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="CanIf" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.2.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                      <ad:DATE>2011-11-09T11:36:22Z</ad:DATE>
                    </ad:DOC-REVISION>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>6.10.15</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>Elektrobit Automotive GmbH</ad:ISSUED-BY>
                      <ad:DATE>2021-07-14T23:59:59Z</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC">
                <a:v>&lt;html&gt;
                        This container includes all necessary configuration
                        sub-containers according the CAN Interface
                        configuration structure.
                      &lt;/html&gt;</a:v>
              </a:a>
              <a:a name="LOWER-MULTIPLICITY" value="1"/>
              <a:a name="POSTBUILDVARIANTSUPPORT" value="true"/>
              <a:a name="RELEASE" value="asc:4.0"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <a:a name="UUID" value="3a441de3-a492-44c1-a955-cc8b1b860765"/>
              <a:da name="INVALID" type="XPath">
                <a:tst 
                       expr="node:isconsecutive(CanIfCtrlDrvCfg/*/CanIfCtrlCfg/*/CanIfCtrlId,0)" 
                       false="CanIfCtrlId shall be 0-based and consecutive."/>
                <a:tst 
                       expr="node:isconsecutive(CanIfTrcvDrvCfg/*/CanIfTrcvCfg/*/CanIfTrcvId,0)" 
                       false="CanIfTrcvId shall be 0-based and consecutive."/>
              </a:da>
              <a:da name="WARNING" type="XPath" 
                    expr="(not(node:exists(CanIfPublicCfg/CanIfPublicCddHeaderFile/*))) and                              (num:i(count(CanIfUpperLayerConfig/*[(node:exists(CanIfUserDlcErrorNotification)) or                                                                   (node:exists(CanIfUserDlcPassedNotification ))                                                                   ])) &gt; 0)" 
                    true="There are DLC check notification functions for upper layers configured. Please make sure that their prototypes are provided to the CanIf via a header file. Use the list CanIfPublicCfg/CanIfPublicCddHeaderFile for configuring the corresponding header file."/>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="LABEL" value="Config Variant"/>
                <a:a name="UUID" value="ff41d35f-b38e-48ee-9c56-1eff2da0dd0c"/>
                <a:da name="DEFAULT" value="VariantPostBuild"/>
                <a:da name="EDITABLE" value="false"/>
                <a:da name="RANGE" value="VariantPostBuild"/>
              </v:var>
              <v:ctr name="CanIfDefensiveProgramming" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                &lt;p&gt;Parameters for defensive programming&lt;/p&gt;
                &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Defensive Programming Options"/>
                <v:var name="CanIfDefProgEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                    &lt;p&gt;Enables or disables the defensive
                    programming feature for the module CanIf.&lt;/p&gt;
                    &lt;p&gt;Note: This feature is dependent on the use of the development error detection module.
                    To use the defensive programming feature, proceed as follows:
                    &lt;ol&gt;
                    &lt;li&gt;Enable development error detection&lt;/li&gt;
                    &lt;li&gt;Enable defensive programming&lt;/li&gt;
                    &lt;li&gt;Enable assertions as required&lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Defensive Programming"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfPublicDevErrorDetect = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CanIfPrecondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of precondition assertion checks reported from
                  the module CanIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CanIfPublicDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CanIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Precondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicDevErrorDetect = &apos;true&apos;) and (../CanIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CanIfPostcondAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of postcondition assertion checks reported from
                  the module CanIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CanIfPublicDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CanIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Postcondition Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicDevErrorDetect = &apos;true&apos;) and (../CanIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CanIfStaticAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of static assertion checks reported from
                  the module CanIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CanIfPublicDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CanIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Static Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicDevErrorDetect = &apos;true&apos;) and (../CanIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CanIfUnreachAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of unreachable code assertion checks
                  reported from the module CanIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CanIfPublicDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CanIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Unreachable Code Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicDevErrorDetect = &apos;true&apos;) and (../CanIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="CanIfInvariantAssertEnabled" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                  &lt;p&gt;Enables handling of invariant assertion checks
                  reported from functions of the module CanIf.&lt;/p&gt;
                  &lt;p&gt;Dependency on parameter(s):
                  &lt;ul&gt;
                  &lt;li&gt;Enable Development Error Detection (&lt;code&gt;CanIfPublicDevErrorDetect&lt;/code&gt;): must be enabled &lt;/li&gt;
                  &lt;li&gt;Enable Defensive Programming (&lt;code&gt;CanIfDefProgEnabled&lt;/code&gt;): must be enabled&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Enable Invariant Assertions"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicDevErrorDetect = &apos;true&apos;) and (../CanIfDefProgEnabled = &apos;true&apos;)" 
                        true="true" false="false"/>
                </v:var>
              </v:ctr>
              <v:lst name="CanIfCtrlDrvCfg" type="MAP">
                <a:da name="MAX" value="255"/>
                <a:da name="MIN" value="1"/>
                <v:ctr name="CanIfCtrlDrvCfg" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Configuration parameters for all the underlying
                          CAN Driver modules are aggregated under this container.
                          For each CAN Driver module a seperate instance of this
                          container has to be provided.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="UUID" value="c8d9a9e2-039d-4958-8f8a-728569a9e9b2"/>
                  <v:var name="CanIfCtrlDrvTxCancellation" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Selects whether transmit cancellation is supported and if
                              the appropriate callback will be provided to the CAN Driver
                              module.
                            &lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;True: Enabled&lt;/li&gt;
                              &lt;li&gt;False: Disabled&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                                &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                                Enabling this parameter increases the ROM consumption
                                of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                Enabling this parameter increases the execution time
                                of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="af63d449-938c-455c-ad63-8d6ac3eed7bc"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="(../../../CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR402&apos;) or (../../../CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR403&apos;)"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(. = &apos;true&apos;) and (../../../CanIfPublicCfg/CanIfPublicTxBuffering=&apos;false&apos;)" 
                             true="Transmit buffering must be enabled to support transmit cancellation. Please set CanIfPublicTxBuffering to &apos;true&apos;"/>
                      <a:tst 
                             expr="(as:modconf(&apos;Can&apos;)[1]/CanGeneral/CanHardwareCancellation = .)" 
                             false="CanIfCtrlDrvTxCancellation and CanHardwareCancellation from the respective CAN driver must have the same value."/>
                    </a:da>
                  </v:var>
                  <v:ref name="CanIfCtrlDrvInitHohConfigRef" type="REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Reference to the Init Hoh Configuration.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="Link">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="UUID" 
                         value="3b815fcd-f89d-4e8b-a451-2526ddebaf47"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst expr="node:refvalid(.)" 
                             false="CanIfCtrlDrvInitHohConfigRef must reference a valid HOH configuration."/>
                      <a:tst 
                             expr="count(../../*[CanIfCtrlDrvInitHohConfigRef = node:current()]) &gt; 1" 
                             true="A HOH configuration must not be referrenced more than once."/>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfInitCfg/CanIfInitHohCfg"/>
                  </v:ref>
                  <v:ref name="CanIfCtrlDrvNameRef" type="REFERENCE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;CAN Interface driver reference.&lt;/p&gt;
                            &lt;p&gt;
                              This reference can be used to get any information
                              (Ex. Driver Name, Vendor ID) from the CAN Driver.
                            &lt;/p&gt;
                            &lt;p&gt;
                              The CAN Driver name can be derived from the SHORT-NAME
                              of the CAN Driver module.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="UUID" 
                         value="00260908-7a8c-42ce-889f-f9d2601c9dca"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMultipleDrvSupport = &apos;true&apos;"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMultipleDrvSupport = &apos;true&apos;) and (not(node:refvalid(.)))" 
                             true="CanIfCtrlDrvNameRef must reference a valid CAN driver configuration."/>
                      <a:tst 
                             expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMultipleDrvSupport = &apos;true&apos;) and ( node:refexists(.) ) and                                    ( count(../../*[CanIfCtrlDrvNameRef = node:current()]) &gt; 1 )" 
                             true="A CAN controller driver configuration must not be referrenced more than once."/>
                      <a:tst 
                             expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMultipleDrvSupport = &apos;true&apos;) and ((node:refs(.)/../CommonPublishedInformation/VendorId = &apos;&apos;) or (node:refs(.)/../CommonPublishedInformation/VendorApiInfix = &apos;&apos;))" 
                             true="The CAN driver must have the VendorId and VendorApiInfix populated if CanIfPublicMultipleDrvSupport is enabled."/>
                    </a:da>
                    <a:da name="REF" 
                          value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanGeneral"/>
                  </v:ref>
                  <v:lst name="CanIfCtrlCfg" type="MAP">
                    <a:da name="INVALID" type="XPath" 
                          expr="(count(*) &gt; 1) and (../../../CanIfPublicCfg/CanIfPublicSingleCtrlOpt = &apos;true&apos;)" 
                          true="If CanIfPublicSingleCtrlOpt is enabled, only a single CanIfCtrlCfg must be configured."/>
                    <a:da name="MAX" value="255"/>
                    <a:da name="MIN" value="1"/>
                    <v:ctr name="CanIfCtrlCfg" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                CanIfCtrlCfg contains the configuration parameter
                                of an adressed CAN controller by an underlying
                                CAN Driver module.
                              &lt;/p&gt;
                              &lt;p&gt;This container is configurable per CAN controller.&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                      <a:a name="UUID" 
                           value="d5c9ee64-3fc0-49f9-bc90-d61543c2d169"/>
                      <v:var name="CanIfCtrlId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfCtrlId abstracts from the CAN Driver
                                  specific parameter controller. Each controller of all
                                  connected CAN Driver modules shall be assigned to one
                                  specific ControllerId of the CanIf.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Range: 0..number of configured controllers of all
                                  CAN Driver modules.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="ddd6cf43-582b-4774-8fbc-053983a9af6e"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=65535"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfCtrlWakeupSupport" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfCtrlWakeupSupport defines if a respective controller of the
                                  referenced CAN Driver modules is queriable for
                                  wake up events.
                                &lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;True: Wakeup Support Enabled&lt;/li&gt;
                                  &lt;li&gt;False: Wakeup Support Disabled&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="c4b7c3f0-eb67-407b-8126-4f8f00c44350"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst 
                                 expr="((.) = &apos;true&apos;) and (../../../../../CanIfPublicCfg/CanIfPublicCtrlWakeupSupport = &apos;false&apos;)" 
                                 true="You must not enable CanIfCtrlWakeupSupport if CanIfPublicCtrlWakeupSupport is disabled."/>
                          <a:tst 
                                 expr="not((as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR402&apos;) or (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR403&apos;)) and                                        ((.) = &apos;true&apos;) and node:exists(node:refs(../CanIfCtrlCanCtrlRef)/CanWakeupFunctionalityAPI) and node:refs(../CanIfCtrlCanCtrlRef)/CanWakeupFunctionalityAPI = &apos;false&apos;" 
                                 true="You must enable CanWakeupFunctionalityAPI if CanIfCtrlWakeupSupport is enabled."/>
                          <a:tst 
                                 expr="((.) = &apos;true&apos;) and (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility != &apos;ASR402&apos;) and not(node:refvalid(../CanIfCtrlWakeupSourceInRef))" 
                                 true="When CanIfCtrlWakeupSupport is enabled, CanIfCtrlWakeupSourceInRef must reference a valid wakeup source."/>
                          <a:tst 
                                 expr="((.) = &apos;true&apos;) and (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR402&apos;) and (not(node:refvalid(../CanIfCtrlWakeupSourceInRef)) or not(node:refvalid(../CanIfCtrlWakeupSourceOutRef)))" 
                                 true="When CanIfCtrlWakeupSupport is enabled and CanIfCanDriverCompatibility is ASR402, CanIfCtrlWakeupSourceInRef and CanIfCtrlWakeupSourceOutRef must reference a valid wakeup source."/>
                          <a:tst 
                                 expr="((.) = node:ref(../CanIfCtrlCanCtrlRef)/CanWakeupSupport)" 
                                 false="CanIfCtrlWakeupSupport and Can driver config parameter CanWakeupSupport must have the same value."/>
                        </a:da>
                      </v:var>
                      <v:ref name="CanIfCtrlCanCtrlRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                               &lt;p&gt;
                                 CanIfCtrlCanCtrlRef references to the logical handle of the underlying
                                 CAN controller from the CAN Driver module to be served by the CAN
                                 Interface module. The following parameters of CanController config
                                 container shall be referenced by this link: CanControllerId,
                                 CanWakeupSourceRef.
                               &lt;/p&gt;
                               &lt;p&gt;
                                 Range: 0..max. number of underlying supported CAN controllers
                               &lt;/p&gt;
                             &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="991df084-2e6b-46c2-a032-d37610328860"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="CanIfCtrlCanCtrlRef must reference a valid CAN controller configuration."/>
                          <a:tst 
                                 expr="node:refvalid(.) and (as:ref(.)/CanControllerId &gt;= 255)" 
                                 true="The CAN controller referenced by CanIfControllerIdRef must have a controller ID less than 255 (parameter CanControllerId)."/>
                          <a:tst 
                                 expr="text:uniq(../../../../*/CanIfCtrlCfg/*/CanIfCtrlCanCtrlRef, .)" 
                                 false="A CAN controller shall be referenced at most once for all networks."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet/CanController"/>
                      </v:ref>
                      <v:ref name="CanIfCtrlWakeupSourceInRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfCtrlWakeupSourceInRef contains a reference to the wake up source
                                  for the controller as defined in the ECU State Manager.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  CanIfCtrlWakeupSourceInRef allows mapping of incoming wake up source
                                  (i.e. a wake up event is detected by the CanDrv Driver) to a
                                  specific contoller. Therefore the parameter is used
                                  as input to API CanIf_CheckWakeup().
                                &lt;/p&gt;
                               &lt;p&gt;
                                  The parameter is optional since providing the API
                                  CanIf_CheckWakeup() is also optional. If the parameter is used,
                                  CanIfCtrlakeupSourceOutRef must be set as well.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Implementation Type: reference to EcuM_WakeupSourceType.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="ebed98b3-6c6d-47e3-ae09-f3907110e351"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="( node:refvalid(.)  ) " 
                                 false="If CanIfCtrlWakeupSourceInRef is set, it must contain a valid reference."/>
                          <a:tst 
                                 expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR402&apos;)  and not(node:exists(../CanIfCtrlWakeupSourceOutRef))" 
                                 true="If CanIfCtrlWakeupSourceInRef is used, CanIfCtrlWakeupSourceOutRef must be enabled as well."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource"/>
                        <a:da name="WARNING" type="XPath" 
                              expr="( ../CanIfCtrlWakeupSupport = &apos;false&apos; ) " 
                              true="CanIfCtrlWakeupSourceInRef is only used, if wakeup is supported (CanIfCtrlWakeupSupport is enabled)."/>
                      </v:ref>
                      <v:ref name="CanIfCtrlWakeupSourceOutRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfCtrlWakeupSourceOutRef contains a reference to the wake up source
                                  for the controller as defined in the ECU State Manager.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  CanIfCtrlWakeupSourceOutRef allows mapping of outgoing wake up source
                                  (i.e. wake up is signalled to the user notification API) to a specific
                                  controller.
                                  Therefore the parameter is used as output from
                                  CanIf_CheckWakeup() to &amp;lt;User_SetWakeupEvent&amp;gt;.
                                  The parameter is also used for wake up validation, i.e. as
                                  input and output for API CanIf_CheckValidation().
                                &lt;/p&gt;
                                &lt;p&gt;
                                  The parameter is optional since providing the API
                                  CanIf_CheckWakeup() is also optional.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Implementation Type: reference to EcuM_WakeupSourceType.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="74ffce91-d88a-4c2c-858e-f74081978c6a"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="( node:refvalid(.)  ) " 
                              false="If CanIfCtrlWakeupSourceOutRef is set, it must contain a valid reference."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource"/>
                        <a:da name="WARNING" type="XPath" 
                              expr="( num:i(count(../../../../../CanIfCtrlDrvCfg/*/CanIfCtrlCfg/*[CanIfCtrlWakeupSupport = &apos;true&apos;])) = 0) and                                        ( num:i(count(../../../../../CanIfTrcvDrvCfg/*/CanIfTrcvCfg/*[CanIfTrcvWakeupSupport = &apos;true&apos;])) = 0)" 
                              true="CanIfCtrlWakeupSourceOutRef is only used, if wakeup is supported. CanIfCtrlWakeupSourceOutRef is ignored, if not at least one CAN controller or CAN tranceicer supports wakeup (CanIfCtrlWakeupSupport / CanIfTrcvWakeupSupport is enabled)."/>
                      </v:ref>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <v:ctr name="CanIfDispatchCfg" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        Callback functions provided by upper layer modules of the CanIf.
                        The callback functions defined in this container are common
                        to all configured CAN Driver / CAN Transceiver Driver modules.
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="UUID" value="1279b53d-0a0d-4eb1-a44f-4682be81294b"/>
                <v:var name="CanIfDispatchUserCtrlBusOffName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserCtrlBusOffName defines the name of &amp;lt;User_ControllerBusOff&amp;gt;.
                          &lt;/p&gt;
                          &lt;p&gt;
                            CanIfDispatchUserCtrlBusOffName depends on the parameter CanIfDispatchUserCtrlBusOffUL.
                            If CanIfDispatchUserCtrlBusOffUL equals CAN_SM the name of
                            &amp;lt;User_ControllerBusOff&amp;gt; is fixed to
                            CanSM_ControllerBusOff. If CanIfDispatchUserCtrlBusOffUL
                            equals CDD, the name of &amp;lt;User_ControllerBusOff&amp;gt; is selectable.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a07d0ad4-1f12-4d79-8148-f87b5d4f21c6"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../CanIfDispatchUserCtrlBusOffUL = &apos;CDD&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfDispatchUserCtrlBusOffName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserCtrlBusOffUL" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserCtrlBusOffUL defines the upper layer (UL) module to
                            which the notifications of all ControllerBusOff events
                            from the CAN Driver modules have to be routed
                            via &amp;lt;User_ControllerBusOff&amp;gt;.
                          &lt;/p&gt;
                          &lt;p&gt;
                            The upper layer (UL) module as the provider of
                            &amp;lt;User_ControllerBusOff&amp;gt; must always be configured.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="08f4837d-5f62-421a-b801-e70c8eafa1e0"/>
                  <a:da name="DEFAULT" value="CAN_SM"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;CDD&apos;) and                                (not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                        true="CanIfPublicCddHeaderFile must be defined if the bus-off notification function is replaced by a user specific function."/>
                  <a:da name="RANGE">
                    <a:v>CAN_SM</a:v>
                    <a:v>CDD</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfDispatchUserCtrlModeIndicationName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserCtrlModeIndicationName defines the name of
                            &amp;lt;User_ControllerModeIndication&amp;gt;.
                          &lt;/p&gt;
                          &lt;p&gt;
                            CanIfDispatchUserCtrlModeIndicationName depends on the parameter CanIfDispatchUserCtrlModeIndicationUL.
                            If CanIfDispatchUserCtrlModeIndicationUL equals CAN_SM the name of
                            &amp;lt;User_ControllerModeIndication&amp;gt; is fixed to
                            CanSM_ControllerModeIndication.
                            If CanIfDispatchUserCtrlModeIndicationUL equals CDD, the name of
                            &amp;lt;User_ControllerModeIndication&amp;gt; is selectable.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="7839f159-ecc3-423b-9b3f-41488482c6ad"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../CanIfDispatchUserCtrlModeIndicationUL = &apos;CDD&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfDispatchUserCtrlModeIndicationName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserCtrlModeIndicationUL" 
                       type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          CanIfDispatchUserCtrlModeIndicationUL defines the upper layer (UL) module to which
                          the notifications of all ControllerTransition events from the
                          CAN Driver modules have to be routed via
                          &amp;lt;User_ControllerModeIndication&amp;gt;.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ab8abd4d-756b-4f9a-bea5-71b10ffd7ce7"/>
                  <a:da name="DEFAULT" value="CAN_SM"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;CDD&apos;) and                                (not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                        true="CanIfPublicCddHeaderFile must be defined if the controller mode indication function is replaced by a user specific function."/>
                  <a:da name="RANGE">
                    <a:v>CAN_SM</a:v>
                    <a:v>CDD</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfDispatchUserCheckTrcvWakeFlagIndicationName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        This parameter defines the name of &lt;User_CheckTrcvWakeFlagIndication&gt;..    If CANIF_DISPATCH_USERCHECKTRCVWAKEFLAGINDICATION_UL equals CAN_SM the name of &lt;User_CheckTrcvWakeFlagIndication&gt; is fixed. If it equals CDD, the name is selectable. If CANIF_PUBLIC_PN_SUPPORT equals False, this parameter shall not be configurable.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:b4cc3170-04f6-45b8-973b-353ede6489a7"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;) and (../CanIfDispatchUserCheckTrcvWakeFlagIndicationUL = &apos;CDD&apos;)"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;)) and (../CanIfDispatchUserCheckTrcvWakeFlagIndicationUL = &apos;CDD&apos;)" 
                        true="CanIfDispatchUserCheckTrcvWakeFlagIndicationName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserCheckTrcvWakeFlagIndicationUL" 
                       type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        This parameter defines the upper layer module to which the CheckTrcvWakeFlagIndication from the Driver modules have to be routed..    If CANIF_PUBLIC_PN_SUPPORT equals False, this parameter shall not be configurable.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:0bbaf0c7-4bc2-4004-add9-2e41e44b0cb3"/>
                  <a:da name="DEFAULT" value="CAN_SM"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;) and (../CanIfDispatchUserCheckTrcvWakeFlagIndicationUL = &apos;CDD&apos;) and not(node:isreadpermitted(../CanIfDispatchUserCheckTrcvWakeFlagIndicationName))" 
                        true="CanIfDispatchUserCheckTrcvWakeFlagIndicationName needs to be enabled and configured."/>
                  <a:da name="RANGE">
                    <a:v>CAN_SM</a:v>
                    <a:v>CDD</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfDispatchUserClearTrcvWufFlagIndicationName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        This parameter defines the name of &lt;User_ClearTrcvWufFlagIndication&gt;..    If CANIF_DISPATCH_USERCLEARTRCVWUFFLAGINDICATION_UL equals CAN_SM the name of &lt;User_ClearTrcvWufFlagIndication&gt; is fixed. If it equals CDD, the name is selectable. If CANIF_PUBLIC_PN_SUPPORT equals False, this parameter shall not be configurable.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:b0e98d0b-7b7f-42d7-accc-d19c2e52d62d"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;) and (../CanIfDispatchUserClearTrcvWufFlagIndicationUL = &apos;CDD&apos;)"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;)) and (../CanIfDispatchUserClearTrcvWufFlagIndicationUL = &apos;CDD&apos;)" 
                        true="CanIfDispatchUserClearTrcvWufFlagIndicationName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserClearTrcvWufFlagIndicationUL" 
                       type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        This parameter defines the upper layer module to which the ClearTrcvWufFlagIndication from the Driver modules have to be routed..    If CANIF_PUBLIC_PN_SUPPORT equals False, this parameter shall not be configurable.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:9547aae5-127b-4d0d-90a2-3ba8a27fcd9c"/>
                  <a:da name="DEFAULT" value="CAN_SM"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;) and (../CanIfDispatchUserClearTrcvWufFlagIndicationUL = &apos;CDD&apos;) and not(node:isreadpermitted(../CanIfDispatchUserClearTrcvWufFlagIndicationName))" 
                        true="CanIfDispatchUserClearTrcvWufFlagIndicationName needs to be enabled and configured."/>
                  <a:da name="RANGE">
                    <a:v>CAN_SM</a:v>
                    <a:v>CDD</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfDispatchUserConfirmPnAvailabilityName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        This parameter defines the name of User_ConfirmPnAvailability. If CANIF_DISPATCH_USERCONFIRMPNAVAILABILITY_UL equals CAN_SM the name of User_ConfirmPnAvailability is fixed. If it equals CDD, the name is selectable. If CANIF_PUBLIC_PN_SUPPORT equals False, this parameter shall not be configurable.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1956eddd-c62d-45f4-b50f-2836baf0b3b3"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;)) and (../CanIfDispatchUserConfirmPnAvailabilityUL = &apos;CDD&apos;) and (../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;)" 
                        true="CanIfDispatchUserConfirmPnAvailabilityName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserConfirmPnAvailabilityUL" 
                       type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        This parameter defines the upper layer module to which the ConfirmPnAvailability notification from the Driver modules have to be routed. If CANIF_PUBLIC_PN_SUPPORT equals False, this parameter shall not be configurable.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:e3ad75a1-387d-4959-a130-dbefbe31f022"/>
                  <a:da name="DEFAULT" value="CAN_SM"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(../CanIfDispatchUserConfirmPnAvailabilityUL = &apos;&apos;) and (../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;)" 
                        true="CanIfDispatchUserConfirmPnAvailabilityUL needs to be configured."/>
                  <a:da name="RANGE">
                    <a:v>CAN_SM</a:v>
                    <a:v>CDD</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfDispatchUserTrcvModeIndicationName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserTrcvModeIndicationName defines the name of &amp;lt;User_TrcvModeIndication&amp;gt;.
                          &lt;/p&gt;
                          &lt;p&gt;
                            CanIfDispatchUserTrcvModeIndicationName depends on the parameter CanIfDispatchUserTrcvModeIndicationUL.
                            If CanIfDispatchUserTrcvModeIndicationUL equals CAN_SM the name of
                            &amp;lt;User_TrcvModeIndication&amp;gt; is fixed to
                            CanSM_TrcvModeIndication.
                            If CanIfDispatchUserTrcvModeIndicationUL equals CDD, the name of
                            &amp;lt;User_TrcvModeIndication&amp;gt; is selectable.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="faf551cf-9356-4625-b9b4-d6dbf67108fe"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="((../CanIfDispatchUserTrcvModeIndicationUL = &apos;CDD&apos;) and                                  ( node:exists(../../CanIfTrcvDrvCfg/*)))   "/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfDispatchUserTrcvModeIndicationName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserTrcvModeIndicationUL" 
                       type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserTrcvModeIndicationUL defines the upper layer (UL) module to which the
                            notifications of all TransceiverTransition events from the
                            CAN Transceiver Driver modules are routed
                            via &amp;lt;User_TrcvModeIndication&amp;gt;.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="0b19f7bb-514c-432c-af4d-b5b6b18783ba"/>
                  <a:da name="DEFAULT" value="CAN_SM"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(node:exists(../../CanIfTrcvDrvCfg/*))"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;CDD&apos;) and                                (not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                        true="CanIfPublicCddHeaderFile must be defined if the tranceiver mode indication function is replaced by a user specific function."/>
                  <a:da name="RANGE">
                    <a:v>CAN_SM</a:v>
                    <a:v>CDD</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfDispatchUserValidateWakeupEventName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserValidateWakeupEventName defines the name of &amp;lt;User_ValidateWakeupEvent&amp;gt;.
                          &lt;/p&gt;
                          &lt;p&gt;
                            CanIfDispatchUserValidateWakeupEventName depends on the parameter CanIfDispatchUserValidateWakeupEventUL.
                            If CanIfDispatchUserValidateWakeupEventUL equals ECUM the name of
                            &amp;lt;User_ValidateWakeupEvent&amp;gt; is fixed to
                            EcuM_ValidateWakeupEvent.
                            If CanIfDispatchUserValidateWakeupEventUL equals CDD, the name of
                            &amp;lt;User_ValidateWakeupEvent&amp;gt; is selectable.
                          &lt;/p&gt;
                          &lt;p&gt;
                            If parameter CanIfPublicWakeupCheckValidSupport is disabled,
                            no &amp;lt;User_ValidateWakeupEvent&amp;gt; API can be configured.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="c95d33bf-42d2-432e-b36c-6e8f74b7beba"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="((../../CanIfPublicCfg/CanIfPublicWakeupCheckValidSupport = &apos;true&apos;) and                                  (../CanIfDispatchUserValidateWakeupEventUL = &apos;CDD&apos;) )"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfDispatchUserValidateWakeupEventName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserValidateWakeupEventUL" 
                       type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserValidateWakeupEventUL defines the upper layer (UL) module to which
                            the notifications about positive former requested wake up
                            sources have to be routed via &amp;lt;User_ValidateWakeupEvent&amp;gt;.
                          &lt;/p&gt;
                          &lt;p&gt;
                            If parameter CanIfPublicWakeupCheckValidSupport is disabled,
                            CanIfDispatchUserValidateWakeupEventUL cannot be configured.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="3b506625-8f01-4770-ae0a-a98f25bd2416"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfPublicWakeupCheckValidSupport = &apos;true&apos;"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="( . = &apos;CDD&apos;) and                                  (not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                        true="CanIfPublicCddHeaderFile must be defined if the wakeup validation notification function is replaced by a user specific function."/>
                  <a:da name="RANGE">
                    <a:v>CDD</a:v>
                    <a:v>ECUM</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfTranslateTxCanIdFunc" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfTranslateTxCanIdFunc can be used to configure the user specific CAN ID
                            translation function/macro for Tx PDUs.
                          &lt;/p&gt;
                          &lt;p&gt;
                            If CanIfTranslateTxCanIdFunc is disabled, the configured CAN ID (parameter CanIfTxPduCanId) will be
                            used when transmitting a message. If it is enabled,
                            the configured function will be called with a CAN ID and the
                            returned CAN ID will be used when the message is transmitted.
                          &lt;/p&gt;
                          &lt;p&gt;
                            The prototype of this function must be as follows (if a macro
                            is used it must behave accordingly):
                          &lt;/p&gt;
                          &lt;p&gt;
                            Can_IdType function-name( Can_IdType CanId )
                          &lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption
                              of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the execution
                              time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CanIfTranslateTxCanIdFunc"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="2c95c337-cbf6-4e02-95af-6c5f6572a3ff"/>
                  <a:da name="DEFAULT" value="CanIf_TranslateTxCanId"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst expr="text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;)" 
                           false="CanIfTranslateTxCanIdFunc must be valid C function or macro name."/>
                    <a:tst 
                           expr="(not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                           true="CanIfPublicCddHeaderFile must be defined if a user specific CAN ID translation function is configured."/>
                  </a:da>
                </v:var>
                <v:var name="CanIfTranslateRxCanIdFunc" type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfTranslateRxCanIdFunc can be used to configure the user specific
                            CAN ID translation function/macro for Rx PDUs.
                          &lt;/p&gt;
                          &lt;p&gt;
                            If CanIfTranslateRxCanIdFunc is disabled, the configured CAN ID (parameter CanIfRxPduCanId) will
                            be expected by CanIf_RxIndication() when receiving a message.
                            If it is enabled, CanIf_RxIndication() will call this
                            function to translate the received CAN ID into the configured
                            CAN ID (parameter CanIfRxPduCanId) of the corresponding Rx PDU before and use this
                            translated CAN ID for software filtering.
                          &lt;/p&gt;
                          &lt;p&gt;
                            The prototype of this function must be as follows (if a macro
                            is used it must behave accordingly):
                          &lt;/p&gt;
                          &lt;p&gt;
                            Can_IdType function-name( Can_IdType CanId )
                          &lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption
                              of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the execution time
                              of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CanIfTranslateRxCanIdFunc"/>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="f49dd274-24f8-4b34-9909-096c1e168120"/>
                  <a:da name="DEFAULT" value="CanIf_TranslateRxCanId"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst expr="text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;)" 
                           false="CanIfTranslateRxCanIdFunc must be valid C function or macro name."/>
                    <a:tst 
                           expr="(not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                           true="CanIfPublicCddHeaderFile must be defined if a user specific CAN ID translation function is configured."/>
                  </a:da>
                </v:var>
                <v:var name="CanIfDispatchUserSetWakeupEventName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfDispatchUserSetWakeupEventName defines the name of &amp;lt;User_SetWakeupEvent&amp;gt;.
                          &lt;/p&gt;
                          &lt;p&gt;
                            CanIfDispatchUserSetWakeupEventName depends on the parameter CanIfDispatchUserSetWakeupEventUL.
                            If CanIfDispatchUserSetWakeupEventUL equals ECUM the name of
                            &amp;lt;User_SetWakeupEvent&amp;gt; is fixed to EcuM_SetWakeupEvent.
                            If CanIfDispatchUserSetWakeupEventUL equals CDD, the name of
                            &amp;lt;User_SetWakeupEvent&amp;gt; is selectable.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(node:exists(../CanIfDispatchUserSetWakeupEventUL) and (../CanIfDispatchUserSetWakeupEventUL = &apos;CDD&apos;))"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfDispatchUserSetWakeupEventName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfDispatchUserSetWakeupEventUL" 
                       type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          CanIfDispatchUserSetWakeupEventUL defines the upper layer (UL) module to which
                          the notifications about positive former requested wake up sources
                          have to be routed via &amp;lt;User_SetWakeupEvent&amp;gt;.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="ECUM"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicTrcvWakeupSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;CDD&apos;) and                                  (not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                        true="CanIfPublicCddHeaderFile must be defined if the wakeup notification function is replaced by a user specific function."/>
                  <a:da name="RANGE">
                    <a:v>CDD</a:v>
                    <a:v>ECUM</a:v>
                  </a:da>
                </v:var>
              </v:ctr>
              <v:lst name="CanIfInitCfg" 
                     type="MULTIPLE-CONFIGURATION-CONTAINER">
                <a:da name="MAX" value="1"/>
                <a:da name="MIN" value="1"/>
                <v:ctr name="CanIfInitCfg" 
                       type="MULTIPLE-CONFIGURATION-CONTAINER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfInitCfg contains the init parameter of the CAN Interface.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Note: The number of instances of CanIfInitCfg is limited to 1,
                            i.e. there is no multiple container support.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="NAME_PATTERN" value="CanIf_InitCfg_?"/>
                  <a:a name="UUID" value="644d9ad8-bf3c-4d88-b6a9-22523736cbc1"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst 
                           expr="text:match(node:name(.), &apos;^([a-zA-Z_][a-zA-Z0-9_]*)?$&apos;)" 
                           false="CanIfInitCfg container names must be valid C identifiers."/>
                    <a:tst 
                           expr="node:isconsecutive(CanIfTxPduCfg/*[CanIfTxPduType = &apos;STATIC&apos;]/CanIfTxPduId,0)" 
                           false="CanIfTxPduId with CanIfTxPduType = &apos;STATIC&apos; shall be 0-based and consecutive."/>
                    <a:tst 
                           expr="node:isconsecutive(CanIfTxPduCfg/*[CanIfTxPduType = &apos;DYNAMIC&apos;]/CanIfTxPduId,count(CanIfTxPduCfg/*[CanIfTxPduType = &apos;STATIC&apos;]/CanIfTxPduId))" 
                           false="CanIfTxPduId with CanIfTxPduType = &apos;DYNAMIC&apos; shall be consecutive immediately follow the static CanIfTxPdus (CanIfTxPduType = &apos;STATIC&apos;) Id range."/>
                    <a:tst 
                           expr="node:isconsecutive(CanIfRxPduCfg/*/CanIfRxPduId,0)" 
                           false="CanIfRxPduId shall be 0-based and consecutive."/>
                  </a:da>
                  <v:var name="CanIfInitCfgSet" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              CanIfInitCfgSet is not used by the CanIf and
                              therefore can not be edited.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="ad82f73e-9341-4856-baf6-a4c9421a6e63"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="EDITABLE" value="false"/>
                  </v:var>
                  <v:lst name="CanIfBufferCfg" type="MAP">
                    <v:ctr name="CanIfBufferCfg" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                        This container contains the Txbuffer configuration. Multiple buffers with different sizes could be configured. If CanIfBufferSize (CANIF834_Conf) equals 0, the CanIf Tx L-PDU only refers via this CanIfBufferCfg the corresponding CanIfHthCfg..
                      &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                      <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                      <a:a name="UUID" 
                           value="90341d1a-543f-49c3-831c-538ce5f57659"/>
                      <v:var name="CanIfBufferSize" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                        This parameter defines the number of CanIf Tx L-PDUs which can be buffered in one Txbuffer. If this value equals 0, the CanIf does not perform Txbuffering for the CanIf Tx L-PDUs which are assigned to this Txbuffer. If CanIfPublicTxBuffering equals False, this parameter equals 0 for all TxBuffer. If the CanHandleType of the referred HTH equals FULL, this parameter equals 0 for this TxBuffer..
                      &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ECUC:3e890c54-df3d-4d91-bee8-0f6ee7a81053"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="EDITABLE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=255"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:lst name="CanIfBufferHthRef">
                        <a:da name="MAX" value="1"/>
                        <a:da name="MIN" value="1"/>
                        <v:ref name="CanIfBufferHthRef" type="REFERENCE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  Reference to HTH, that defines the hardware object or the pool of hardware objects configured for transmission. All the CanIf Tx L-PDUs refer via the CanIfBufferCfg and this parameter to the HTHs if TxBuffering is enabled, or not..    Each HTH shall not be assigned to more than one buffer.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                          <a:a name="UUID" 
                               value="ECUC:fb6c787d-41aa-4920-8680-030a0a2e8bc2"/>
                          <a:da name="INVALID" type="XPath" 
                                expr="node:refvalid(.)" 
                                false="CanIfBufferHthRef must reference a valid CanIfHth configuration."/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfInitCfg/CanIfInitHohCfg/CanIfHthCfg"/>
                        </v:ref>
                      </v:lst>
                    </v:ctr>
                  </v:lst>
                  <v:lst name="CanIfInitHohCfg" type="MAP">
                    <a:da name="INVALID" type="XPath" 
                          expr="count(as:modconf(&apos;CanIf&apos;)[1]/CanIfCtrlDrvCfg/*) != count(node:current()/*)" 
                          true="The number of HOH configurations in CanIfInitHohCfg should match the number of driver configurations in CanIfCtrlDrvCfg."/>
                    <a:da name="MAX" value="255"/>
                    <a:da name="MIN" value="1"/>
                    <v:ctr name="CanIfInitHohCfg" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              This container contains the references to the configuration
                              setup of each underlying CAN Driver.
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="UUID" 
                           value="d8dff79a-efb4-42f9-930c-820cc6408816"/>
                      <a:da name="INVALID" type="XPath" 
                            expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicHandleTypeEnum = &apos;UINT8&apos;) and                                   ((node:exists(CanIfHthCfg/*) and (num:max(node:refs(CanIfHthCfg/*/CanIfHthIdSymRef)/CanObjectId) &gt; 254)) or                                    (node:exists(CanIfHrhCfg/*) and (num:max(node:refs(CanIfHrhCfg/*/CanIfHrhIdSymRef)/CanObjectId) &gt; 254)))" 
                            true="If the highest CanObjectId referenced by CanIfHthIdSymRef or CanIfHrhIdSymRef exceeds 254, then CanIfPublicHandleTypeEnum must be set to UINT16."/>
                      <v:ref name="CanIfInitRefCfgSet" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                 &lt;p&gt;
                                   Selects the CAN Interface specific configuration setup.
                                 &lt;/p&gt;
                                 &lt;p&gt;
                                   This type of external data structure shall contain the
                                   post build initialization data for the CAN Interface
                                   for all underlying CAN Drivers.
                                 &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="12560fc5-27ae-4645-8992-1f22e522d880"/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet"/>
                      </v:ref>
                      <v:lst name="CanIfHrhCfg" type="MAP">
                        <v:ctr name="CanIfHrhCfg" type="IDENTIFIABLE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  CanIfHrhCfg contains configuration parameter
                                  for each hardware receive object (HRH).
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="UUID" 
                               value="29fc5fd9-efd5-421e-96b4-6a09d198db0f"/>
                          <v:var name="CanIfHrhSoftwareFilter" type="BOOLEAN">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;
                                      Selects the hardware receive objects by using the HRH
                                      range/list from CAN Driver configuration to define,
                                      for which HRH a software filtering is be performed
                                      during receive processing.
                                    &lt;/p&gt;
                                    &lt;ul&gt;
                                      &lt;li&gt;True: Software filtering is enabled.&lt;/li&gt;
                                      &lt;li&gt;False: Software filtering is enabled.&lt;/li&gt;
                                    &lt;/ul&gt;
                                    &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                    &lt;ul&gt;
                                      &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                        &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                        Enabling this parameter increases
                                        the execution time of the module code.
                                      &lt;/li&gt;
                                    &lt;/ul&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                            <a:a name="UUID" 
                                 value="879fc215-00b5-44ac-bcf9-f7ff3bdb2267"/>
                            <a:da name="DEFAULT" value="true"/>
                          </v:var>
                          <v:ref name="CanIfHrhCanCtrlIdRef" type="REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Reference to controller ID to which the HRH belongs to.
                                    A controller can contain one or more HRHs.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="UUID" 
                                 value="23dafc08-ce15-4f36-9d52-2d1aa001c189"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="node:refvalid(.)" 
                                  false="CanIfHrhCanCtrlIdRef must reference a valid CanIf controller configuration."/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfCtrlDrvCfg/CanIfCtrlCfg"/>
                          </v:ref>
                          <v:ref name="CanIfHrhCanHandleTypeRef" 
                                 type="SYMBOLIC-NAME-REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    CanIfHrhCanHandleTypeRef shall refer to the same HRH
                                    as CanIfHrhIdSymRef. Therefore CanIfHrhCanHandleTypeRef
                                    can not be edited.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="UUID" 
                                 value="b4b131b4-1857-41ee-90e4-450a52b30040"/>
                            <a:da name="EDITABLE" type="XPath" 
                                  expr="node:exists(.)"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet/CanHardwareObject"/>
                          </v:ref>
                          <v:ref name="CanIfHrhIdSymRef" 
                                 type="SYMBOLIC-NAME-REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;
                                      CanIfHrhIdSymRef refers to a particular HRH object in the
                                      CanDrv configuration (see CanHardwareObject CAN324_Conf)
                                    &lt;/p&gt;
                                    &lt;p&gt;
                                      The CanIf receives the following information of the
                                      CanDrv module by this reference:
                                    &lt;/p&gt;
                                    &lt;ul&gt;
                                      &lt;li&gt;CanHandleType (see CAN323_Conf)&lt;/li&gt;
                                      &lt;li&gt;CanObjectId (see CAN326_Conf)&lt;/li&gt;
                                    &lt;/ul&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="UUID" 
                                 value="7d14fda1-cd63-48cf-ac11-a7f9ea2b7ba7"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="( node:refvalid(.) ) and                                            ( as:ref(.)/CanObjectType = &apos;RECEIVE&apos; )" 
                                  false="CanIfHrhIdSymRef must reference a valid Can hardware receive object configuration."/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet/CanHardwareObject"/>
                          </v:ref>
                          <v:lst name="CanIfHrhRangeCfg" type="MAP">
                            <a:da name="MAX" value="0"/>
                            <v:ctr name="CanIfHrhRangeCfg" type="IDENTIFIABLE">
                              <a:a name="DESC">
                                <a:v>&lt;html&gt;
                                      &lt;p&gt;
                                        CanIfHrhRangeCfg is not used and therefore can not be edited.
                                      &lt;/p&gt;
                                      &lt;p&gt;
                                        The range configuration is done by container
                                        CanIfRxPduCanIdRange instead.
                                      &lt;/p&gt;
                                    &lt;/html&gt;</a:v>
                              </a:a>
                              <a:a name="POSTBUILDVARIANTMULTIPLICITY" 
                                   value="true"/>
                              <a:a name="UUID" 
                                   value="fc571fe3-2779-4f92-a41f-693d11175cab"/>
                              <v:var name="CanIfHrhRangeRxPduLowerCanId" 
                                     type="INTEGER">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;
                                          CanIfHrhRangeRxPduLowerCanId is not used.
                                        &lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="18f5e7db-daba-4980-a351-7908d61a474c"/>
                                <a:da name="DEFAULT" value="0"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=536870911"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                              </v:var>
                              <v:var name="CanIfHrhRangeRxPduRangeCanIdType" 
                                     type="ENUMERATION">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        CanIfHrhRangeRxPduRangeCanIdType is not used.
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="f396c68c-09a2-4870-9b6c-b0ea77c0a396"/>
                                <a:da name="DEFAULT" value="STANDARD"/>
                                <a:da name="RANGE">
                                  <a:v>EXTENDED</a:v>
                                  <a:v>STANDARD</a:v>
                                </a:da>
                              </v:var>
                              <v:var name="CanIfHrhRangeRxPduUpperCanId" 
                                     type="INTEGER">
                                <a:a name="DESC">
                                  <a:v>&lt;html&gt;
                                        &lt;p&gt;
                                          CanIfHrhRangeRxPduUpperCanId is not used.
                                        &lt;/p&gt;
                                      &lt;/html&gt;</a:v>
                                </a:a>
                                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                     type="IMPLEMENTATIONCONFIGCLASS">
                                  <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                                </a:a>
                                <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                                <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                                <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                                <a:a name="UUID" 
                                     value="f3408838-2bed-4a09-9f44-74f0b67a01d0"/>
                                <a:da name="DEFAULT" value="1"/>
                                <a:da name="INVALID" type="Range">
                                  <a:tst expr="&lt;=536870911"/>
                                  <a:tst expr="&gt;=0"/>
                                </a:da>
                              </v:var>
                            </v:ctr>
                          </v:lst>
                        </v:ctr>
                      </v:lst>
                      <v:lst name="CanIfHthCfg" type="MAP">
                        <v:ctr name="CanIfHthCfg" type="IDENTIFIABLE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  CanIfHthCfg contains parameters related to each HTH.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                          <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                          <a:a name="UUID" 
                               value="36a96360-808e-42ec-831a-5e81d7a3c0eb"/>
                          <v:ref name="CanIfHthCanCtrlIdRef" type="REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    Reference to controller ID to which the HTH belongs to.
                                    A controller can contain one or more HTHs.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                            <a:a name="UUID" 
                                 value="52d8d406-2f18-4129-a2f9-d2a8043e4236"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="node:refvalid(.)" 
                                  false="CanIfHthCanCtrlIdRef must reference a valid CanIf controller configuration."/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfCtrlDrvCfg/CanIfCtrlCfg"/>
                          </v:ref>
                          <v:ref name="CanIfHthCanHandleTypeRef" 
                                 type="SYMBOLIC-NAME-REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    CanIfHthCanHandleTypeRef shall refer to the same HTH as
                                    CanIfHthIdSymRef. Therefore CanIfHthCanHandleTypeRef can not
                                    be edited.
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v class="Link">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="OPTIONAL" value="true"/>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="UUID" 
                                 value="1d31b91c-a69b-48ec-9ea9-9e360987ee13"/>
                            <a:da name="EDITABLE" value="false"/>
                            <a:da name="ENABLE" value="false"/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet/CanHardwareObject"/>
                          </v:ref>
                          <v:ref name="CanIfHthIdSymRef" 
                                 type="SYMBOLIC-NAME-REFERENCE">
                            <a:a name="DESC">
                              <a:v>&lt;html&gt;
                                    &lt;p&gt;
                                      CanIfHthIdSymRef refers to a particular HTH object
                                      in the CAN Driver module configuration.
                                    &lt;/p&gt;
                                    &lt;p&gt;
                                      The HTH ID is unique in a given CAN Driver. The HTH IDs
                                      are defined in the CAN Driver module and hence it is
                                      derived from CAN Driver configuration.
                                    &lt;/p&gt;
                                  &lt;/html&gt;</a:v>
                            </a:a>
                            <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                                 type="IMPLEMENTATIONCONFIGCLASS">
                              <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                            </a:a>
                            <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                            <a:a name="UUID" 
                                 value="61d307be-9372-4167-b752-9569051a7e04"/>
                            <a:da name="INVALID" type="XPath" 
                                  expr="( node:refvalid(.) ) and                                            ( as:ref(.)/CanObjectType = &apos;TRANSMIT&apos; )" 
                                  false="CanIfHthIdSymRef must reference a valid Can hardware transmit object configuration."/>
                            <a:da name="REF" 
                                  value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet/CanHardwareObject"/>
                            <a:da name="WARNING" type="XPath" 
                                  expr="( node:refvalid(.) ) and                                            ( as:ref(.)/CanHandleType != &apos;BASIC&apos; ) and                                            ( count(../../../../../CanIfTxPduCfg/*[node:refvalid(CanIfTxPduBufferRef) and                                                                                    as:path(node:value(as:ref(CanIfTxPduBufferRef)/CanIfBufferHthRef/*[1])) = as:path(node:current()/..)]) &gt; 1 )" 
                                  true="CanIfHthIdSymRef refers not to a BASIC CAN object (CanHandleType != &apos;BASIC&apos;) but there are more than one Tx PDUs assigned to this HTH (parameter CanIfBufferHthRef from refereced CanIfTxPduBufferRef in container CanIfTxPduCfg). Please make sure that each HTH which is used by a several Tx PDUs is configured as BASIC CAN object."/>
                          </v:ref>
                        </v:ctr>
                      </v:lst>
                    </v:ctr>
                  </v:lst>
                  <v:lst name="CanIfRxPduCfg" type="MAP">
                    <a:a name="COLUMNS">
                      <a:v>CanIfRxPduId</a:v>
                      <a:v>CanIfRxPduCanId</a:v>
                      <a:v>CanIfRxPduCanIdType</a:v>
                      <a:v>CanIfRxPduDlc</a:v>
                    </a:a>
                    <a:da name="INVALID" type="XPath" 
                          expr="count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfRxPduCfg/*[CanIfRxPduReadNotifyStatus = &apos;true&apos;]) &gt;                                   as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxRxNotifyPdus" 
                          true="The number of enabled RxPdu read status notification (Sum of CanIfRxPduCfg with CanIfRxPduReadNotifyStatus set on true) must not exceed CanIfPublicMaxRxNotifyPdus."/>
                    <v:ctr name="CanIfRxPduCfg" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                CanIfRxPduCfg contains the configuration parameters
                                of each Rx L-PDU.
                              &lt;/p&gt;
                              &lt;p&gt;
                                The SHORT-NAME of &quot;CanIfRxPduConfig&quot; container
                                itself represents the symolic name of Rx L-PDU.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                      <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                      <a:a name="UUID" 
                           value="52d8d16b-82f5-40e1-bc00-724212b5a6b9"/>
                      <a:da name="INVALID" type="XPath">
                        <a:tst 
                               expr="(CanIfRxPduReadData = &apos;false&apos;) and                                      (CanIfRxPduReadNotifyStatus = &apos;false&apos;) and                                      (not(node:exists(CanIfRxPduUserRxIndicationUL)))" 
                               true="Rx PDUs must provide either an Rx indication (parameter CanIfRxPduUserRxIndicationUL is enabled) or it must be possible to get the received information via the read Rx PDU APIs (i.e. at least one of the two parameters CanIfRxPduReadData or CanIfRxPduReadNotifyStatus must be set)."/>
                        <a:tst 
                               expr="(node:exists(CanIfRxPduCanIdRange)) and                                      (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicRangeReceptionSupport = &apos;false&apos;)" 
                               true="If CanIfPublicRangeReceptionSupport is disabled, you must not use CanIfRxPduCanIdRange."/>
                      </a:da>
                      <v:var name="CanIfRxPduCanId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CAN identifier of Rx L-PDUs used by the
                                  CAN Interface.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  CanIfRxPduCanId is used if exactly one CAN identifier
                                  is assigned to the PDU. If a range is assigned then
                                  the CanIfRxPduCanIdRange container shall be used instead.
                                &lt;/p&gt;
                                &lt;p&gt;Range:
                                  &lt;ul&gt;
                                    &lt;li&gt;11 bit for standard CAN identifier.&lt;/li&gt;
                                    &lt;li&gt;29 bit for extended CAN identifier.&lt;/li&gt;
                                  &lt;/ul&gt;
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Example: The parameter is used by the CanIf within
                                  the Software Filtering functions.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="fa93b537-bbed-47fa-ba7d-7a333271580a"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="not(node:exists(../CanIfRxPduCanIdRange))"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=536870911"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                          <mt:xpath>
                            <mt:tst 
                                    true="CAN ID is out of range for standard CAN identifiers (must be &gt;= 0 and &lt;= 2047)." 
                                    expr="(    (../CanIfRxPduCanIdType = &apos;STANDARD_CAN&apos;)                                             or (../CanIfRxPduCanIdType = &apos;STANDARD_FD_CAN&apos;)                                             or (../CanIfRxPduCanIdType = &apos;STANDARD_NO_FD_CAN&apos;)                                           )                                           and                                           not((. &gt;= 0) and (. &lt;= 2047))"/>
                            <mt:tst 
                                    true="CAN ID is out of range for extended CAN identifiers (must be &gt;= 0 and &lt;= 536870911)." 
                                    expr="(    (../CanIfRxPduCanIdType = &apos;EXTENDED_CAN&apos;)                                             or (../CanIfRxPduCanIdType = &apos;EXTENDED_FD_CAN&apos;)                                             or (../CanIfRxPduCanIdType = &apos;EXTENDED_NO_FD_CAN&apos;)                                           )                                           and                                           not((. &gt;= 0) and (. &lt;= 536870911))"/>
                          </mt:xpath>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfRxPduCanIdType" type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfRxPduCanIdType describes the type of the CAN identifier
                                  of Rx L-PDUs used by the
                                  CAN Driver for CAN L-PDU reception.
                                &lt;/p&gt;
                                &lt;p&gt;Range:&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;EXTENDED_CAN for CAN 2.0 or CAN FD frame with extended identifier (29 bits).&lt;/li&gt;
                                  &lt;li&gt;EXTENDED_FD_CAN for CAN FD frame with extended identifier (29 bits).&lt;/li&gt;
                                  &lt;li&gt;EXTENDED_NO_FD_CAN for CAN 2.0 frame with extended identifier (29 bits).&lt;/li&gt;
                                  &lt;li&gt;STANDARD_CAN for CAN 2.0 or CAN FD frame with standard identifier (11 bits).&lt;/li&gt;
                                  &lt;li&gt;STANDARD_FD_CAN for CAN FD frame with standard identifier (11 bits).&lt;/li&gt;
                                  &lt;li&gt;STANDARD_NO_FD_CAN for CAN 2.0 frame with standard identifier (11 bits).&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="e38fedf5-93e1-47f4-b7cf-fb6eb3dccdae"/>
                        <a:da name="DEFAULT" value="STANDARD_CAN"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="(. != &apos;STANDARD_NO_FD_CAN&apos; )                                        and                                        (../../../../../CanIfPublicCfg/CanIfPublicCanIdTypeEnum = &apos;UINT16&apos;)" 
                              true="CanIfRxPduCanIdType must be set to STANDARD_NO_FD_CAN if CanIfPublicCanIdTypeEnum is set to UINT16."/>
                        <a:da name="RANGE">
                          <a:v>EXTENDED_CAN</a:v>
                          <a:v>EXTENDED_FD_CAN</a:v>
                          <a:v>EXTENDED_NO_FD_CAN</a:v>
                          <a:v>STANDARD_CAN</a:v>
                          <a:v>STANDARD_FD_CAN</a:v>
                          <a:v>STANDARD_NO_FD_CAN</a:v>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfRxPduCanIdMask" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Identifier mask which denotes relevant bits in the CAN Identifier.
                                  This parameter defines a CAN Identifier range in an alternative
                                  way to CanIfRxPduCanIdRange. It identifies the bits of the
                                  configured CAN Identifier that must match the received CAN Identifier.
                                &lt;/p&gt;
                                &lt;p&gt;Range:&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;11 bit for standard CAN identifier.&lt;/li&gt;
                                  &lt;li&gt;29 bit for extended CAN identifier.&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="50131755-ddcd-45ca-bba4-e8fc8a8d3c73"/>
                        <a:da name="DEFAULT" value="536870911"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="(../../../../../CanIfPublicCfg/CanIfMetaDataSupport = &apos;true&apos;) and                                 (node:exists(as:ref(../CanIfRxPduRef)/MetaDataTypeRef)) and                                 (node:exists(as:ref(as:ref(../CanIfRxPduRef)/MetaDataTypeRef)/MetaDataItem/*[MetaDataItemType= &apos;CAN_ID_32&apos;])) and                                 (not(node:exists(../CanIfRxPduCanIdRange)))"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=536870911"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfRxPduDlc" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Data Length code of Rx L-PDUs used
                                  by the CAN Interface.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  This information is used for DLC checking.
                                  A Rx L-PDU passes the DLC check if the received DLC
                                  is equal or greater than this value.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  If a Rx L-PDU passes the DLC check, CanIf passes the PDU
                                  to the upper layer module.
                                  Otherwise the Rx L-PDU is silently discarded.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  A value of 0 disables the DLC check for this PDU.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  If DLC check is disabled via the parameter CanIfPrivateDlcCheck
                                  this value has no effect on reception.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="327b37f2-c0f0-4bce-934f-a39f4f232347"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=64"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                          <mt:xpath 
                                    true="A data length code bigger than 8 bytes is only allowed if CanIfRxPduCanIdType selects a Flexible Data-Rate compatible type." 
                                    expr="(. &gt; 8)                                       and                                       (    (../CanIfRxPduCanIdType = &apos;STANDARD_NO_FD_CAN&apos;)                                         or (../CanIfRxPduCanIdType = &apos;EXTENDED_NO_FD_CAN&apos;)                                       )"/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfRxPduId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Unique ID for the Rx L-PDU in the CAN Interface.&lt;/p&gt;
                                &lt;p&gt;Range: 0..max. number of defined CanRxPduIds.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="5fb745cb-5477-4e65-8a36-88184905e762"/>
                        <a:da name="DEFAULT" type="XPath" expr="../@index "/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=65534"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfRxPduReadData" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Enables and disables the Rx buffering for reading
                                  of Rx L-PDU data.
                                &lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;True: Enabled&lt;/li&gt;
                                  &lt;li&gt;False: Disabled&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li class=&quot;optimization.config.ram.increase&quot;&gt;
                                    &lt;strong&gt;RAM increase (config):&lt;/strong&gt;
                                    Enabling this parameter increases the RAM consumption
                                    of the module configuration.
                                  &lt;/li&gt;
                                  &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                    &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                    Enabling this parameter increases the execution time
                                    of the module code.
                                  &lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="838a6aff-6527-4a38-af82-0dcdfc2ebd5c"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst 
                                 expr="(. = &apos;true&apos;) and                                        (../../../../../CanIfPublicCfg/CanIfPublicReadRxPduDataApi = &apos;false&apos;)" 
                                 true="CanIf_ReadRxPduData() API must be enabled (parameter CanIfPublicReadRxPduDataApi)."/>
                          <a:tst 
                                 expr="(. = &apos;true&apos;) and                                        (node:exists(../CanIfRxPduCanIdRange))" 
                                 true="If parameter CanIfRxPduReadData is set to true, there may be no reception range assigned to this Rx Pdu."/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfRxPduReadNotifyStatus" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Enables and disables receive indication for each Rx
                                  L-PDU for reading its notification status.
                                &lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;True: Enabled&lt;/li&gt;
                                  &lt;li&gt;False: Disabled&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li class=&quot;optimization.config.ram.increase&quot;&gt;
                                    &lt;strong&gt;RAM increase (config):&lt;/strong&gt;
                                    Enabling this parameter increases the RAM consumption
                                    of the module configuration.
                                  &lt;/li&gt;
                                  &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                    &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                    Enabling this parameter increases the execution time
                                    of the module code.
                                  &lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="7cbea6c7-9162-4771-a856-ea3fc44a7968"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst 
                                 expr="(. = &apos;true&apos;) and                                        (../../../../../CanIfPublicCfg/CanIfPublicReadRxPduNotifyStatusApi = &apos;false&apos;)" 
                                 true="CanIf_ReadRxNotifStatus() API must be enabled (parameter CanIfPublicReadRxPduNotifyStatusApi)."/>
                          <a:tst 
                                 expr="(. = &apos;true&apos;) and                                        (node:exists(../CanIfRxPduCanIdRange))" 
                                 true="If parameter CanIfRxPduReadNotifyStatus is set to true, there may be no reception range assigned to this Rx Pdu."/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfRxPduUserRxIndicationName" 
                             type="FUNCTION-NAME">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  In order to make this configuration container capable for
                                  post-build configuraton it is not possible to use this paramter.
                                  Please use the configuration parameter of the same name in the
                                  container CanIfUpperLayerConfig relating to
                                  CanIfRxPduUserRxIndicationUL.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="2d3f3643-c260-4eef-8d27-45af743bc3f3"/>
                        <a:da name="DEFAULT" value=""/>
                        <a:da name="ENABLE" value="false"/>
                      </v:var>
                      <v:var name="CanIfRxPduUserRxIndicationUL" 
                             type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfRxPduUserRxIndicationUL defines the upper layer (UL) module to
                                  which the indication of the successfully received
                                  CanRxPduId is routed via &amp;lt;User_RxIndication&amp;gt;.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  &amp;lt;User_RxIndication&amp;gt; is invoked when the
                                  indication of the configured CanRxPduId is received
                                  by a Rx indication event from the CAN Driver module.
                                  If no upper layer (UL) module is configured, no
                                  &amp;lt;User_RxIndication&amp;gt; is called in case of a Rx
                                  indication event of the CanRxPduId from the CAN Driver module.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="a6d987d6-741d-4ed4-94a7-15bab9e047e7"/>
                        <a:da name="DEFAULT" value="PDUR"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst 
                                 expr="(. = &apos;CAN_NM&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_NM&apos;])) = 0)" 
                                 true="If CanNm is selected as upper layer, a container with the name CAN_NM must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_NM&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_NM&apos;]/CanIfRxPduUserRxIndicationName)))" 
                                 true="If a RxIndication is used the parameter CanIfRxPduUserRxIndicationName in the upper layer configuration container with name CAN_NM must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TP&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TP&apos;])) = 0)" 
                                 true="If CanTp is selected as upper layer, a container with the name CAN_TP must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TP&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TP&apos;]/CanIfRxPduUserRxIndicationName)))" 
                                 true="If a RxIndication is used the parameter CanIfRxPduUserRxIndicationName in the upper layer configuration container with name CAN_TP must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TSYN&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TSYN&apos;])) = 0)" 
                                 true="If CanTSyn is selected as upper layer, a container with the name CAN_TSYN must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TSYN&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TSYN&apos;]/CanIfRxPduUserRxIndicationName)))" 
                                 true="If a RxIndication is used the parameter CanIfRxPduUserRxIndicationName in the upper layer configuration container with name CAN_TSYN must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;J1939NM&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939NM&apos;])) = 0)" 
                                 true="If J1939Nm is selected as upper layer, a container with the name J1939NM must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;J1939NM&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939NM&apos;]/CanIfRxPduUserRxIndicationName)))" 
                                 true="If a RxIndication is used the parameter CanIfRxPduUserRxIndicationName in the upper layer configuration container with name J1939NM must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;J1939TP&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939TP&apos;])) = 0)" 
                                 true="If J1939Tp is selected as upper layer, a container with the name J1939TP must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;J1939TP&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939TP&apos;]/CanIfRxPduUserRxIndicationName)))" 
                                 true="If a RxIndication is used the parameter CanIfRxPduUserRxIndicationName in the upper layer configuration container with name J1939TP must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;PDUR&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;PDUR&apos;])) = 0)" 
                                 true="If PduR is selected as upper layer, a container with the name PDUR must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;PDUR&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;PDUR&apos;]/CanIfRxPduUserRxIndicationName)))" 
                                 true="If a RxIndication is used the parameter CanIfRxPduUserRxIndicationName in the upper layer configuration container with name PDUR must be enabled."/>
                        </a:da>
                        <a:da name="RANGE">
                          <a:v>CAN_NM</a:v>
                          <a:v>CAN_TP</a:v>
                          <a:v>CAN_TSYN</a:v>
                          <a:v>J1939NM</a:v>
                          <a:v>J1939TP</a:v>
                          <a:v>CDD</a:v>
                          <a:v>PDUR</a:v>
                        </a:da>
                      </v:var>
                      <v:ref name="CanIfRxPduBswSchExclAreaIdRef" 
                             type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfRxPduBswSchExclAreaIdRef is not used by the CanIf
                                  and therefore can not be edited.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="18c2e0bc-a11d-4bd2-bdef-f702c77331c2"/>
                        <a:da name="EDITABLE" value="false"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Rte/RteBswModuleInstance/RteBswExclusiveAreaImpl"/>
                      </v:ref>
                      <v:lst name="CanIfRxPduHrhIdRef">
                        <a:da name="MIN" value="1"/>
                        <v:ref name="CanIfRxPduHrhIdRef" type="REFERENCE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  CanIfRxPduHrhIdRef refers to the HRH to which Rx L-PDU belongs to.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v class="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                          <a:a name="UUID" 
                               value="aa07542c-9738-49a8-ae1c-4beacfed1876"/>
                          <a:da name="INVALID" type="XPath">
                            <a:tst expr="node:refvalid(.)" 
                                   false="CanIfRxPduHrhIdRef must reference a valid CanIf HRH configuration."/>
                            <a:tst 
                                   expr="    (node:exists(../../CanIfRxPduCanId))                                            and (count(../../../*[    node:exists(CanIfRxPduCanId)                                                                  and node:exists(CanIfRxPduHrhIdRef/*[. = node:current()])                                                                  and (CanIfRxPduCanId = node:current()/../../CanIfRxPduCanId)                                                                  and (((node:current()/../../CanIfRxPduCanIdType = &apos;STANDARD_FD_CAN&apos;) or (node:current()/../../CanIfRxPduCanIdType = &apos;EXTENDED_FD_CAN&apos;))                                                                  and ((CanIfRxPduCanIdType = &apos;STANDARD_FD_CAN&apos;) or (CanIfRxPduCanIdType = &apos;EXTENDED_FD_CAN&apos;))                                                                       or                                                                      (((node:current()/../../CanIfRxPduCanIdType = &apos;STANDARD_NO_FD_CAN&apos;) or (node:current()/../../CanIfRxPduCanIdType = &apos;EXTENDED_NO_FD_CAN&apos;))  and                                                                      ((CanIfRxPduCanIdType = &apos;STANDARD_NO_FD_CAN&apos;) or (CanIfRxPduCanIdType = &apos;EXTENDED_NO_FD_CAN&apos;))))                                                                 ]) &gt; 1)" 
                                   true="The CAN ID must be distinct for all Rx PDUs, that reference this HRH. There is at least one other Rx PDU with the same CanIfRxPduCanId parameter value and same type."/>
                            <a:tst 
                                   expr="    (node:exists(../../CanIfRxPduCanId))                                            and (count(../../../*[    node:exists(CanIfRxPduCanIdRange)                                                                  and node:exists(CanIfRxPduHrhIdRef/*[. = node:current()])                                                                  and (CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeLowerCanId &lt;= node:current()/../../CanIfRxPduCanId)                                                                  and (CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeUpperCanId &gt;= node:current()/../../CanIfRxPduCanId)                                                                 ]) &gt; 0)" 
                                   true="The CAN ID must be distinct for all Rx PDUs, that reference this HRH. The CAN ID of this Rx PDU (parameter CanIfRxPduCanId) is contained within the range of another Rx PDU (container CanIfRxPduCanIdRange) that is assigned to this HRH."/>
                            <a:tst 
                                   expr="    (node:exists(../../CanIfRxPduCanIdRange))                                            and (count(../../../*[node:exists(CanIfRxPduCanId)                                                                  and node:exists(CanIfRxPduHrhIdRef/*[. = node:current()])                                                                  and (CanIfRxPduCanId &gt;= node:current()/../../CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeLowerCanId)                                                                  and (CanIfRxPduCanId &lt;= node:current()/../../CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeUpperCanId)                                                                 ]) &gt; 0)" 
                                   true="The CAN ID must be distinct for all Rx PDUs, that reference this HRH. The CAN ID range of this Rx PDU (container CanIfRxPduCanIdRange) covers the CAN ID of another Rx PDU (parameter CanIfRxPduCanId) that is assigned to this HRH."/>
                            <a:tst 
                                   expr="    (node:exists(../../CanIfRxPduCanIdRange))                                            and (count(../../../*[    node:exists(CanIfRxPduCanIdRange)                                                                  and node:exists(CanIfRxPduHrhIdRef/*[. = node:current()])                                                                  and (CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeUpperCanId &gt;= node:current()/../../CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeLowerCanId)                                                                  and (CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeLowerCanId &lt;= node:current()/../../CanIfRxPduCanIdRange/CanIfRxPduCanIdRangeUpperCanId)                                                                 ]) &gt; 1)" 
                                   true="The CAN ID must be distinct for all Rx PDUs, that reference this HRH. The CAN ID range of this Rx PDU (container CanIfRxPduCanIdRange) overlaps with the CAN ID range of another Rx PDU that is assigned to this HRH."/>
                          </a:da>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfInitCfg/CanIfInitHohCfg/CanIfHrhCfg"/>
                        </v:ref>
                      </v:lst>
                      <v:ref name="CanIfRxPduRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to the &quot;global&quot; PDU structure to allow
                                harmonization of handle IDs in the com stack.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="dfacc8f1-ef84-4abd-8734-ba9fc8ff2ed5"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="CanIfRxPduRef must reference a valid EcuC PDU configuration."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                      </v:ref>
                      <v:ctr name="CanIfRxPduCanIdRange" type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Range of CAN identifier of Rx L-PDUs used by the
                                  CAN Interface.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  CanIfRxPduCanIdRange is used if a range of CAN identifier
                                  is assigned to the PDU. If a single ID is assigned then
                                  the parameter CanIfRxPduCanId shall be used instead.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  The boundaries of the range are configured with the parameter
                                  CanIfRxPduCanIdRangeLowerCanId and CanIfRxPduCanIdRangeUpperCanId.
                                &lt;/p&gt;
                                &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li class=&quot;optimization.config.rom.increase&quot;&gt;
                                    &lt;strong&gt;ROM increase (config):&lt;/strong&gt;
                                    Using this container increases the ROM consumption of the module configuration.
                                  &lt;/li&gt;
                                  &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                                    &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                                    Using this container increases the ROM consumption of the module code.
                                  &lt;/li&gt;
                                  &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                    &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                    Using this container increases the execution time of the module code.
                                  &lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="UUID" 
                             value="5e2238e1-514c-47c0-9a0c-e3f7993ea441"/>
                        <a:da name="ENABLE" value="false"/>
                        <v:var name="CanIfRxPduCanIdRangeLowerCanId" 
                               type="INTEGER">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  &lt;p&gt;
                                    Lower CAN identifier of a Rx L-PDU for
                                    identifier range definition, in which all CAN IDs
                                    are mapped to one PDU ID.
                                  &lt;/p&gt;
                                  &lt;p&gt;Range:
                                    &lt;ul&gt;
                                      &lt;li&gt;11 bit for standard CAN identifier.&lt;/li&gt;
                                      &lt;li&gt;29 bit for extended CAN identifier.&lt;/li&gt;
                                    &lt;/ul&gt;
                                  &lt;/p&gt;
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" 
                               value="51e55f48-2e4f-47af-8d1b-7f70f051588a"/>
                          <a:da name="DEFAULT" value="0"/>
                          <a:da name="INVALID" type="Multi">
                            <mt:range>
                              <mt:tst expr="&lt;=536870911"/>
                              <mt:tst expr="&gt;=0"/>
                            </mt:range>
                            <mt:xpath 
                                      true="CanIfRxPduCanIdRangeLowerCanId must be greater than or equal to 0." 
                                      expr="(. &gt;= ../CanIfRxPduCanIdRangeUpperCanId) or (. &lt; 0)"/>
                          </a:da>
                        </v:var>
                        <v:var name="CanIfRxPduCanIdRangeUpperCanId" 
                               type="INTEGER">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  &lt;p&gt;
                                    Upper CAN identifier of a Rx L-PDU for
                                    identifier range definition, in which all CAN IDs
                                    are mapped to one PDU ID.
                                  &lt;/p&gt;
                                  &lt;p&gt;Range:
                                    &lt;ul&gt;
                                      &lt;li&gt;11 bit for standard CAN identifier.&lt;/li&gt;
                                      &lt;li&gt;29 bit for extended CAN identifier.&lt;/li&gt;
                                    &lt;/ul&gt;
                                  &lt;/p&gt;
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" 
                               value="0bdf0426-eb3f-4769-8927-819aa5176abf"/>
                          <a:da name="DEFAULT" value="1"/>
                          <a:da name="INVALID" type="Multi">
                            <mt:range>
                              <mt:tst expr="&lt;=536870911"/>
                              <mt:tst expr="&gt;=0"/>
                            </mt:range>
                            <mt:xpath>
                              <mt:tst 
                                      false="CanIfRxPduCanIdRangeUpperCanId must be greater than CanIfRxPduCanIdRangeLowerCanId." 
                                      expr="../CanIfRxPduCanIdRangeLowerCanId &lt; ."/>
                              <mt:tst 
                                      true="CanIfRxPduCanIdRangeUpperCanId is out of range for standard CAN identifiers (must be &lt;= 2047)." 
                                      expr="(    (../../CanIfRxPduCanIdType = &apos;STANDARD_CAN&apos;)                                            or (../../CanIfRxPduCanIdType = &apos;STANDARD_FD_CAN&apos;)                                            or (../../CanIfRxPduCanIdType = &apos;STANDARD_NO_FD_CAN&apos;)                                          )                                          and                                          (. &gt; 2047)"/>
                              <mt:tst 
                                      true="CanIfRxPduCanIdRangeUpperCanId is out of range for extended CAN identifiers (must be &lt;= 536870911)." 
                                      expr="(    (../../CanIfRxPduCanIdType = &apos;EXTENDED_CAN&apos;)                                            or (../../CanIfRxPduCanIdType = &apos;EXTENDED_FD_CAN&apos;)                                            or (../../CanIfRxPduCanIdType = &apos;EXTENDED_NO_FD_CAN&apos;)                                          )                                          and (. &gt; 536870911)"/>
                            </mt:xpath>
                          </a:da>
                        </v:var>
                      </v:ctr>
                      <v:var name="CanIfRxPduTargetPduID" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfRxPduTargetPduID defines the PDU ID to be delivered for
                                  this Rx L-PDU if this message is received on the bus.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Please note that CanIfRxPduTargetPduID is used only if this
                                  Rx L-PDU is assigned to a user specific upper layer
                                  (parameter &lt;em&gt;CanIfRxPduUserRxIndicationUL&lt;/em&gt;
                                  is set to &lt;em&gt;CDD&lt;/em&gt;) and if CanIfUseCddHandleIds of its
                                  referenced UL Cdd is set to false.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="CanIfRxPduTargetPduID"/>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="7d3b14d6-e5b0-4fbe-9239-e25cf16bb1c2"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="../CanIfRxPduUserRxIndicationUL = &apos;CDD&apos; and (as:ref(../CanIfRxPduUpperLayerRef)/CanIfUseCddHandleIds = &apos;false&apos;)"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=65535"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:ref name="CanIfRxPduUpperLayerRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                CanIfRxPduUpperLayerRef references the user specific upper layer
                                for this Rx L-PDU in the case that
                                &lt;em&gt;CanIfRxPduUserRxIndicationUL&lt;/em&gt; is set to &lt;em&gt;CDD&lt;/em&gt;.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="CanIfRxPduUpperLayerRef"/>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="UUID" 
                             value="8ad51c01-d4fa-48c9-a822-23a6fe946378"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="../CanIfRxPduUserRxIndicationUL = &apos;CDD&apos;"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="CanIfRxPduUpperLayerRef must reference a valid CanIf upper layer configuration."/>
                          <a:tst 
                                 expr="(node:refvalid(.)) and                                        ( (node:name(node:ref(.)) = &apos;CAN_NM&apos;) or                                          (node:name(node:ref(.)) = &apos;CAN_TP&apos;) or                                          (node:name(node:ref(.)) = &apos;CAN_TSYN&apos;) or                                          (node:name(node:ref(.)) = &apos;J1939NM&apos;) or                                          (node:name(node:ref(.)) = &apos;J1939TP&apos;) or                                          (node:name(node:ref(.)) = &apos;PDUR&apos;) )" 
                                 true="This reference is valid for CDD usage only and must not point to one of the well-known CanIf upper layers."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfUpperLayerConfig"/>
                      </v:ref>
                      <v:ctr name="CanIfTTRxFrameTriggering" 
                             type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                CanIfTTRxFrameTriggering is not used by the CanIf.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="UUID" 
                             value="c4c0b5ec-4cd3-4fb9-be18-2a89b5f2eee0"/>
                        <a:da name="ENABLE" value="false"/>
                        <v:var name="CanTTRxJoblistTimeMark" type="INTEGER">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  CanTTRxJoblistTimeMark is not used by the CanIf
                                  and therefore can not be edited.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" 
                               value="86ccf9a7-fcd0-485e-ae5a-c601a4796a26"/>
                          <a:da name="EDITABLE" value="false"/>
                          <a:da name="ENABLE" value="false"/>
                        </v:var>
                        <v:ref name="CanIfTTRxHwObjectTriggerIdRef" 
                               type="REFERENCE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  CanIfTTRxHwObjectTriggerIdRef is not used by the CanIf
                                  and therefore can not be edited.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                          <a:a name="UUID" 
                               value="f4d748de-0b2d-4feb-9185-1236d5a8f472"/>
                          <a:da name="EDITABLE" value="false"/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet/CanHardwareObject/CanTTHardwareObjectTrigger"/>
                        </v:ref>
                      </v:ctr>
                    </v:ctr>
                  </v:lst>
                  <v:lst name="CanIfTxPduCfg" type="MAP">
                    <a:a name="COLUMNS">
                      <a:v>CanIfTxPduId</a:v>
                      <a:v>CanIfTxPduCanId</a:v>
                      <a:v>CanIfTxPduCanIdType</a:v>
                    </a:a>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="node:exists(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxTxBuffers) and                                    (count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfTxPduCfg/*[as:ref(as:ref(as:ref(CanIfTxPduBufferRef)/CanIfBufferHthRef/*[1])/CanIfHthIdSymRef)/CanHandleType=&apos;BASIC&apos;]) &gt;                                    (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxTxBuffers))" 
                             true="The number of required Tx-Buffers (CanIfTxPduCfgs with BASIC CanHandleType) must not exceed CanIfPublicCfg/CanIfPublicMaxTxBuffers."/>
                      <a:tst 
                             expr="node:exists(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxTxBufferSize) and                                    (8*(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfTxPduCfg/*[CanIfTxPduCanIdType=&apos;STANDARD_CAN&apos; and as:ref(as:ref(as:ref(CanIfTxPduBufferRef)/CanIfBufferHthRef/*[1])/CanIfHthIdSymRef)/CanHandleType=&apos;BASIC&apos;]) +                                    count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfTxPduCfg/*[CanIfTxPduCanIdType=&apos;EXTENDED_CAN&apos; and as:ref(as:ref(as:ref(CanIfTxPduBufferRef)/CanIfBufferHthRef/*[1])/CanIfHthIdSymRef)/CanHandleType=&apos;BASIC&apos;])) +                                    64*(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfTxPduCfg/*[CanIfTxPduCanIdType=&apos;STANDARD_FD_CAN&apos; and as:ref(as:ref(as:ref(CanIfTxPduBufferRef)/CanIfBufferHthRef/*[1])/CanIfHthIdSymRef)/CanHandleType=&apos;BASIC&apos;]) +                                    count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfTxPduCfg/*[CanIfTxPduCanIdType=&apos;EXTENDED_FD_CAN&apos; and as:ref(as:ref(as:ref(CanIfTxPduBufferRef)/CanIfBufferHthRef/*[1])/CanIfHthIdSymRef)/CanHandleType=&apos;BASIC&apos;]))) &gt;                                    (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxTxBufferSize)" 
                             true="The size of Tx-Buffer memory (Sum of CanIfTxPduCfgs max frame lengths which have CanHandleType set to BASIC) must not exceed the configured CanIfPublicMaxTxBufferSize."/>
                      <a:tst 
                             expr="num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfTxPduCfg/*[CanIfTxPduReadNotifyStatus = &apos;true&apos;])) &gt;                                   as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxTxNotifyPdus" 
                             true="The number of enabled TxPdu read status notification (Sum of CandIfTxPduCfgs with CanIfTxPduReadNotifyStatus set to true) must not exceed the configured CanIfPublicMaxTxNotifyPdus."/>
                      <a:tst 
                             expr="num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfTxPduCfg/*[CanIfTxPduType = &apos;DYNAMIC&apos;])) &gt;                                   as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxDynTxPdus" 
                             true="The number of dynamic Tx-Pdus (Sum of CandIfTxPduCfgs with CanIfTxPduType set to DYNAMIC) must not exceed CanIfPublicMaxDynTxPdus."/>
                      <a:tst 
                             expr="../../../CanIfPublicCfg/CanIfBusMirroringSupport = &apos;true&apos; and (count(./*) &gt; ../../../CanIfMirroringSupport/TxMirrorNumTxPdus)" 
                             true="The number of CanIfTxPdus must not exceed CanIfMirroringSupport/Tx Mirror Max TxPdus when CanIfBusMirroringSupport is enabled."/>
                      <a:tst 
                             expr="../../../CanIfPublicCfg/CanIfBusMirroringSupport = &apos;true&apos; and (sum(node:refs(./*/CanIfTxPduRef)/PduLength) &gt; ../../../CanIfMirroringSupport/TxMirrorBufferSize)" 
                             true="The sum of PduLength of the configured CanIfTxPdus must not exceed CanIfMirroringSupport/Tx Mirror Buffer Size when CanIfBusMirroringSupport is enabled."/>
                    </a:da>
                    <v:ctr name="CanIfTxPduCfg" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                CanIfTxPduCfg contains the configuration parameters
                                of a Tx L-PDU.
                              &lt;/p&gt;
                              &lt;p&gt;
                                It has to be configured as often as a Tx L-PDU is needed.
                              &lt;/p&gt;
                              &lt;p&gt;
                                The SHORT-NAME of &quot;CanIfTxPduConfig&quot; container
                                represents the symbolic name of Tx L-PDU.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="true"/>
                      <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                      <a:a name="UUID" 
                           value="27e88eda-43fd-4665-9ce4-9cf45f7eac1d"/>
                      <a:da name="INVALID" type="XPath">
                        <a:tst 
                               expr="(../../../../CanIfPublicCfg/CanIfMetaDataSupport = &apos;false&apos;) and                                       (node:empty(CanIfTxPduCanId))" 
                               true="CanIfTxPduCanId must be available if MetadaDataSupport is disabled."/>
                        <a:tst 
                               expr="((../../../../CanIfPublicCfg/CanIfMetaDataSupport = &apos;true&apos;) and                                       (not(node:exists(as:ref(CanIfTxPduRef)/MetaDataTypeRef)))) and                                       (node:empty(CanIfTxPduCanId))" 
                               true="CanIfTxPduCanId must be enabled if the Pdu doesn&apos;t have MetaDataTypeRef configured in EcuC."/>
                        <a:tst 
                               expr="((../../../../CanIfPublicCfg/CanIfMetaDataSupport = &apos;true&apos;) and                                       ((node:exists(as:ref(CanIfTxPduRef)/MetaDataTypeRef)) and                                        (not(node:exists(as:ref(as:ref(CanIfTxPduRef)/MetaDataTypeRef)/MetaDataItem/*[MetaDataItemType = &apos;CAN_ID_32&apos;]))))) and                                       (node:empty(CanIfTxPduCanId))" 
                               true="CanIfTxPduCanId must be enabled if the Pdu doesn&apos;t have a MetaDataItem of type CAN_ID_32 configured in EcuC."/>
                        <a:tst 
                               expr="(../../../../CanIfPublicCfg/CanIfMetaDataSupport = &apos;true&apos;) and                                       (node:exists(as:ref(CanIfTxPduRef)/MetaDataTypeRef)) and                                       (node:exists(as:ref(as:ref(CanIfTxPduRef)/MetaDataTypeRef)/MetaDataItem/*[MetaDataItemType = &apos;CAN_ID_32&apos;])) and                                       (CanIfTxPduType = &apos;STATIC&apos;)" 
                               true="CanIfTxPduType must be set to &apos;DYNAMIC&apos; if a MetaDataItem of type CAN_ID_32 is configured in EcuC for this Pdu."/>
                      </a:da>
                      <v:var name="CanIfTxPduCanId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CAN identifier of Tx L-PDUs used by the
                                  CAN Driver for CAN L-PDU transmission.
                                &lt;/p&gt;
                                &lt;p&gt;Range:&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;11 bit for standard CAN identifier.&lt;/li&gt;
                                  &lt;li&gt;29 bit for extended CAN identifier.&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="2145eb9d-73f3-4118-b6c6-7dd0d1538310"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="ENABLE" value="true"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:range>
                            <mt:tst expr="&lt;=536870911"/>
                            <mt:tst expr="&gt;=0"/>
                          </mt:range>
                          <mt:xpath>
                            <mt:tst 
                                    true="CAN ID is out of range for standard CAN identifiers" 
                                    expr="(    (../CanIfTxPduCanIdType = &apos;STANDARD_CAN&apos;)                                          or (../CanIfTxPduCanIdType = &apos;STANDARD_FD_CAN&apos;)                                        )                                        and                                        not((. &gt;= 0) and (. &lt;= 2047))"/>
                            <mt:tst 
                                    true="CAN ID is out of range for extended CAN identifiers" 
                                    expr="(    (../CanIfTxPduCanIdType = &apos;EXTENDED_CAN&apos;)                                          or (../CanIfTxPduCanIdType = &apos;EXTENDED_FD_CAN&apos;)                                        )                                        and                                        not((. &gt;= 0) and (. &lt;= 536870911))"/>
                          </mt:xpath>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfTxPduCanIdType" type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTxPduCanIdType describes the type of the CAN identifier
                                  of Tx L-PDUs used by the
                                  CAN Driver for CAN L-PDU transmission.
                                &lt;/p&gt;
                                &lt;p&gt;Range:&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;STANDARD_CAN Can frame with standard identifier (11 bits).&lt;/li&gt;
                                  &lt;li&gt;STANDARD_FD_CAN Can FD frame with standard identifier (11 bits).&lt;/li&gt;
                                  &lt;li&gt;EXTENDED_CAN Can frame with extended identifier (29  bits).&lt;/li&gt;
                                  &lt;li&gt;EXTENDED_FD_CAN Can FD frame with extended identifier (29  bits).&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:da name="DEFAULT" value="STANDARD_CAN"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="(. != &apos;STANDARD_CAN&apos;)                                        and                                        (../../../../../CanIfPublicCfg/CanIfPublicCanIdTypeEnum = &apos;UINT16&apos;)" 
                              true="CanIfTxPduCanIdType must be set to STANDARD_CAN if CanIfPublicCanIdTypeEnum is set to UINT16."/>
                        <a:da name="RANGE">
                          <a:v>EXTENDED_CAN</a:v>
                          <a:v>EXTENDED_FD_CAN</a:v>
                          <a:v>STANDARD_CAN</a:v>
                          <a:v>STANDARD_FD_CAN</a:v>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfTxPduCanIdMask" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Identifier mask which denotes relevant bits in the CAN Identifier.
                                  This parameter may be used to keep parts of the CAN Identifier of
                                  dynamic transmit L-PDUs static.
                                &lt;/p&gt;
                                &lt;p&gt;Range:&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;11 bit for standard CAN identifier.&lt;/li&gt;
                                  &lt;li&gt;29 bit for extended CAN identifier.&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="4a46bf4e-58c4-4293-9dc2-4705b93b72a6"/>
                        <a:da name="DEFAULT" value="3758096383"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="(../../../../../CanIfPublicCfg/CanIfMetaDataSupport = &apos;true&apos;) and                                 (node:exists(as:ref(../CanIfTxPduRef)/MetaDataTypeRef)) and                                 (node:exists(as:ref(as:ref(../CanIfTxPduRef)/MetaDataTypeRef)/MetaDataItem/*[MetaDataItemType= &apos;CAN_ID_32&apos;])) and                                 (node:exists(../CanIfTxPduCanId))"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=3758096383"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfTxPduDlc" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTxPduDlc is not used by the CanIf and therefore
                                  can not be edited.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Please note: The data length code is derived from
                                  the PduInfoPtr of the CanIf_Transmit() function instead.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="bcb144ad-0302-4795-b743-aae671bcefb0"/>
                        <a:da name="DEFAULT" value="8"/>
                        <a:da name="EDITABLE" value="false"/>
                      </v:var>
                      <v:var name="CanIfTxPduId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  ECU wide unique, symbolic handle for Tx L-PDU.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Range: 0..max. number of CanTxPduIds.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="55bd597e-9059-470e-87d5-e41e29789fde"/>
                        <a:da name="DEFAULT" type="XPath" expr="../@index "/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=65534"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfTxPduPnFilterPdu" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  If CanIfPublicPnFilterSupport is enabled, by this parameter PDUs
                                  could be configured which will pass the CanIfPnFilter. If there
                                  is no CanIfTxPduPnFilterPdu configured per controller, the
                                  corresponding controller applies no CanIfPnFilter.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="6a54dff8-0884-4df9-a6b7-d61db04a92ef"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="(../../../../../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos;)"/>
                      </v:var>
                      <v:var name="CanIfTxPduReadNotifyStatus" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Enables and disables transmit confirmation for each
                                  Tx L-PDU for reading its notification status.
                                &lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;True: Enabled&lt;/li&gt;
                                  &lt;li&gt;False: Disabled&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li class=&quot;optimization.config.ram.increase&quot;&gt;
                                    &lt;strong&gt;RAM increase (config):&lt;/strong&gt;
                                    Enabling this parameter increases the RAM consumption
                                    of the module configuration.
                                  &lt;/li&gt;
                                  &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                    &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                    Enabling this parameter increases the execution time
                                    of the module code.
                                  &lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="19715828-52a6-4a47-bb46-4f756635aa1a"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="(. = &apos;true&apos;) and (../../../../../CanIfPublicCfg/CanIfPublicReadTxPduNotifyStatusApi = &apos;false&apos;)" 
                              true="CanIfPublicReadTxPduNotifyStatusApi must be set to &apos;true&apos;"/>
                      </v:var>
                      <v:var name="CanIfTxPduTruncation" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Enables/disables truncation of PDUs that exceed the configured size.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="b21b6ab7-3410-4197-9a8c-b9c56d5f052f"/>
                        <a:da name="DEFAULT" value="true"/>
                      </v:var>
                      <v:var name="CanIfTxPduTruncateToFrame" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  Provides an option to truncate the TxPdu length before transmission either 
                                  at the CAN frame length (8B for CAN 2.0, 64B for CAN FD) or 
                                  at the configured PDU length in EcuC.
                                &lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;True: Truncate the TxPdu to the CAN frame length: 8B for CAN 2.0, 64B for CAN FD (legacy behavior)&lt;/li&gt;
                                  &lt;li&gt;False: Truncate the TxPdu to the configured PDU length in EcuC&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;p&gt;
                                  Please note that CanIfTxPduTruncateToFrame is used only if parameter CanIfTxPduTruncation is TRUE.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="1bd029bd-ba21-4668-bfa0-06a9c75d482b"/>
                        <a:da name="DEFAULT" value="true"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="../CanIfTxPduTruncation = &apos;true&apos;"/>
                      </v:var>
                      <v:var name="CanIfTxPduType" type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTxPduType defines the type of each Tx L-PDU. CanIfTxPduType
                                  selects between static CAN ID or a possible CAN ID change
                                  via the API CanIf_SetDynamicTxId()
                                &lt;/p&gt;
                                &lt;p&gt;Range:&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;STATIC: CAN ID can not be changed during run-time&lt;/li&gt;
                                  &lt;li&gt;DYNAMIC: CAN ID can be changed during run-time&lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li class=&quot;optimization.config.ram.increase&quot;&gt;
                                    &lt;strong&gt;RAM increase (config):&lt;/strong&gt;
                                    Setting this parameter to DYNAMIC increases
                                    the RAM consumption of the module configuration.
                                  &lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="c425553b-73d7-4c57-ac59-0d22fb9fed86"/>
                        <a:da name="DEFAULT" value="STATIC"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="(. = &apos;DYNAMIC&apos;) and (../../../../../CanIfPublicCfg/CanIfPublicSetDynamicTxIdApi = &apos;false&apos;) and (../../../../../CanIfPublicCfg/CanIfMetaDataSupport = &apos;false&apos;)" 
                              true="CanIfTxPduType can only be set to DYNAMIC if either CanIfPublicSetDynamicTxIdApi or CanIfMetaDataSupport are enabled."/>
                        <a:da name="RANGE">
                          <a:v>DYNAMIC</a:v>
                          <a:v>STATIC</a:v>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfTxPduUserTxConfirmationName" 
                             type="FUNCTION-NAME">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  In order to make this configuration container capable for
                                  post-build configuraton it is not possible to use this paramter.
                                  Please use the configuration parameter of the same name in the
                                  container CanIfUpperLayerConfig relating to
                                  CanIfTxPduUserTxConfirmationUL.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="49fb371d-6874-4358-a960-684407eb0a3b"/>
                        <a:da name="DEFAULT" value=""/>
                        <a:da name="ENABLE" value="false"/>
                      </v:var>
                      <v:var name="CanIfTxPduUserTxConfirmationUL" 
                             type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTxPduUserTxConfirmationUL defines the upper layer (UL) module to
                                  which the confirmation of the successfully transmitted
                                  CanTxPduId is routed via the
                                  &amp;lt;User_TxConfirmation&amp;gt;.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  &amp;lt;User_TxConfirmation&amp;gt; is invoked when
                                  the confirmation of the configured CanTxPduId was
                                  received by a Tx confirmation event from the CAN Driver
                                  module. If no upper layer (UL) module is configured,
                                  no &amp;lt;User_TxConfirmation&amp;gt; is called in case
                                  of a Tx confirmation event of the CanTxPduId from the
                                  CAN Driver module.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="8be2716f-99f1-4fb9-954f-a4a4644a0e2a"/>
                        <a:da name="DEFAULT" value="PDUR"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst 
                                 expr="(. = &apos;CAN_NM&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_NM&apos;])) = 0)" 
                                 true="If CanNm is selected as upper layer, a container with the name CAN_NM must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_NM&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_NM&apos;]/CanIfTxPduUserTxConfirmationName)))" 
                                 true="If a TxConfirmation is used the parameter CanIfTxPduUserTxConfirmationName in the upper layer configuration container with name CAN_NM must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TP&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TP&apos;])) = 0)" 
                                 true="If CanTp is selected as upper layer, a container with the name CAN_TP must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TP&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TP&apos;]/CanIfTxPduUserTxConfirmationName)))" 
                                 true="If a TxConfirmation is used the parameter CanIfTxPduUserTxConfirmationName in the upper layer configuration container with name CAN_TP must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TSYN&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TSYN&apos;])) = 0)" 
                                 true="If CanTSyn is selected as upper layer, a container with the name CAN_TSYN must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;CAN_TSYN&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;CAN_TSYN&apos;]/CanIfTxPduUserTxConfirmationName)))" 
                                 true="If a TxConfirmation is used the parameter CanIfTxPduUserTxConfirmationName in the upper layer configuration container with name CAN_TSYN must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;J1939NM&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939NM&apos;])) = 0)" 
                                 true="If J1939Nm is selected as upper layer, a container with the name J1939NM must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;J1939NM&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939NM&apos;]/CanIfTxPduUserTxConfirmationName)))" 
                                 true="If a TxConfirmation is used the parameter CanIfTxPduUserTxConfirmationName in the upper layer configuration container with name J1939NM must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;J1939TP&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939TP&apos;])) = 0)" 
                                 true="If J1939Tp is selected as upper layer, a container with the name J1939TP must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;J1939TP&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;J1939TP&apos;]/CanIfTxPduUserTxConfirmationName)))" 
                                 true="If a TxConfirmation is used the parameter CanIfTxPduUserTxConfirmationName in the upper layer configuration container with name J1939TP must be enabled."/>
                          <a:tst 
                                 expr="(. = &apos;PDUR&apos;) and                                        (num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;PDUR&apos;])) = 0)" 
                                 true="If PduR is selected as upper layer, a container with the name PDUR must exist in the CanIfUpperLayerConfig."/>
                          <a:tst 
                                 expr="(. = &apos;PDUR&apos;) and                                        not(node:exists((as:modconf(&apos;CanIf&apos;)[1]/CanIfUpperLayerConfig/*[@name = &apos;PDUR&apos;]/CanIfTxPduUserTxConfirmationName)))" 
                                 true="If a TxConfirmation is used the parameter CanIfTxPduUserTxConfirmationName in the upper layer configuration container with name PDUR  must be enabled."/>
                        </a:da>
                        <a:da name="RANGE">
                          <a:v>CAN_NM</a:v>
                          <a:v>CAN_TP</a:v>
                          <a:v>CAN_TSYN</a:v>
                          <a:v>J1939NM</a:v>
                          <a:v>J1939TP</a:v>
                          <a:v>CDD</a:v>
                          <a:v>PDUR</a:v>
                        </a:da>
                      </v:var>
                      <v:ref name="CanIfTxPduBswSchExclAreaIdRef" 
                             type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                 &lt;p&gt;
                                  CanIfTxPduBswSchExclAreaIdRef is not used by the CanIf
                                  and therefore can not be edited.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="d5aae9f7-88bd-44aa-8f63-940f3f9504e7"/>
                        <a:da name="EDITABLE" value="false"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Rte/RteBswModuleInstance/RteBswExclusiveAreaImpl"/>
                      </v:ref>
                      <v:var name="CanIfTxPduSourcePduID" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTxPduSourcePduID defines the PDU ID to be used for
                                  Tx confirmations of this Tx L-PDU if this message successfully
                                  transmitted.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Please note that CanIfTxPduSourcePduID is used only if this
                                  Tx L-PDU is assigned to a user specific upper layer
                                  (parameter &lt;em&gt;CanIfTxPduUserTxConfirmationUL&lt;/em&gt;
                                  is set to &lt;em&gt;CDD&lt;/em&gt;) and if CanIfUseCddHandleIds of its
                                  referenced UL Cdd is set to false.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="CanIfTxPduSourcePduID"/>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="c6483da0-de4a-4bff-a6c9-51712230e46f"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="../CanIfTxPduUserTxConfirmationUL = &apos;CDD&apos; and (as:ref(../CanIfTxPduUpperLayerRef)/CanIfUseCddHandleIds = &apos;false&apos;)"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=65535"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:ref name="CanIfTxPduUpperLayerRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                CanIfTxPduUpperLayerRef references the user specific upper layer
                                for this Tx L-PDU in the case that
                                &lt;em&gt;CanIfTxPduUserTxConfirmationUL&lt;/em&gt; is set to &lt;em&gt;CDD&lt;/em&gt;.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="LABEL" value="CanIfTxPduUpperLayerRef"/>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="UUID" 
                             value="cb9017f7-677d-488a-b763-fceb66f1dd9a"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="../CanIfTxPduUserTxConfirmationUL = &apos;CDD&apos;"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="CanIfTxPduUpperLayerRef must reference a valid CanIf upper layer configuration."/>
                          <a:tst 
                                 expr="(node:refvalid(.)) and                                        ( (node:name(node:ref(.)) = &apos;CAN_NM&apos;) or                                          (node:name(node:ref(.)) = &apos;CAN_TP&apos;) or                                          (node:name(node:ref(.)) = &apos;CAN_TSYN&apos;) or                                          (node:name(node:ref(.)) = &apos;J1939NM&apos;) or                                          (node:name(node:ref(.)) = &apos;J1939TP&apos;) or                                          (node:name(node:ref(.)) = &apos;PDUR&apos;) )" 
                                 true="This reference is valid for CDD usage only and must not point to one of the well-known CanIf upper layers."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfUpperLayerConfig"/>
                      </v:ref>
                      <v:ref name="CanIfTxPduBufferRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Configurable reference to a CanIf buffer configuration..
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="ECUC:22c29721-2347-42d1-9d0f-5fdf9d5afd45"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="CanIfTxPduBufferRef must reference a valid CanIf HTH configuration."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfInitCfg/CanIfBufferCfg"/>
                      </v:ref>
                      <v:ref name="CanIfTxPduRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                Reference to the &quot;global&quot; PDU structure to allow
                                harmonization of handle IDs in the com stack.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="d86fc1f9-8af9-432e-b130-952c8ffebd2c"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="CanIfTxPduRef must reference a valid EcuC PDU configuration."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuC/EcucPduCollection/Pdu"/>
                      </v:ref>
                      <v:ctr name="CanIfTTTxFrameTriggering" 
                             type="IDENTIFIABLE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                CanIfTTTxFrameTriggering is not used by the CanIf.
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="UUID" 
                             value="4f1f40cc-aa8b-4dbf-b4ba-e2cd741c9619"/>
                        <a:da name="ENABLE" value="false"/>
                        <v:var name="CanIfTTTxJoblistTimeMark" type="INTEGER">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  CanIfTTTxJoblistTimeMark is not used by the CanIf
                                  and therefore can not be edited.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="OPTIONAL" value="true"/>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                          <a:a name="UUID" 
                               value="f41b6567-fdaf-415c-bb31-d10fb75f8b0a"/>
                          <a:da name="EDITABLE" value="false"/>
                          <a:da name="ENABLE" value="false"/>
                        </v:var>
                        <v:ref name="CanIfTTTxHwObjectTriggerIdRef" 
                               type="REFERENCE">
                          <a:a name="DESC">
                            <a:v>&lt;html&gt;
                                  CanIfTTTxHwObjectTriggerIdRef is not used by the CanIf
                                  and therefore can not be edited.
                                &lt;/html&gt;</a:v>
                          </a:a>
                          <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                               type="IMPLEMENTATIONCONFIGCLASS">
                            <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                          </a:a>
                          <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                          <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                          <a:a name="UUID" 
                               value="0003faf0-65f5-4076-b2ea-decee47e261d"/>
                          <a:da name="EDITABLE" value="false"/>
                          <a:da name="REF" 
                                value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Can/CanConfigSet/CanHardwareObject/CanTTHardwareObjectTrigger"/>
                        </v:ref>
                      </v:ctr>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <v:ctr name="CanIfPrivateCfg" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        CanIfPrivateCfg contains the private
                        configuration parameters of the CAN Interface.
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="UUID" value="e23f48bf-41b0-470f-9159-5879d066da0a"/>
                <v:var name="CanIfPrivateDlcCheck" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Selects whether the DLC check is supported.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the ROM consumption
                              of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the execution time
                              of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="8cb803f7-50c6-4eeb-8e04-eca9bba4613d"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="CanIfPrivateSoftwareFilterType" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Selects the desired software filter mechanism for reception
                            only.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Each implemented software filtering method is identified
                            by this enumeration number.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Range: The types of implemented software filtering methods.
                            Only BINARY is supported.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="557e248a-81e8-4774-a19e-3a1dd987f711"/>
                  <a:da name="DEFAULT" value="BINARY"/>
                  <a:da name="RANGE" value="BINARY"/>
                </v:var>
                <v:var name="CanIfSupportTTCAN" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          CanIfSupportTTCAN is not used by the CanIf and
                          therefore can not be edited.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="d3fc146a-70f9-44e9-8321-e6410c163c07"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="EDITABLE" value="false"/>
                </v:var>
                <v:ctr name="CanIfTTGeneral" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          CanIfTTGeneral is not used by the CanIf.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="UUID" value="e8a3068a-b4d9-449f-9513-360627104ac4"/>
                  <a:da name="ENABLE" value="false"/>
                  <v:var name="CanIfTTJoblist" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            CanIfTTJoblist is not used by the CanIf and therefore
                            can not be edited.
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="3d084e61-49f6-4e2b-9e45-19ad736e0d21"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="EDITABLE" value="false"/>
                  </v:var>
                  <v:var name="CanIfTTMaxIsrDelay" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            CanIfTTMaxIsrDelay is not used by the CanIf and
                            therefore can not be edited.
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="38c86cbf-530e-4db1-8088-e5998642942a"/>
                    <a:da name="EDITABLE" value="false"/>
                  </v:var>
                </v:ctr>
              </v:ctr>
              <v:ctr name="CanIfPublicCfg" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        CanIfPublicCfg contains the public configuration
                        parameters of the CAN Interface.
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="UUID" value="c8eed944-d063-4041-b3f3-5862c56468ae"/>
                <v:var name="CanIfSetBaudrateApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        Configuration parameter to enable/disable the CanIf_SetBaudrate API
                        to change the baud rate of a CAN Controller.
                         &lt;ul&gt;
                           &lt;li&gt;True: CanIf_SetBaudrate API is supported.&lt;/li&gt;
                           &lt;li&gt;False: CanIf_SetBaudrate API is not supported.&lt;/li&gt;
                         &lt;/ul&gt;
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(node:exists(as:modconf(&apos;Can&apos;)[1]/CanGeneral/CanSetBaudrateApi)) and                                  not(as:modconf(&apos;Can&apos;)[1]/CanGeneral/CanSetBaudrateApi = .)" 
                        true="You must not enable CanSetBaudrateApi if CanIfSetBaudrateApi is disabled."/>
                </v:var>
                <v:var name="CanIfPublicCancelTransmitSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfPublicCancelTransmitSupport enables/disables a dummy API for
                            upper layer modules which allows to request the
                            cancellation of an I-PDU.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="2f22e28f-98b2-459f-a4ab-0456ba6a84e5"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfBusMirroringSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfBusMirroringSupport enables/disables frame mirroring support through
                            the Mirror module.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;strong&gt;True:&lt;/strong&gt; Enabled&lt;/li&gt;
                            &lt;li&gt;&lt;strong&gt;False:&lt;/strong&gt; Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;
                            The parameter affects the availablility of the following APIs
                            &lt;ul&gt;
                              &lt;li&gt;&lt;tt&gt;CanIf_EnableBusMirroring&lt;/tt&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;tt&gt;CanIf_GetControllerErrorState&lt;/tt&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;tt&gt;CanIf_GetControllerTxErrorCounter&lt;/tt&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/p&gt;
                          &lt;p&gt;
                            The parameter affects the signature of the function &lt;tt&gt;CanIf_GetControllerMode&lt;/tt&gt;,
                            the second parameter having the type:
                            &lt;ul&gt;
                              &lt;li&gt;&lt;strong&gt;True:&lt;/strong&gt; &lt;tt&gt;Can_ControllerStateType*&lt;/tt&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;strong&gt;False:&lt;/strong&gt; &lt;tt&gt;CanIf_ControllerModeType*&lt;/tt&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/p&gt;
                          &lt;p&gt;
                            The parameter affects the signature of the function &lt;tt&gt;CanIf_GetTrcvMode&lt;/tt&gt; as follows:
                            &lt;ul&gt;
                              &lt;li&gt;&lt;strong&gt;True:&lt;/strong&gt; &lt;tt&gt;uint8 TransceiverId, CanTrcv_TrcvModeType * TransceiverModePtr&lt;/tt&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;strong&gt;False:&lt;/strong&gt; &lt;tt&gt;CanTrcv_TrcvModeType* TransceiverModePtr, uint8 TransceiverId&lt;/tt&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/p&gt;
                          &lt;p&gt;
                            For additional parameters see
                            &lt;a href=&quot;path:/AUTOSAR/TOP-LEVEL-PACKAGES/CanIf/ELEMENTS/CanIf/CanIfMirroringSupport&quot;&gt;CanIfMirroring&lt;/a&gt;.
                          &lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.config.ram.increase&quot;&gt;
                              &lt;strong&gt;RAM increase (config):&lt;/strong&gt;
                              Enabling this parameter increases the RAM consumption
                              of the module configuration.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="474aeb6e-13dd-495e-a632-a5089b3a8f77"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="WARNING" type="XPath" 
                        expr=". = &apos;true&apos; and not(node:exists(as:modconf(&apos;Mirror&apos;)))" 
                        true="Mirroring is enabled in CanIf without the Mirror module being present in the project"/>
                </v:var>
                <v:lst name="CanIfPublicCddHeaderFile">
                  <v:var name="CanIfPublicCddHeaderFile" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Defines header files for callback functions
                              which shall be included in case of CDDs.
                            &lt;/p&gt;
                            &lt;p&gt; Range of characters is 1.. 32. &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="e5518680-f80d-47f9-ad17-eb4c2055e2d0"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst expr="text:match(., &apos;^.+\.h$&apos;)" 
                             false="CanIfPublicCddHeaderFile must be a valid header file name without spaces and end with &apos;.h&apos;."/>
                      <a:tst expr="text:match(., &apos;.*:.*&apos;)" 
                             true="CanIfPublicCddHeaderFile may not contain a &apos;:&apos; character."/>
                    </a:da>
                  </v:var>
                </v:lst>
                <v:var name="CanIfPublicChangeBaudrateSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                        Configuration parameter to enable/disable the API to change the baudrate of a CAN controller..
                        &lt;/p&gt;
                        &lt;ul&gt;
                          &lt;li&gt;True: Enabled&lt;/li&gt;
                          &lt;li&gt;False: Disabled&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:3e8db06a-bfe0-4314-afbf-d4268b2e8ef4"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Enables and disables the development error detection
                            and notification mechanism.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="031c359f-bf12-4c85-8f13-b9bf94531a9e"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="CanIfPublicHandleTypeEnum" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfPublicHandleTypeEnum is used to configure the type
                            Can_HwHandleType. The type Can_HwHandelType represents the hardware
                            object handles of a CAN hardware unit. For CAN hardware units or in
                            general systems with more than 254 hardware objects, the extended
                            range (UINT16) shall be used.
                            than
                          &lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.config.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (config):&lt;/strong&gt;
                              Setting this parameter to UINT8 reduces the
                              ROM consumption of the module configuration.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="c2041035-2283-4b05-81cb-5513c1ccc0b3"/>
                  <a:da name="DEFAULT" value="UINT8"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(ecu:has(&apos;CanGeneralTypes.CanHwHandleType.Mapping&apos;) and (. = &apos;UINT8&apos;) and (ecu:get(&apos;CanGeneralTypes.CanHwHandleType.Mapping&apos;)=&apos;uint16&apos;))" 
                        true="CanIfPublicHandleTypeEnum must be larger or equal than the platform property of CanGeneralTypes.CanHwHandleType.Mapping"/>
                  <a:da name="RANGE">
                    <a:v>UINT16</a:v>
                    <a:v>UINT8</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMultipleDrvSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Selects support for multiple CAN Drivers.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="713bfa4c-a64c-4525-a534-0a0752904aaf"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicNumberOfCanHwUnits" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfPublicNumberOfCanHwUnits is not used by the CanIf
                            and therefore can not be edited.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Please note: The CanIf uses the default value
                            CanIfPublicNumberOfCanHwUnits = 1.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="Link">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a1d8ff84-47b0-4de7-bcea-7452171bd66e"/>
                  <a:da name="DEFAULT" value="1"/>
                  <a:da name="EDITABLE" value="false"/>
                </v:var>
                <v:var name="CanIfPublicPnSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Selects support of Partial Network features in CanIf.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ff9a31b7-56e4-4c23-be19-3a87d4a5278a"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicReadRxPduDataApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Enables / Disables the API CanIf_ReadRxPduData()
                            for reading Rx L-PDU data.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="ced9b05b-ad40-4123-9148-fd487588da3f"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicReadRxPduNotifyStatusApi" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Enables and disables the API CanIf_ReadRxNotifStatus() for reading
                            the Rx L-PDU data.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="d90e52f3-eae5-4151-94b3-774ebb984f33"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicReadTxPduNotifyStatusApi" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Enables and disables the API CanIf_ReadTxNotifStatus()
                            for reading the notification
                            status of Tx L-PDUs.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="41c04d58-2c45-4178-8ba5-cc682e1c1169"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicSetDynamicTxIdApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Enables and disables the API CanIf_SetDynamicTxId()
                            for reconfiguration of the
                            CAN identifier for dynamic Tx L-PDUs.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                              &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="320dc151-624b-4867-9af8-c8ac0e11104f"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfMetaDataSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                         Enable support for dynamic ID handling using L-SDU MetaData.
                         &lt;ul&gt;
                           &lt;li&gt;True: Metadata support enabled.&lt;/li&gt;
                           &lt;li&gt;False: Metadata support disabled.&lt;/li&gt;
                         &lt;/ul&gt;
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="21d962b4-2353-4a4f-8539-8e174c239b3c"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicTxBuffering" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Enables and disables the buffering of Tx L-PDUs
                            within the CAN Interface module.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="6b6df75e-cf4f-4e11-8c44-a0c8bdc48f98"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicTxConfirmPollingSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Configuration parameter to enable/disable the API
                          CanIf_GetTxConfirmationState() to poll for the Tx
                          confirmation state.
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="17c7629b-8674-4584-9624-b0a7f657ad42"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfDecoupledProcessingSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                         Enable/disable the assignment of PDUs to selected MainFunctions for processing.
                         &lt;ul&gt;
                           &lt;li&gt;True: CanIf processes the reception indication and the transmission confirmation
                                     events in context of MainFunction.&lt;/li&gt;
                           &lt;li&gt;False: CanIf processes the reception indication and the transmission confirmation
                                      events in ISR context (as defined by the SWS).&lt;/li&gt;
                         &lt;/ul&gt;
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="9d0795b0-1d63-11e8-b467-0ed5f89f718b"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:lst name="CanIfRxProcessing" type="MAP">
                  <a:da name="ENABLE" type="XPath" 
                        expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfDecoupledProcessingSupport = &apos;true&apos;)"/>
                  <v:ctr name="CanIfRxProcessing" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;Configuration of a dedicated Rx MainFunction.
                          The name of the generated function uses the pattern
                          &lt;code&gt;CanIf_MainFunctionRx_&quot;Short-Name&quot;&lt;/code&gt;.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                    <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="false"/>
                    <a:a name="UUID" 
                         value="ddacd05c-1d69-11e8-b467-0ed5f89f718b"/>
                    <v:lst name="CanIfRxPduProcessingRef">
                      <a:da name="MIN" value="1"/>
                      <v:ref name="CanIfRxPduProcessingRef" type="REFERENCE">
                        <a:a name="DESC" 
                             value="EN: Reference to CanIfRxPduCfg which is assigned to this MainFunction."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="d07d6d2e-1d69-11e8-b467-0ed5f89f718b"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="text:uniq(../../../*/CanIfRxPduProcessingRef/*, node:value(.))" 
                              false="Rx PDUs may be allocated to a single MainFunction."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfInitCfg/CanIfRxPduCfg"/>
                      </v:ref>
                    </v:lst>
                    <v:var name="CanIfRxPduQueueSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfRxPduQueueSize defines the local queue for handling
                                  of RxPdus.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="f909ea32-207b-11e8-b467-0ed5f89f718b"/>
                      <a:da name="DEFAULT" value="1"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=65535"/>
                        <a:tst expr="&gt;=1"/>
                      </a:da>
                    </v:var>
                    <v:var name="CanIfPublicMaxPayloadQueueSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Maximum shared memory in bytes reserved for all RxQueues.&lt;/p&gt;
                              &lt;p&gt;This configuration parameter allocates runtime memory.&lt;/p&gt;
                              &lt;p&gt;&lt;strong&gt;The grand total of CanIfPublicMaxPayloadQueueSize of all the CanIfRxProcessing containers can not exceed 65535.&lt;/strong&gt;&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="UUID" 
                           value="80ca21b2-213f-11e8-b467-0ed5f89f718b"/>
                      <a:da name="DEFAULT" value="512"/>
                      <a:da name="INVALID" type="Multi">
                        <mt:range>
                          <mt:tst expr="&lt;=65535"/>
                          <mt:tst expr="&gt;=1"/>
                        </mt:range>
                        <mt:xpath 
                                  true="The grand total of CanIfPublicMaxPayloadQueueSize of all the CanIfRxProcessing containers can not exceed 65535." 
                                  expr="sum(../../*/CanIfPublicMaxPayloadQueueSize) &gt; 65535"/>
                      </a:da>
                    </v:var>
                  </v:ctr>
                </v:lst>
                <v:lst name="CanIfTxProcessing" type="MAP">
                  <a:da name="ENABLE" type="XPath" 
                        expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfDecoupledProcessingSupport = &apos;true&apos;)"/>
                  <v:ctr name="CanIfTxProcessing" type="IDENTIFIABLE">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;Configuration of a dedicated Tx MainFunction.
                          The name of the generated function uses the pattern
                          &lt;code&gt;CanIf_MainFunctionTx_&quot;Short-Name&quot;&lt;/code&gt;.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                    <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="false"/>
                    <a:a name="UUID" 
                         value="b5e9a709-0c03-4519-985b-1448a6084bd3"/>
                    <v:lst name="CanIfTxPduProcessingRef">
                      <a:da name="MIN" value="1"/>
                      <v:ref name="CanIfTxPduProcessingRef" 
                             type="CHOICE-REFERENCE">
                        <a:a name="DESC" 
                             value="EN: Reference to CanIfTxPduCfg which is assigned to this MainFunction."/>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="POSTBUILDVARIANTMULTIPLICITY" value="true"/>
                        <a:a name="POSTBUILDVARIANTVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="4a7fb168-1d6a-11e8-b467-0ed5f89f718b"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="text:uniq(../../../*/CanIfTxPduProcessingRef/*, node:value(.))" 
                              false="Tx PDUs may be allocated to a single MainFunction."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanIf/CanIfInitCfg/CanIfTxPduCfg"/>
                      </v:ref>
                    </v:lst>
                    <v:var name="CanIfTxPduQueueSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                CanIfTxPduQueueSize defines the local queue size for handling
                                of TxPdus.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="ab2fdb70-2079-11e8-b467-0ed5f89f718b"/>
                      <a:da name="DEFAULT" value="1"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=65535"/>
                        <a:tst expr="&gt;=1"/>
                      </a:da>
                    </v:var>
                  </v:ctr>
                </v:lst>
                <v:var name="CanIfRelocatablePbcfgEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                         Enables/disable support for relocatable postbuild configuration.
                         &lt;ul&gt;
                           &lt;li&gt;True: Postbuild configuration relocatable in memory.&lt;/li&gt;
                           &lt;li&gt;False: Postbuild configuration not relocatable in memory.&lt;/li&gt;
                         &lt;/ul&gt;
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="(node:contains(node:refs(as:modconf(&apos;PbcfgM&apos;)/PbcfgMBswModules/*/PbcfgMBswModuleRef), as:modconf(&apos;CanIf&apos;)) = &apos;true&apos;)" 
                        true="false" false="true"/>
                </v:var>
                <v:var name="CanIfSoftwareFilteringSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                         &lt;p&gt;Enables/disable support for Software filtering.&lt;/p&gt;
                         &lt;p&gt;True:  Software filtering is enabled.&lt;/p&gt;
                         &lt;p&gt;False: Software filtering is disabled (only if all HRHs have parameter &quot;CanIfHrhSoftwareFilter&quot; set to OFF and no Rx Pdu has parameter &quot;CanIfRxPduCanIdMask&quot; enabled).&lt;/p&gt;
                         &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                         &lt;ul&gt;
                          &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                            &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                            Disabling this parameter reduces the ROM consumption of the module code.
                          &lt;/li&gt;
                          &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                            &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                            Disabling this parameter reduces the execution time of the module code.
                          &lt;/li&gt;
                         &lt;/ul&gt;
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst 
                           expr="(node:value(.) = &apos;false&apos;) and (count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfInitHohCfg/*/CanIfHrhCfg/*[CanIfHrhSoftwareFilter = &apos;true&apos;]) &gt; num:i(0))" 
                           true="CanIfSoftwareFilteringSupport can not be false while at least one Hrh has SW filter (CanIfHrhSoftwareFilter) enabled"/>
                    <a:tst 
                           expr="(node:value(.) = &apos;false&apos;) and (count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfRxPduCfg/*/CanIfRxPduCanIdMask) &gt; num:i(0))" 
                           true="CanIfSoftwareFilteringSupport can not be false while at least one Rx Pdu has CanId mask (CanIfRxPduCanIdMask) configured"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfCanDriverCompatibility" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Specifies with which AUTOSAR Revision of the CAN driver, CanIf shall be compatible with.
                          &lt;ul&gt;
                            &lt;li&gt;
                             &lt;strong&gt;ASR402&lt;/strong&gt;: CanIf behaves as specified in AUTOSAR 4.0 Rev.2 in regards to the Can module.
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;ASR403&lt;/strong&gt;: CanIf behaves as specified in AUTOSAR 4.0 Rev.3 in regards to the Can module.
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;ASR422&lt;/strong&gt;: CanIf behaves as specified in AUTOSAR 4.2 Rev.2 in regards to the Can module.
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;ASR431&lt;/strong&gt;: CanIf behaves as specified in AUTOSAR 4.3 Rev.1 in regards to the Can module.
                            &lt;/li&gt;
                            &lt;li&gt;
                             &lt;strong&gt;ASR440&lt;/strong&gt;: CanIf behaves as specified in AUTOSAR 4.4 Rev.0 in regards to the Can module.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:da name="DEFAULT" value="ASR403"/>
                  <a:da name="RANGE">
                    <a:v>ASR402</a:v>
                    <a:v>ASR403</a:v>
                    <a:v>ASR422</a:v>
                    <a:v>ASR431</a:v>
                    <a:v>ASR440</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicCanIdTypeEnum" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfPublicCanIdTypeEnum is used to configure the data type
                            Can_IdType.
                          &lt;/p&gt;
                          &lt;p&gt;
                            The type Can_IdType represents the CAN identifiers (IDs) used
                            on the bus. If any extended CAN IDs are used, this parameter
                            must be set to &lt;em&gt;UINT32&lt;/em&gt;.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="CanIfPublicCanIdTypeEnum"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="53aa249e-6a52-46c7-a802-3a90f6f64fc2"/>
                  <a:da name="DEFAULT" value="UINT32"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(ecu:has(&apos;CanGeneralTypes.CanIdType.Mapping&apos;) and (. = &apos;UINT16&apos;) and ecu:get(&apos;CanGeneralTypes.CanIdType.Mapping&apos;) = &apos;uint32&apos;) " 
                        true="CanIfPublicCanIdTypeEnum must be larger or equal than the platform property of CanGeneralTypes.CanIdType.Mapping"/>
                  <a:da name="RANGE">
                    <a:v>UINT16</a:v>
                    <a:v>UINT32</a:v>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicSingleCtrlOpt" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Optimization for using only a single Can controller.&lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                              Enabling this parameter reduces the ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                              &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                              Enabling this parameter reduces the execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="2491d398-9b8a-4264-9cff-b180bfd82181"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicHohTranslationOpt" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Optimization for a certain ordering of HOH CanObjedctIds.&lt;/p&gt;
                          &lt;p&gt;
                            This optimization can be enabled, if the following criterias for CanObjectIds are met:
                            &lt;ul&gt;
                              &lt;li&gt;All HRH CanObjecdtIds must be smaller than any of the HTH CanObjectId.&lt;/li&gt;
                              &lt;li&gt;All CanObjecdtIds must be 0-based and dense.&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                              Enabling this parameter reduces the ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.config.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (config):&lt;/strong&gt;
                              Enabling this parameter reduces the ROM consumption of the module configuration.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                              &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                              Enabling this parameter reduces the execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="01d8d0bb-e561-4307-a392-922156cee33c"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(node:current() = &apos;true&apos;) and                                  (count(as:modconf(&apos;CanIf&apos;)[1]/CanIfCtrlDrvCfg/*) &gt; 1)" 
                        true="HOH CanObjedctId optimization can only be done with one CAN driver."/>
                </v:var>
                <v:var name="CanIfPublicCtrlWakeupSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables wakeup detection via Can controllers.&lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                              &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="374b50ad-7817-4c3b-bd4d-f0c0567dce36"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="count(as:modconf(&apos;CanIf&apos;)[1]/CanIfCtrlDrvCfg/*/CanIfCtrlCfg/*/CanIfCtrlWakeupSupport = &apos;true&apos;) &gt; 0"/>
                </v:var>
                <v:var name="CanIfPublicTrcvWakeupSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables wakeup detection via Can transceivers.&lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                              &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="b62b2b01-3b76-4cd1-989a-6b6734a4ef20"/>
                  <a:da name="DEFAULT" value="true"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicTrcvSupport = &apos;true&apos;"/>
                </v:var>
                <v:var name="CanIfPublicRangeReceptionSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables reception of CanId ranges using a single HRH.&lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the ROM consumption of the module code.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.config.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (config):&lt;/strong&gt;
                              Disabling this parameter reduces the ROM consumption of the module configuration.
                            &lt;/li&gt;
                            &lt;li class=&quot;optimization.code.exetime.reduction&quot;&gt;
                              &lt;strong&gt;Execution time reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the execution time of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="94e819ef-d6c9-4cde-90cf-9f14c10335b0"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="CanIfPublicTrcvSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enables support of Can transceivers.&lt;/p&gt;
                          &lt;p&gt;
                            Disabling this parameter disables the following interfaces:
                            &lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;CanTrcv_GetOpMode&lt;/code&gt;&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;CanTrcV_SetOpMode&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.reduction&quot;&gt;
                              &lt;strong&gt;ROM reduction (code):&lt;/strong&gt;
                              Disabling this parameter reduces the ROM consumption of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="ee2d48e4-3921-42f8-a820-89aa202610f8"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="count(as:modconf(&apos;CanIf&apos;)[1]/CanIfTrcvDrvCfg/*/CanIfTrcvCfg/*) &gt; 0"/>
                </v:var>
                <v:var name="CanIfPublicMaxCtrl" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum number of Can controller supported.&lt;/p&gt;
                          &lt;p&gt;This configuration parameter allocates runtime memory per Can controller.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="5f8ff25b-6e9e-406e-9980-81680ac8b024"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfCtrlDrvCfg/*/CanIfCtrlCfg/*))"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=255"/>
                      <mt:tst expr="&gt;=1"/>
                    </mt:range>
                    <mt:xpath 
                              true="The number of configured Can controllers (CanIfCtrlCfgs) must not exceed CanIfPublicMaxCtrl." 
                              expr="num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfCtrlDrvCfg/*/CanIfCtrlCfg/*)) &gt;                                 as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxCtrl"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMaxTxBuffers" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum number of TxBuffers supported.&lt;/p&gt;
                          &lt;p&gt;This configuration parameter allocates runtime memory per Tx Buffer.
                          Please note, that the available buffer size is defined via parameter
                          CanIfPublicMaxTxBufferSize.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="64"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfPublicTxBuffering = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMaxTxBufferSize" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum shared memory in bytes reserved for all TxBuffers.&lt;/p&gt;
                          &lt;p&gt;This configuration parameter allocates runtime memory.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="512"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfPublicTxBuffering = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMaxHths" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum number of Hths supported.&lt;/p&gt;
                          &lt;p&gt;This configuration parameter allocates runtime memory per Hth.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="c41e7405-1d43-4aac-8de6-c4a1ad820557"/>
                  <a:da name="DEFAULT" value="16"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfPublicTxBuffering = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Multi">
                    <mt:range>
                      <mt:tst expr="&lt;=65535"/>
                      <mt:tst expr="&gt;=1"/>
                    </mt:range>
                    <mt:xpath 
                              true="The number of configured Hths (Sum of CanIfHthCfgs) must not exceed CanIfPublicMaxHths." 
                              expr="num:i(count(as:modconf(&apos;CanIf&apos;)[1]/CanIfInitCfg/*[1]/CanIfInitHohCfg/*/CanIfHthCfg/*)) &gt;                                 as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicMaxHths"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMaxRxNotifyPdus" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum number of Rx-Pdus which support notification functions.&lt;/p&gt;
                          &lt;p&gt;This configuration parameter allocates runtime memory per notfied Rx-Pdu.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="c531ca5c-3bf1-4040-be76-6c1f5f1be8c8"/>
                  <a:da name="DEFAULT" value="64"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfPublicReadRxPduNotifyStatusApi = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMaxTxNotifyPdus" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum number of Tx-Pdus which support notification functions.&lt;/p&gt;
                          &lt;p&gt;This configuration parameter allocates runtime memory per notfied Tx-Pdu.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="6cc0fdbe-60db-43c7-a041-d74ce43e4e1f"/>
                  <a:da name="DEFAULT" value="64"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfPublicReadTxPduNotifyStatusApi = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMaxRxBuffer" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum size of Rx-Buffer allocated in bytes.
                          The Rx-Buffer is required only, if the CanIf_ReadRxPduData() Api function is used.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="5b851b35-a7ae-4662-a9a4-727cc03f68b4"/>
                  <a:da name="DEFAULT" value="72"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfPublicReadRxPduDataApi = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfPublicMaxDynTxPdus" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Maximum number of dynamic Tx Pdus supported.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="8"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../CanIfPublicSetDynamicTxIdApi = &apos;true&apos;) or (../CanIfMetaDataSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=1"/>
                  </a:da>
                </v:var>
                <v:var name="CanIfSingleCanTrcvAPIInfixEnable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This parameter defines if CanIf shall use the Vendor Id
                          and the API Infix for accessing the CanTrcv module in case
                          a single CanTrcv driver is configured.&lt;/p&gt;
                          &lt;p&gt;true: CanIf uses the Vendor Id and the API Infix of the CanTrcv
                          for accessing the CanTrcv API (e.g. CanTrcv_1_T01_SetOpMode)
                          in case only a single CanTrcv driver is used. In addtion this name
                          mangling is also used for including the CanTrcv header file
                          (e.g. CanTrcv_1_T01.h)&lt;/p&gt;
                          &lt;p&gt;false: CanIf does not use the Vendor Id and the API Infix of
                          the CanTrcv in case only a single CanTrcv driver is used.&lt;/p&gt;
                          &lt;p&gt;Note: If more than one CanTrcv driver is configured,
                          name mangling must be used.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="CanIfTxOfflineActiveSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Determines wether TxOfflineActive feature
                             is supported by CanIf.&lt;/p&gt;
                          &lt;p&gt;True: Enabled&lt;/p&gt;
                          &lt;p&gt;False: Disabled&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="UUID" value="e316ed2b-d507-4752-be6a-549eb01d68de"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfHookOnReceptionSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          Enable/disable reporting a successful reception to a CDD module.
                          The contained information reported will be CAN_ID + data + received CAN index.
                          &lt;ul&gt;
                            &lt;li&gt;True: CanIf reports a successful reception to a CDD.&lt;/li&gt;
                            &lt;li&gt;False: CanIf does not report a successful reception to a CDD.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="27072a5d-4e7d-4ed6-822c-fcc94ea642fe"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfValidateWakeupOnStartedCtrlOnly" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enable/disable the wakeup validation based on the corresponding controller mode.&lt;/p&gt;
                          &lt;p&gt;True: The wakeup validation is performed only when the corresponding controller is
                                   in CAN_CS_STARTED mode (handling according to ASR 4.3.1 or later).&lt;/p&gt;
                          &lt;p&gt;False: The wakeup validation is performed only when the controller is in
                                    CANIF_CS_SLEEP mode or when the wakeup flag was previously set.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="ad1d7014-596a-11eb-ae93-0242ac130002"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicWakeupCheckValidSupport = &apos;true&apos;"/>
                </v:var>
                <v:var name="CanIfPublicVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Enables and disables the API CanIf_GetVersionInfo()
                            for reading the version information about the CAN Interface.
                          &lt;/p&gt;
                          &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                              &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                              Enabling this parameter increases the
                              ROM consumption of the module code.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="75517d1b-c020-4e1e-9bc7-889685d8ba3c"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="CanIfPublicWakeupCheckValidSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;
                        Selects support for wake up validation.
                        &lt;/p&gt;
                        &lt;ul&gt;
                          &lt;li&gt;True: Enabled&lt;/li&gt;
                          &lt;li&gt;False: Disabled&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:51a2279f-2c49-4c87-be76-120819310d0a"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;true&apos;) and ((../CanIfPublicCtrlWakeupSupport = &apos;false&apos;) and (../CanIfPublicTrcvWakeupSupport = &apos;false&apos;))" 
                        true="This parameter can only be enabled, if either CanIfPublicCtrlWakeupSupport or CanIfPublicTrcvWakeupSupport is enabled."/>
                </v:var>
                <v:var name="CanIfPublicWakeupCheckValidByNM" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            If enabled, only NM messages shall validate a detected
                            wake-up event (see CANIF722) at the corresponding
                            wake-up source in the CanIf.
                          &lt;/p&gt;
                          &lt;p&gt;
                            If disabled, all messages shall validate such a wake-up event.
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;True: Enabled&lt;/li&gt;
                            &lt;li&gt;False: Disabled&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a62d62d7-3be4-4b07-905f-5dcd48104834"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" value="true"/>
                </v:var>
              </v:ctr>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/CanIf"/>
              <v:lst name="CanIfTrcvDrvCfg" type="MAP">
                <a:da name="INVALID" type="XPath">
                  <a:tst 
                         expr="(count(*/*) &gt; 0) and (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicTrcvSupport = &apos;false&apos;)" 
                         true="No transceiver must be configured if CanIfPublicTrcvSupport is disabled."/>
                  <a:tst 
                         expr="(count(*/*) = 0) and (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicTrcvSupport = &apos;true&apos;)" 
                         true="At least one transceiver must be configured if CanIfPublicTrcvSupport is enabled."/>
                  <a:tst expr="count(*/*) &gt; 255" 
                         true="You must not configure more than 255 transceivers (CanIfTrcvCfg)."/>
                  <a:tst 
                         expr="((../CanIfPublicCfg/CanIfPublicPnSupport = &apos;true&apos; and (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicTrcvSupport = &apos;true&apos;)) and ((../CanIfDispatchCfg/CanIfDispatchUserCheckTrcvWakeFlagIndicationUL = &apos;CAN_SM&apos;) or (../CanIfDispatchCfg/CanIfDispatchUserClearTrcvWufFlagIndicationUL = &apos;CAN_SM&apos;) or (../CanIfDispatchCfg/CanIfDispatchUserConfirmPnAvailabilityUL = &apos;CAN_SM&apos;)))                                and ((count(*/*) = 0) or (count(*/*/*) = 0) or (*/*/*/CanIfTrcvId = &apos;&apos;))" 
                         true="At least one transceiver must be configured if CanIfDispatchUserCheckTrcvWakeFlagIndicationUL or CanIfDispatchUserClearTrcvWufFlagIndicationUL or CanIfDispatchUserConfirmPnAvailabilityUL is set to CAN_SM."/>
                </a:da>
                <v:ctr name="CanIfTrcvDrvCfg" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfTrcvDrvCfg contains the configuration parameters of all
                            addressed CAN transceivers by each underlying
                            CAN Transceiver Driver module.
                          &lt;/p&gt;
                          &lt;p&gt;
                            For each CAN Transceiver Driver a seperate instance of this
                            container shall be provided.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                  <a:a name="UUID" value="90dc5199-cb37-47aa-82e5-388dc855898b"/>
                  <v:lst name="CanIfTrcvCfg" type="MAP">
                    <a:da name="MAX" value="255"/>
                    <a:da name="MIN" value="1"/>
                    <v:ctr name="CanIfTrcvCfg" type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;
                                CanIfTrcvCfg contains the configuration parameters of one
                                addressed CAN transceiver by the underlying
                                CAN Transceiver Driver module.
                              &lt;/p&gt;
                              &lt;p&gt;
                                For each CAN transceiver a seperate instance of this
                                container has to be provided.
                              &lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                      <a:a name="UUID" 
                           value="77e26341-e719-4b6b-90e7-b308d7745ab2"/>
                      <v:var name="CanIfTrcvId" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTrcvId abstracts from the CAN Transceiver Driver
                                  specific parameter transceiver.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Each transceiver of all connected CAN Transceiver Driver
                                  modules shall be assigned to one specific TransceiverId
                                  of the CanIf.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Range: 0..number of configured transceivers of all
                                  CAN Transceiver Driver modules.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="Link">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="true"/>
                        <a:a name="UUID" 
                             value="403f49d1-5409-40c9-8850-143e7af8dfbf"/>
                        <a:da name="DEFAULT" type="XPath" 
                              expr="num:i(count(../../../../../CanIfTrcvDrvCfg/*/CanIfTrcvCfg/*) - 1)"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=254"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="CanIfTrcvWakeupSupport" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTrcvWakeupSupport defines if a respective transceiver of the
                                  referenced CAN Transceiver Driver modules is queriable
                                  for wake up events.
                                &lt;/p&gt;
                                 &lt;p&gt;
                                  CanIfTrcvWakeupSupport can only be set to true, if the CAN transceiver,
                                  which is referenced by parameter CanIfTrcvCanTrcvRef, also supports wakeup,
                                  i.e. parameter CanTrcvWakeupByBusUsed is set to true.
                                &lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;True: Wakeup Support Enabled&lt;/li&gt;
                                  &lt;li&gt;False: Wakeup Support Disabled&lt;/li&gt;
                                &lt;/ul&gt;
                             &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="28b1b232-1361-4441-b75f-9e3f4765dc6d"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst 
                                 expr="((.) = &apos;true&apos;) and (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicTrcvWakeupSupport = &apos;false&apos;)" 
                                 true="You must not enable CanIfTrcvWakeupSupport if CanIfPublicTrcvWakeupSupport is disabled."/>
                          <a:tst 
                                 expr="( not(node:refvalid(../CanIfTrcvCanTrcvRef)) ) or                                        ( . = &apos;false&apos; ) or                                        ( ( . = &apos;true&apos; ) and                                          ( as:ref(../CanIfTrcvCanTrcvRef)/../../../../CanTrcvGeneral/CanTrcvWakeUpSupport != &apos;CANTRCV_WAKEUP_NOT_SUPPORTED&apos; ) and                                          ( node:exists(as:ref(../CanIfTrcvCanTrcvRef)/CanTrcvWakeupByBusUsed) ) and                                          ( as:ref(../CanIfTrcvCanTrcvRef)/CanTrcvWakeupByBusUsed = &apos;true&apos; )                                        )" 
                                 false="If wakeup support is enabled, there must be a wakeable transceiver channel assigned to this driver configuration."/>
                          <a:tst 
                                 expr="( not(node:refvalid(../CanIfTrcvCanTrcvRef)) ) or                                        ( . = &apos;true&apos; ) or                                        ( ( . = &apos;false&apos; ) and                                          ( ( not(node:exists(as:ref(../CanIfTrcvCanTrcvRef)/CanTrcvWakeupByBusUsed)) ) or                                            ( as:ref(../CanIfTrcvCanTrcvRef)/CanTrcvWakeupByBusUsed = &apos;false&apos; )                                          )                                        )" 
                                 false="If wakeup support is disabled, the transceiver channel assigned shall not be wakeable."/>
                          <a:tst 
                                 expr="((.) = &apos;true&apos;) and                                  (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility != &apos;ASR402&apos;) and                                  not(node:refvalid(../CanIfTrcvWakeupSourceInRef))" 
                                 true="When CanIfTrcvWakeupSupport is enabled, CanIfTrcvWakeupSourceInRef must reference a valid wakeup source."/>
                          <a:tst 
                                 expr="( . = &apos;true&apos; ) and                                  (as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR402&apos;) and                                  ((not(node:exists(../CanIfTrcvWakeupSourceInRef))) or (not(node:exists(../CanIfTrcvWakeupSourceOutRef))))" 
                                 true="If CanIfTrcvWakeupSupport is enabled and CanIfCanDriverCompatibility is ASR402, CanIfTrcvWakeupSourceInRef and CanIfTrcvWakeupSourceOutRef must be enabled."/>
                        </a:da>
                      </v:var>
                      <v:ref name="CanIfTrcvCanTrcvRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTrcvCanTrcvRef references exactly one CAN Transceiver (transceiver channel)
                                  of an underlying CAN Transceiver Driver module.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  If using multiple CAN Transceivers of the same CAN Transceiver Driver module,
                                  each reference located in the same CanIfTrcvDrvCfg container must point to the
                                  same underlying CAN Transceiver Driver module (but to different CAN Transceivers).
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="Link">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="98e8e8df-fb3b-45f4-99f9-e55ccdf6e4b1"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="CanIfTrcvCanTrcvRef must reference a valid CAN Transceiver configuration."/>
                          <a:tst 
                                 expr="( node:refexists(.) ) and                                        ( count(../../*[CanIfTrcvCanTrcvRef = node:current()]) &gt; 1 )" 
                                 true="A CAN Transceiver must not be referrenced more than once."/>
                          <a:tst 
                                 expr="( node:refexists(.) ) and                                        ( node:exists(../../*[node:refexists(CanIfTrcvCanTrcvRef) and (node:path(as:ref(CanIfTrcvCanTrcvRef)/../..) != node:path(as:ref(node:current())/../..))]) )" 
                                 true="Each CanIfTrcvCanTrcvRef located in the same CanIfTrcvDrvCfg container must reference to a CAN Transceiver of the same underlying CAN Transceiver Driver module. Using multiple CAN Transceiver Driver modules requires the configuration of multiple CanIfTrcvDrvCfg containers."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/CanTrcv/CanTrcvConfigSet/CanTrcvChannel"/>
                      </v:ref>
                      <v:ref name="CanIfTrcvWakeupSourceInRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTrcvWakeupSourceInRef contains a reference to the wake up source
                                  for the transceiver as defined in the ECU State Manager.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  CanIfTrcvWakeupSourceInRef allows mapping of incoming wake up
                                  source (i.e. a wake up event is detected by the CanTrcv Driver)
                                  to a specific transceiver. Therefore the parameter is used
                                  as input to API CanIf_CheckWakeup().
                                &lt;/p&gt;
                                &lt;p&gt;
                                  The parameter is optional since providing the API
                                  CanIf_CheckWakeup() is also optional. If the parameter is used,
                                  CanIfTrcvWakeupSourceOutRef must be set as well.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Implementation Type: reference to EcuM_WakeupSourceType.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="f3c1c776-8743-4bfe-8fa2-e282afce884e"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="CanIfTrcvWakeupSourceInRef must reference a valid wakeup source."/>
                          <a:tst 
                                 expr="(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility = &apos;ASR402&apos;)  and not(node:exists(../CanIfTrcvWakeupSourceOutRef))" 
                                 true="If CanIfTrcvWakeupSourceInRef is used, CanIfTrcvWakeupSourceOutRef must be enabled as well."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource"/>
                        <a:da name="WARNING" type="XPath" 
                              expr="( ../CanIfTrcvWakeupSupport = &apos;false&apos; ) " 
                              true="CanIfTrcvWakeupSourceInRef is only used, if wakeup is supported (CanIfTrcvWakeupSupport is enabled)."/>
                      </v:ref>
                      <v:ref name="CanIfTrcvWakeupSourceOutRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;
                                  CanIfTrcvWakeupSourceOutRef contains a reference to the wake up source
                                  for the transceiver as defined in the ECU State Manager.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  CanIfTrcvWakeupSourceOutRef allows mapping of outgoing wake up source
                                  (i.e. wake up is signalled to the user notification API) to a specific
                                  transceiver.
                                  Therefore the parameter is used as output from
                                  CanIf_CheckWakeup() to &amp;lt;User_SetWakeupEvent&amp;gt;.
                                  The parameter is also used for wake up validation, i.e. as
                                  input and output for API CanIf_CheckValidation().
                                &lt;/p&gt;
                                &lt;p&gt;
                                  The parameter is optional since providing the API
                                  CanIf_CheckWakeup() is also optional.
                                &lt;/p&gt;
                                &lt;p&gt;
                                  Implementation Type: reference to EcuM_WakeupSourceType.
                                &lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v class="PostBuild">VariantPostBuild</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="b769f330-6eca-4e2a-bb64-dd1e7a410df2"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="XPath">
                          <a:tst expr="node:refvalid(.)" 
                                 false="CanIfTrcvWakeupSourceOutRef must reference a valid wakeup source."/>
                          <a:tst 
                                 expr="( as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfCanDriverCompatibility != &apos;ASR402&apos; ) " 
                                 true="If CanIfCanDriverCompatibility is not ASR402, then use CanTrcvWakeupSourceRef of can transceiver driver instead and disable this config parameter."/>
                        </a:da>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/EcuM/EcuMConfiguration/EcuMCommonConfiguration/EcuMWakeupSource"/>
                        <a:da name="WARNING" type="XPath" 
                              expr="( num:i(count(../../../../../CanIfCtrlDrvCfg/*/CanIfCtrlCfg/*[CanIfCtrlWakeupSupport = &apos;true&apos;])) = 0) and                                        ( num:i(count(../../../../../CanIfTrcvDrvCfg/*/CanIfTrcvCfg/*[CanIfTrcvWakeupSupport = &apos;true&apos;])) = 0)" 
                              true="CanIfTrcvWakeupSourceOutRef is only used, if wakeup is supported. CanIfTrcvWakeupSourceOutRef is ignored, if not at least one CAN controller or CAN tranceicer supports wakeup (CanIfCtrlWakeupSupport / CanIfTrcvWakeupSupport is enabled)."/>
                      </v:ref>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <v:ctr name="CanIfDecoupledMeasurementSupport" 
                     type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        CanIfDecoupledMeasurementSupport contains the configuration parameters
                        of Rx and Tx decoupled processing measurement of the CAN Interface.
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="TAB" value="CanIfDecoupledMeasurement"/>
                <a:a name="UUID" value="b835dce4-7d0e-11eb-9439-0242ac130002"/>
                <a:da name="TITLE" value="Decoupled Measurement Support"/>
                <v:var name="CanIfRxDecoupledMeasurementSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                         Enable/disable the measurement support for decoupled processing of receive events.
                         CanIf will forward to the CDD module through CanIfNumberOfEnqueuedRxPdusApiName the number
                         of queued receive indications events in context of MainFunction.
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a93be35c-74dd-11eb-9439-0242ac130002"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfDecoupledProcessingSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="((.) = &apos;true&apos;) and (not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                        true="CanIfPublicCddHeaderFile must be defined if the Rx decoupled measurement functions are configured."/>
                </v:var>
                <v:var name="CanIfTxDecoupledMeasurementSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                         Enable/disable the measurement support for decoupled processing of transmit confirmation events.
                         CanIf will forward to the CDD module through CanIfNumberOfEnqueuedTxPdusApiName the number
                         of queued transmit confirmations events in context of MainFunction.
                       &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="b5cc663c-74dd-11eb-9439-0242ac130002"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../../CanIfPublicCfg/CanIfDecoupledProcessingSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="((.) = &apos;true&apos;) and (not(node:exists(../../CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                        true="CanIfPublicCddHeaderFile must be defined if the Tx decoupled measurement functions are configured."/>
                </v:var>
                <v:var name="CanIfNumberOfRxPdusExceedingQueueApiName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfNumberOfRxPdusExceedingQueueApiName defines the name of the CDD API called
                            by the MainFunction to report the number of Rx Pdus that could not be added
                            in the queue due to full queue.
                            CanIfNumberOfRxPdusExceedingQueueApiName is enabled when the parameter
                            CanIfRxDecoupledMeasurementSupport is set to true.
                            API signature: void &lt;CanIfNumberOfRxPdusExceedingQueueApiName&gt;(
                                             uint8 MainFuncId,
                                             uint16 NoOfPdus);
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="8e119fc2-74f1-11eb-9439-0242ac130002"/>
                  <a:da name="DEFAULT" value=""/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../CanIfRxDecoupledMeasurementSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfNumberOfRxPdusExceedingQueueApiName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfNumberOfEnqueuedRxPdusApiName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfNumberOfEnqueuedRxPdusApiName defines the name of the CDD API called
                            by the MainFunction to report the number of Rx Pdus added in the queue.
                            CanIfNumberOfEnqueuedRxPdusApiName is enabled when the parameter
                            CanIfRxDecoupledMeasurementSupport is set to true.
                            API signature: void &lt;CanIfNumberOfEnqueuedRxPdusApiName&gt;(
                                             uint8 MainFuncId,
                                             uint16 NoOfPdus);
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="a488ec24-74f1-11eb-9439-0242ac130002"/>
                  <a:da name="DEFAULT" value=""/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../CanIfRxDecoupledMeasurementSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfNumberOfEnqueuedRxPdusApiName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfNumberOfTxPdusExceedingQueueApiName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfNumberOfTxPdusExceedingQueueApiName defines the name of the CDD API called
                            by the MainFunction to report the number of Tx Pdus that could not be added
                            in the queue due to full queue.
                            CanIfNumberOfTxPdusExceedingQueueApiName is enabled when the parameter
                            CanIfTxDecoupledMeasurementSupport is set to true.
                            API signature: void &lt;CanIfNumberOfTxPdusExceedingQueueApiName&gt;(
                                             uint8 MainFuncId,
                                             uint16 NoOfPdus);
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="b01d3d92-74f1-11eb-9439-0242ac130002"/>
                  <a:da name="DEFAULT" value=""/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../CanIfTxDecoupledMeasurementSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfNumberOfTxPdusExceedingQueueApiName must be a valid C function name."/>
                </v:var>
                <v:var name="CanIfNumberOfEnqueuedTxPdusApiName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            CanIfNumberOfEnqueuedTxPdusApiName defines the name of the CDD API called
                            by the MainFunction to report the number of Tx Pdus added in the queue.
                            CanIfNumberOfEnqueuedTxPdusApiName is enabled when the parameter
                            CanIfTxDecoupledMeasurementSupport is set to true.
                            API signature: void &lt;CanIfNumberOfEnqueuedTxPdusApiName&gt;(
                                             uint8 MainFuncId,
                                             uint16 NoOfPdus);
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="2e66729a-74f2-11eb-9439-0242ac130002"/>
                  <a:da name="DEFAULT" value=""/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="(../CanIfTxDecoupledMeasurementSupport = &apos;true&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                        true="CanIfNumberOfEnqueuedTxPdusApiName must be a valid C function name."/>
                </v:var>
              </v:ctr>
              <v:lst name="CanIfUpperLayerConfig" type="MAP">
                <a:da name="MAX" value="16"/>
                <a:da name="MIN" value="0"/>
                <v:ctr name="CanIfUpperLayerConfig" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            User upper layer configuration for CanIf.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Any upper layer above CanIf needs a configuration in this list.
                            This also applies for the well-known upper layers of CanIf which are
                            CanTp, CanTSyn, CanNm, J1939Nm, J1939Tp and PduR.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Upper layers are identified by their names.
                            To add an entry for a well-known upper layer of CanIf the name of the
                            container must be PDUR (for upper layer PduR), CAN_TP (for upper
                            layer CanTp), CAN_TSYN (for upper layer CanTSyn), CAN_NM (for upper
                            layer CanNm), J1939NM (for upper layer J1939Nm) or J1939TP (for upper layer J1939Tp).
                            Any other name indicates an user defined upper layer (CDD).
                            User defined upper layer also includes the AUTOSAR module
                            Xcp.
                          &lt;/p&gt;
                          &lt;p&gt;
                            To assign a particular Pdu to a user specific upper CanIf module
                            (this means any upper layer which is not PduR, CanNm, CanTSyn,
                            CanTp, J1939Nm or J1939Tp), the parameter CanIfRxPduUpperLayerRef
                            within the CanIfRxPduCfg configuration container and the parameter
                            CanIfTxPduUpperLayerRef within the CanIfTxPduCfg configuration
                            container must refer to an entry of this list.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="POSTBUILDCHANGEABLE" value="false"/>
                  <v:var name="CanIfUpperLayerUseCanId" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              CanIfUpperLayerUseCanId defines if the signature of the API
                              function &amp;lt;UL&amp;gt;_RxIndication contains the CAN ID
                              as additional argument.
                            &lt;/p&gt;
                            &lt;p&gt;
                              &lt;ul&gt;
                                &lt;li&gt;True: Signature of &amp;lt;UL&amp;gt;_RxIndication changes to
                                    &amp;lt;UL&amp;gt;_RxIndication(PduIdType, PduInfoType*, Can_IdType).&lt;/li&gt;
                                &lt;li&gt;False: Signature of &amp;lt;UL&amp;gt;_RxIndication is conform to AUTOSAR.&lt;/li&gt;
                              &lt;/ul&gt;
                            &lt;/p&gt;
                            &lt;p&gt;
                              For the well-known upper layers of CanIf (PduR, CanTp, CanTSyn, CanNm, J1939Nm or J1939Tp) this parameter
                              must be set to False.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CanIfUpperLayerUseCanId"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="INVALID" type="XPath" 
                          expr="(. = &apos;true&apos;)                                    and                                    (    (node:name(..) = &apos;CAN_TP&apos;)                                      or (node:name(..) = &apos;CAN_TSYN&apos;)                                      or (node:name(..) = &apos;CAN_NM&apos;)                                      or (node:name(..) = &apos;J1939NM&apos;)                                      or (node:name(..) = &apos;J1939TP&apos;)                                      or (node:name(..) = &apos;PDUR&apos;)                                    )" 
                          true="CanIfUpperLayerUseCanId must be disabled for all well-known upper layer modules (PduR, CanTp, CanTSyn, CanNm, J1939Nm or J1939Tp)."/>
                  </v:var>
                  <v:var name="CanIfPublicTxConfResultSupport" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Determines whether the Tx confirmation shall be sent in case of successful transmission only
                            or the Tx confirmation shall be sent in failure too reporting the result (E_OK/E_NOT_OK)
                            Currently, this configuration is for J1939 and CDD modules only.&lt;/p&gt;
                            &lt;p&gt;True : Send the result as a parameter (E_OK/E_NOT_OK)&lt;/p&gt;
                            &lt;p&gt;False: Tx Confirmation in case of successful transmission only&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="UUID" 
                         value="8a7ce47c-9ded-4ffc-9a16-c232553030e0"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="(node:name(..) != &apos;CAN_NM&apos;)                                                        and (node:name(..) != &apos;CAN_TSYN&apos;)                                                        and (node:name(..) != &apos;PDUR&apos;)                                                        and (node:name(..) != &apos;CAN_TP&apos;)                                                        and node:exists(../CanIfTxPduUserTxConfirmationName)"/>
                  </v:var>
                  <v:var name="CanIfTxPduUserTxConfirmationName" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              CanIfTxPduUserTxConfirmationName defines the name of the
                              &amp;lt;User_TxConfirmation&amp;gt;.
                            &lt;/p&gt;
                            &lt;p&gt;
                              CanIfTxPduUserTxConfirmationName depends on the parameter
                              CanIfTxPduUserTxConfirmationUL. If CanIfTxPduUserTxConfirmationUL
                              is configured to a standard AUTOSAR upper layer (CanTp, CanTSyn, CanNm, J1939Nm, J1939Tp
                              and PduR only), the name of the Tx confirmation function
                              &amp;lt;User_TxConfirmation&amp;gt; is fixed:
                            &lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;CAN_TP: CanTp_TxConfirmation&lt;/li&gt;
                              &lt;li&gt;CAN_TSYN: CanTSyn_TxConfirmation&lt;/li&gt;
                              &lt;li&gt;CAN_NM: CanNm_TxConfirmation&lt;/li&gt;
                              &lt;li&gt;J1939NM: J1939Nm_TxConfirmation&lt;/li&gt;
                              &lt;li&gt;J1939TP: J1939Tp_TxConfirmation&lt;/li&gt;
                              &lt;li&gt;PDUR: PduR_CanIfTxConfirmation&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;
                              If CanIfTxPduUserTxConfirmationUL equals CDD, the name
                              of the &amp;lt;User_TxConfirmation&amp;gt; is selectable.
                            &lt;/p&gt;
                            &lt;p&gt;
                              If CanIfTxPduUserTxConfirmationName is disabled there are
                              no Tx-Confirmations for this upper layer.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="ENABLE" value="true"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                             true="CanIfTxPduUserTxConfirmationName must be a valid C function name."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;CAN_TP&apos;) and                                    not(text:match(., &apos;CanTp_TxConfirmation&apos;))" 
                             true="Function name must be CanTp_TxConfirmation for upper layer module CanTp."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;CAN_TSYN&apos;) and                                    not(text:match(., &apos;CanTSyn_TxConfirmation&apos;))" 
                             true="Function name must be CanTSyn_TxConfirmation for upper layer module CanTSyn."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;CAN_NM&apos;) and                                    not(text:match(., &apos;CanNm_TxConfirmation&apos;))" 
                             true="Function name must be CanNm_TxConfirmation for upper layer module CanNm."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;J1939NM&apos;) and                                    not(text:match(., &apos;J1939Nm_TxConfirmation&apos;))" 
                             true="Function name must be J1939Nm_TxConfirmation for upper layer module J1939Nm."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;J1939TP&apos;) and                                    not(text:match(., &apos;J1939Tp_TxConfirmation&apos;))" 
                             true="Function name must be J1939Tp_TxConfirmation for upper layer module J1939Tp."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;PDUR&apos;) and                                    not(text:match(., &apos;PduR_CanIfTxConfirmation&apos;))" 
                             true="Function name must be PduR_CanIfTxConfirmation for upper layer module PduR."/>
                    </a:da>
                  </v:var>
                  <v:var name="CanIfRxPduUserRxIndicationName" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              CanIfRxPduUserRxIndicationName defines the name of the
                              &amp;lt;User_RxIndication&amp;gt;.
                            &lt;/p&gt;
                            &lt;p&gt;
                              CanIfRxPduUserRxIndicationName depends on the parameter
                              CanIfRxPduUserRxIndicationUL. If CanIfRxPduUserRxIndicationUL
                              is configured to a standard AUTOSAR upper layer, the name of the
                              &amp;lt;User_RxIndication&amp;gt; is fixed:
                            &lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;CAN_TP: CanTp_RxIndication&lt;/li&gt;
                              &lt;li&gt;CAN_TSYN: CanTSyn_RxIndication&lt;/li&gt;
                              &lt;li&gt;CAN_NM: CanNm_RxIndication&lt;/li&gt;
                              &lt;li&gt;J1939NM: J1939Nm_RxIndication&lt;/li&gt;
                              &lt;li&gt;J1939TP: J1939Tp_RxIndication&lt;/li&gt;
                              &lt;li&gt;PDUR: PduR_CanIfRxIndication&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;
                              If CanIfRxPduUserRxIndicationUL equals CDD, the name
                              of the &amp;lt;User_RxIndication&amp;gt; is selectable.
                            &lt;/p&gt;
                            &lt;p&gt;
                              If CanIfRxPduUserRxIndicationName is disabled there are
                              no Rx-Indications for this upper layer.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="ENABLE" value="true"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                             true="CanIfRxPduUserRxIndicationName must be a valid C function name."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;CAN_TP&apos;) and                                    not(text:match(., &apos;CanTp_RxIndication&apos;))" 
                             true="Function name must be CanTp_RxIndication for upper layer module CanTp."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;CAN_TSYN&apos;) and                                    not(text:match(., &apos;CanTSyn_RxIndication&apos;))" 
                             true="Function name must be CanTSyn_RxIndication for upper layer module CanTSyn."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;CAN_NM&apos;) and                                    not(text:match(., &apos;CanNm_RxIndication&apos;))" 
                             true="Function name must be CanNm_RxIndication for upper layer module CanNm."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;J1939NM&apos;) and                                    not(text:match(., &apos;J1939Nm_RxIndication&apos;))" 
                             true="Function name must be J1939Nm_RxIndication for upper layer module J1939Nm."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;J1939TP&apos;) and                                    not(text:match(., &apos;J1939Tp_RxIndication&apos;))" 
                             true="Function name must be J1939Tp_RxIndication for upper layer module J1939Tp."/>
                      <a:tst 
                             expr="(node:name(..) = &apos;PDUR&apos;) and                                    not(text:match(., &apos;PduR_CanIfRxIndication&apos;))" 
                             true="Function name must be PduR_CanIfRxIndication for upper layer module PduR."/>
                    </a:da>
                  </v:var>
                  <v:var name="CanIfUserDlcErrorNotification" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Name of target user specific DLC check failed
                              notification service.
                            &lt;/p&gt;
                            &lt;p&gt;
                              If CanIfUserDlcErrorNotification is disabled no call-out function
                              will be called for this upper layer.
                            &lt;/p&gt;
                            &lt;p&gt;
                              To use the CanIfUserDlcErrorNotification a function prototype must
                              exists in one of the header files pointed by CanIfPublicCddHeaderFile.
                            &lt;/p&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                                &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                                Using this parameter increases the ROM consumption
                                of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                Using this parameter increases the execution time
                                of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CanIfUserDlcErrorNotification"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="cc7a11b2-ce56-4bfb-aada-0a53ef90fdfc"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                             true="CanIfUserDlcErrorNotification must be a valid C function name."/>
                      <a:tst 
                             expr="(not(node:exists(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                             true="CanIfPublicCddHeaderFile must be defined if a user specific DLC error notification function is configured."/>
                    </a:da>
                  </v:var>
                  <v:var name="CanIfUserDlcPassedNotification" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;
                              Name of target user specific DLC check passed
                              notification service.
                            &lt;/p&gt;
                            &lt;p&gt;
                              If CanIfUserDlcPassedNotification is disabled no call-out function
                              will be called for this upper layer.
                            &lt;/p&gt;
                            &lt;p&gt;
                              To use the CanIfUserDlcErrorNotification a function prototype must
                              exists in one of the header files pointed by CanIfPublicCddHeaderFile.
                            &lt;/p&gt;
                            &lt;p&gt;&lt;strong&gt;Optimization Effect:&lt;/strong&gt;&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li class=&quot;optimization.code.rom.increase&quot;&gt;
                                &lt;strong&gt;ROM increase (code):&lt;/strong&gt;
                                Using this parameter increases the ROM consumption
                                of the module code.
                              &lt;/li&gt;
                              &lt;li class=&quot;optimization.code.exetime.increase&quot;&gt;
                                &lt;strong&gt;Execution time increase (code):&lt;/strong&gt;
                                Using this parameter increases the execution time
                                of the module code.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="CanIfUserDlcPassedNotification"/>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="1867fbc1-a817-4a0b-94f3-66ca68833187"/>
                    <a:da name="DEFAULT" value=""/>
                    <a:da name="ENABLE" value="false"/>
                    <a:da name="INVALID" type="XPath">
                      <a:tst 
                             expr="not(text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;))" 
                             true="CanIfUserDlcPassedNotification must be a valid C function name."/>
                      <a:tst 
                             expr="(not(node:exists(as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfPublicCddHeaderFile/*)))" 
                             true="CanIfPublicCddHeaderFile must be defined if a user specific DLC passed notification function is configured."/>
                    </a:da>
                  </v:var>
                  <v:var name="CanIfUseCddHandleIds" type="BOOLEAN">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Determines whether for a Pdu that has a Cdd configured as an upper layer,
                            it shall use the handle id taken from the Cdd entry that references that Pdu
                            (CDD/CddComStackContribution/CddComIfUpperLayerContribution/CddComIfUpperLayerRx(or Tx)Pdu/CddComIfHandleId)
                            or if it shall use CanIfTxPduSourcePduID/CanIfRxPduTargetPduID as a handle id.&lt;/p&gt;
                            &lt;p&gt;True: Use Cdd handle id&lt;/p&gt;
                            &lt;p&gt;False: Use CanIfTxPduSourcePduID/CanIfRxPduTargetPduID&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPostBuild</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="UUID" 
                         value="e316ed2b-d507-4752-be6a-549eb01d68de"/>
                    <a:da name="DEFAULT" value="false"/>
                    <a:da name="ENABLE" type="XPath" 
                          expr="                                    not( (node:name(..) = &apos;CAN_TP&apos;)                                      or (node:name(..) = &apos;CAN_TSYN&apos;)                                      or (node:name(..) = &apos;CAN_NM&apos;)                                      or (node:name(..) = &apos;J1939NM&apos;)                                      or (node:name(..) = &apos;J1939TP&apos;)                                      or (node:name(..) = &apos;PDUR&apos;)                                    )"/>
                  </v:var>
                </v:ctr>
              </v:lst>
              <v:ctr name="CanIfMirroringSupport" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        &lt;p&gt;The container contains Bus Mirroring related configuration parameters.&lt;/p&gt;
                        &lt;p&gt;The parameters from this container are editable if &lt;tt&gt;CanIfBusMirroringSupport&lt;/tt&gt; is &lt;strong&gt;enabled&lt;/strong&gt;.&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="TAB" value="CanIfMirroring"/>
                <a:a name="UUID" value="e7d872bd-531d-4f37-870f-11409124e3ff"/>
                <a:da name="TITLE" value="Mirroring Support"/>
                <v:var name="CanIfCanTxErrorCounterSupported" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                            &lt;p&gt;
                              The parameter specifies whether the Can Driver exposes the
                              API &lt;tt&gt;Can_GetControllerTxErrorCounter&lt;/tt&gt; (see SWS_Can_00516).
                            &lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;
                                True: API is &lt;strong&gt;available&lt;/strong&gt;.
                                &lt;tt&gt;CanIf_GetControllerTxErrorCounter&lt;/tt&gt; forwards the call to
                                &lt;tt&gt;Can_GetControllerTxErrorCounter&lt;/tt&gt;.
                              &lt;/li&gt;
                              &lt;li&gt;
                                False: API is &lt;strong&gt;unavailable&lt;/strong&gt;.
                                &lt;tt&gt;CanIf_GetControllerTxErrorCounter&lt;/tt&gt; sets the parameter
                                &lt;tt&gt;TxErrorCounterPtr&lt;/tt&gt; to the value specified for the configuration
                                parameter &lt;a href=&quot;path:/AUTOSAR/TOP-LEVEL-PACKAGES/CanIf/ELEMENTS/CanIf/CanIfMirroringSupport/CanIfTxErrorCounterValue&quot;&gt;CanIfTxErrorCounterValue&lt;/a&gt;.
                                The return value is always &lt;strong&gt;E_OK&lt;/strong&gt;.
                              &lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Can Driver Tx Error Counter API Supported"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="28d319df-05e4-4a5b-a821-950ad5113a08"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfBusMirroringSupport = &apos;true&apos;"/>
                  <a:da name="TOOLTIP" 
                        value="Can_GetControllerTxErrorCounter availability"/>
                </v:var>
                <v:var name="CanIfTxErrorCounterValue" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                            &lt;p&gt;
                              The parameter specifies the value to which &lt;tt&gt;TxErrorCounterPtr&lt;/tt&gt;
                              is set when the API &lt;tt&gt;CanIf_GetControllerTxErrorCounter&lt;/tt&gt; is called.
                            &lt;/p&gt;
                            &lt;p&gt;
                              Note: &lt;strong&gt;E_OK&lt;/strong&gt; is returned.
                            &lt;/p&gt;
                          &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Tx Error Counter Value"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="5a343688-e364-40d5-b081-55d20e1b64b9"/>
                  <a:da name="DEFAULT" value="0"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfCanTxErrorCounterSupported = &apos;false&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=255"/>
                    <a:tst expr="&gt;=0"/>
                  </a:da>
                  <a:da name="TOOLTIP" 
                        value="Can_GetControllerTxErrorCounter availability"/>
                </v:var>
                <v:var name="CanIfCanControllerErrorStateSupported" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The parameter specifies whether the Can Driver exposes the
                            API &lt;tt&gt;Can_GetControllerErrorState&lt;/tt&gt; (see SWS_Can_91004).
                          &lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;
                              True: API is &lt;strong&gt;available&lt;/strong&gt;.
                              &lt;tt&gt;CanIf_GetControllerErrorState&lt;/tt&gt; forwards the call to
                              &lt;tt&gt;Can_GetControllerErrorState&lt;/tt&gt;.
                            &lt;/li&gt;
                            &lt;li&gt;
                              False: API is &lt;strong&gt;unavailable&lt;/strong&gt;.
                              &lt;tt&gt;CanIf_GetControllerErrorState&lt;/tt&gt; sets the parameter
                              &lt;tt&gt;ErrorStatePtr&lt;/tt&gt; to the value specified for the configuration
                              parameter &lt;a href=&quot;path:/AUTOSAR/TOP-LEVEL-PACKAGES/CanIf/ELEMENTS/CanIf/CanIfMirroringSupport/CanIfErrorStateValue&quot;&gt;CanIfErrorStateValue&lt;/a&gt;.
                              The return value is always &lt;strong&gt;E_OK&lt;/strong&gt;.
                            &lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Can Driver Controller Error State API Supported"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="2476a1e7-d0f7-402c-a11d-70293f8c5426"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfBusMirroringSupport = &apos;true&apos;"/>
                  <a:da name="TOOLTIP" 
                        value="Can_GetControllerErrorState availability"/>
                </v:var>
                <v:var name="CanIfErrorStateValue" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The parameter specifies the value to which &lt;tt&gt;ErrorStatePtr&lt;/tt&gt;
                            is set when the API &lt;tt&gt;CanIf_GetControllerErrorState&lt;/tt&gt; is called.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Note: &lt;strong&gt;E_OK&lt;/strong&gt; is returned.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Error State Value"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="1cf0b33e-9774-40e0-8c7b-7fd528043661"/>
                  <a:da name="DEFAULT" value="CAN_ERRORSTATE_ACTIVE"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../CanIfCanControllerErrorStateSupported = &apos;false&apos;"/>
                  <a:da name="RANGE">
                    <a:v>CAN_ERRORSTATE_ACTIVE</a:v>
                    <a:v>CAN_ERRORSTATE_PASSIVE</a:v>
                    <a:v>CAN_ERRORSTATE_BUSOFF</a:v>
                  </a:da>
                  <a:da name="TOOLTIP" 
                        value="Can_GetControllerErrorState availability"/>
                </v:var>
                <v:var name="TxMirrorBufferSize" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            The parameter specifies in bytes the size of the Tx buffer used when mirroring.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Tx Mirror Buffer Size"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="a932d66d-1b9a-4fd8-82fe-69ebfce5abcb"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfBusMirroringSupport = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=0xFFFFFFFF"/>
                    <a:tst expr="&gt;=0x0"/>
                  </a:da>
                  <a:da name="TOOLTIP" 
                        value="Length in bytes of the Tx buffer used while mirroring"/>
                </v:var>
                <v:var name="TxMirrorNumTxPdus" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Maximum number CanIfTxPdus for Mirroring.
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="Tx Mirror Max TxPdus"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="UUID" value="62a655b1-dad9-4baa-9031-6e9e6117b787"/>
                  <a:da name="ENABLE" type="XPath" 
                        expr="../../CanIfPublicCfg/CanIfBusMirroringSupport = &apos;true&apos;"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=65535"/>
                    <a:tst expr="&gt;=0"/>
                  </a:da>
                  <a:da name="TOOLTIP" value="Max number of CanIfTxPdus"/>
                </v:var>
              </v:ctr>
              <v:ctr name="CanIfHookOnRxSupport" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        &lt;p&gt;The container contains Custom Hook on Reception related configuration parameters.&lt;/p&gt;
                        &lt;p&gt;The parameters from this container are editable if &lt;tt&gt;CanIfHookOnReceptionSupport&lt;/tt&gt; is &lt;strong&gt;enabled&lt;/strong&gt;.&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="TAB" value="CanIfHookOnRx"/>
                <a:a name="UUID" value="940329c1-335a-4f29-92d5-6dca962fc168"/>
                <a:da name="TITLE" value="Custom Hook on Reception"/>
                <v:var name="CanIfHookOnReceptionHeader" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Defines the header file name which contains the extern declaration of the
                            custom hook function to be called on a successful reception.
                          &lt;/p&gt;
                          &lt;p&gt; Range of characters is 1.. 32. &lt;/p&gt;
                          &lt;p&gt;
                            Example: Cdd.h
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:da name="ENABLE" type="XPath" 
                        expr="as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfHookOnReceptionSupport = &apos;true&apos;"/>
                  <a:da name="INVALID" type="XPath">
                    <a:tst expr="text:match(., &apos;^.+\.h$&apos;)" 
                           false="CanIfHookOnReceptionHeader must be a valid header file name without spaces and end with &apos;.h&apos;."/>
                    <a:tst expr="text:match(., &apos;.*:.*&apos;)" 
                           true="CanIfHookOnReceptionHeader may not contain a &apos;:&apos; character."/>
                  </a:da>
                </v:var>
                <v:var name="CanIfHookOnReceptionFunctionName" 
                       type="FUNCTION-NAME">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Defines the CDD function name called in case of reporting
                            a successful reception to a CDD.
                          &lt;/p&gt;
                          &lt;p&gt;
                            Example: Cdd_HookOnReception
                          &lt;/p&gt;
                          &lt;p&gt;
                            The CDD function prototype should be
                            void &lt;funcName&gt;(Can_IdType CanId, PduInfoType * PduInfo, uint8 ControllerId)
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v class="PreCompile">VariantPostBuild</icc:v>
                  </a:a>
                  <a:da name="ENABLE" type="XPath" 
                        expr="as:modconf(&apos;CanIf&apos;)[1]/CanIfPublicCfg/CanIfHookOnReceptionSupport = &apos;true&apos;"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="text:match(., &apos;^[a-zA-Z_][a-zA-Z0-9_]*$&apos;)" 
                        false="CanIfHookOnReceptionFunctionName must be valid C function or macro name."/>
                </v:var>
              </v:ctr>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="5"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="6"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="10"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="15"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="60"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the CanIf can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
