<?xml version='1.0'?>
<datamodel version="7.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/16/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/16/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM5I0R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="Base" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.2.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                      <ad:DATE>2011-11-09T11:36:22Z</ad:DATE>
                    </ad:DOC-REVISION>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>5.0.31</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>Elektrobit Automotive GmbH</ad:ISSUED-BY>
                      <ad:DATE>2021-07-14T23:59:59Z</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC" value="Configuration of the Base module."/>
              <a:a name="RELEASE" value="asc:4.0"/>
              <v:ctr name="BaseDbg" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;This container holds configuration information for the debug base types.&lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <v:var name="BaseDbgHeaderFile" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;Header file for implementation of debug hooks.&lt;/p&gt;
                        &lt;p&gt;
                          The identifier provided by this header
                          file is included from
                          &lt;code&gt;&amp;lt;Mod&amp;gt;_Trace.h&lt;/code&gt;.
                        &lt;/p&gt;
                        &lt;p&gt;
                          Note that the implementation of debug hooks
                          may change the behaviour of the basic software.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="OPTIONAL" value="true"/>
                  <a:da name="ENABLE" value="false"/>
                  <a:da name="WARNING" type="XPath" expr="&apos;true&apos;" 
                        true="The usage of debug hooks is not intended for mass production."/>
                </v:var>
              </v:ctr>
              <v:lst name="CustomStdIncludeFiles">
                <a:a name="LABEL" value="Custom standard header files"/>
                <a:a name="ROWS" value="7"/>
                <a:a name="TAB" value="Custom Std Header"/>
                <a:da name="MAX" value="100"/>
                <a:da name="MIN" value="0"/>
                <v:var name="CustomStdIncludeFiles" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;List of additional standard header files.&lt;/p&gt;
                        &lt;p&gt;
                          The identifiers provided by these header
                          files are accessible by including
                          &lt;code&gt;Platform_Types.h&lt;/code&gt; or
                          &lt;code&gt;Std_Types.h&lt;/code&gt;
                        &lt;/p&gt;
                        &lt;p&gt;
                          Make sure the file which is specified here can
                          be found by your compiler in the &lt;em&gt;include file
                          search directories&lt;/em&gt;.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Custom standard header files"/>
                </v:var>
              </v:lst>
              <v:ctr name="PostBuildSelectable" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;This container holds configuration information for either
                        a &lt;em&gt;post-build-selectable master project&lt;/em&gt; or
                        a &lt;em&gt;Post-Build-selectable slave project&lt;/em&gt;
                      &lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Post Build Selectable Variants"/>
                <a:a name="TAB" value="Post Build Selectable"/>
                <v:var name="ProjectType" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;Type of post-build-selectable project.&lt;/p&gt;
                        &lt;ul&gt;
                          &lt;li&gt;&lt;strong&gt;None :&lt;/strong&gt; This project is not intended to be used as a post-build-selectable project.&lt;/li&gt;
                          &lt;li&gt;&lt;strong&gt;Master :&lt;/strong&gt; This project is a &lt;em&gt;post-build-selectable master project&lt;/em&gt;. For a master project the &lt;strong&gt;Variant List&lt;/strong&gt; has to be configured.&lt;/li&gt;
                          &lt;li&gt;&lt;strong&gt;Slave :&lt;/strong&gt; This project is a &lt;em&gt;post-build-selectable slave project&lt;/em&gt;. For a slave project the &lt;strong&gt;Variant Name&lt;/strong&gt; has to be configured.&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Project Type"/>
                  <a:da name="DEFAULT" value="None"/>
                  <a:da name="RANGE">
                    <a:v>None</a:v>
                    <a:v>Master</a:v>
                    <a:v>Slave</a:v>
                  </a:da>
                </v:var>
                <v:lst name="VariantNameList">
                  <a:a name="LABEL" value="Variant List"/>
                  <a:a name="ROWS" value="4"/>
                  <a:a name="TAB" value="Post Build Selectable"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../ProjectType = &apos;Master&apos;"/>
                  <v:var name="VariantNameList" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                          &lt;p&gt;List of names of variants of all &lt;em&gt;post-build-selectable slave projects&lt;/em&gt;&lt;/p&gt;.
                        &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="LABEL" value="Variant List"/>
                  </v:var>
                </v:lst>
                <v:var name="VariantName" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;Name of the variant of this &lt;em&gt;post-build-selectable slave project&lt;/em&gt;&lt;/p&gt;.
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Variant Name"/>
                  <a:da name="EDITABLE" type="XPath" 
                        expr="../ProjectType = &apos;Slave&apos;"/>
                </v:var>
              </v:ctr>
              <v:ctr name="CustomOverrides" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;This container holds configuration information for custom overrides of default implementations.&lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Custom overrides"/>
                <v:var name="CustomOverride_MemCpy" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enable or disable the usage of a custom memory copy function. To override the default memory copy function&lt;ul&gt;
                            &lt;li&gt;define and implement a copy function with signature &lt;code&gt;void custom_memcpy(void* const destination, void const* const source, const usize length)&lt;/code&gt; where&lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;destination&lt;/code&gt; is the pointer to where the memory is copied to&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;source&lt;/code&gt; is the pointer to where the memory is copied from&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;length&lt;/code&gt; is number of bytes to be copied from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt;&lt;/li&gt;
                            &lt;/ul&gt;The memory copy function is expected to copy &lt;code&gt;length&lt;/code&gt; bytes from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt;.&lt;/li&gt;
                            &lt;li&gt;define the macro &lt;code&gt;TS_MemCpy(dst,src,len)&lt;/code&gt; that just maps to the custom memory copy function in a custom standard header file&lt;/li&gt;
                            &lt;li&gt;add the custom standard header file to Base configuration parameter &lt;em&gt;CustomStdIncludeFiles&lt;/em&gt;&lt;/li&gt;
                          &lt;/ul&gt;&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Override memory copy function (macro TS_MemCpy)"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;true&apos;) and not(node:exists(../../CustomStdIncludeFiles/*))" 
                        true="If overriding memory copy function, custom standard header file must be configured."/>
                </v:var>
                <v:var name="CustomOverride_MemSet" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enable or disable the usage of a custom memory set function. To override the default memory set function&lt;ul&gt;
                            &lt;li&gt;define and implement a set function with signature &lt;code&gt;void custom_memset(void* const destination, const value, const usize length)&lt;/code&gt; where&lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;destination&lt;/code&gt; is the pointer to where the memory is set&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;value&lt;/code&gt; is the value to be set&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;length&lt;/code&gt; is the number of bytes to be set to specified value&lt;/li&gt;
                            &lt;/ul&gt;The memory set function is expected to set &lt;code&gt;length&lt;/code&gt; bytes to &lt;code&gt;value&lt;/code&gt; starting from &lt;code&gt;destination&lt;/code&gt;.&lt;/li&gt;
                            &lt;li&gt;define the macro &lt;code&gt;TS_MemSet(dst,val,len)&lt;/code&gt; that just maps to the custom memory set function in a custom standard header file&lt;/li&gt;
                            &lt;li&gt;add the custom standard header file to Base configuration parameter &lt;em&gt;CustomStdIncludeFiles&lt;/em&gt;&lt;/li&gt;
                          &lt;/ul&gt;&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Override memory set function (macro TS_MemSet)"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;true&apos;) and not(node:exists(../../CustomStdIncludeFiles/*))" 
                        true="If overriding memory set function, custom standard header file must be configured."/>
                </v:var>
                <v:var name="CustomOverride_MemCmp" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enable or disable the usage of a custom memory compare function. To override the default memory compare function&lt;ul&gt;
                            &lt;li&gt;define and implement a compare function with signature &lt;code&gt;void custom_memcmp(void const * const str1, void const * const str2, const usize length)&lt;/code&gt; where&lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;str1&lt;/code&gt; is the pointer to one block of memory&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;str2&lt;/code&gt; is the pointer to another block of memory&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;length&lt;/code&gt; is the number of bytes to be compared&lt;/li&gt;
                            &lt;/ul&gt;The memory compare function is expected to compare &lt;code&gt;length&lt;/code&gt; bytes from &lt;code&gt;str1&lt;/code&gt; to &lt;code&gt;str2&lt;/code&gt; and return 0 if they&apos;re equal, smaller than 0 if &lt;code&gt;str1&lt;/code&gt; is smaller than &lt;code&gt;str2&lt;/code&gt;, greater than 0 if &lt;code&gt;str1&lt;/code&gt; is greater than &lt;code&gt;str2&lt;/code&gt;.&lt;/li&gt;
                            &lt;li&gt;define the macro &lt;code&gt;TS_MemCmp(str1,str2,len)&lt;/code&gt; that just maps to the custom memory compare function in a custom standard header file&lt;/li&gt;
                            &lt;li&gt;add the custom standard header file to Base configuration parameter &lt;em&gt;CustomStdIncludeFiles&lt;/em&gt;&lt;/li&gt;
                          &lt;/ul&gt;&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Override memory compare function (macro TS_MemCmp)"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;true&apos;) and not(node:exists(../../CustomStdIncludeFiles/*))" 
                        true="If overriding memory compare function, custom standard header file must be configured."/>
                </v:var>
                <v:var name="CustomOverride_MemBZero" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enable or disable the usage of a custom memory zeroing function. To override the default memory zeroing function&lt;ul&gt;
                            &lt;li&gt;define and implement a zeroing function with signature &lt;code&gt;void custom_membzero(void* const destination, const usize length)&lt;/code&gt; where&lt;ul&gt;
                              &lt;li&gt;&lt;code&gt;destination&lt;/code&gt; is the pointer to where the memory is zeroed&lt;/li&gt;
                              &lt;li&gt;&lt;code&gt;length&lt;/code&gt; is the number of bytes to be zeroed&lt;/li&gt;
                            &lt;/ul&gt;The memory zeroing function is expected to zero &lt;code&gt;length&lt;/code&gt; bytes from &lt;code&gt;destination&lt;/code&gt;.&lt;/li&gt;
                            &lt;li&gt;define the macro &lt;code&gt;TS_MemBZero(dst,len)&lt;/code&gt; that just maps to the custom memory zeroing function in a custom standard header file&lt;/li&gt;
                            &lt;li&gt;add the custom standard header file to Base configuration parameter &lt;em&gt;CustomStdIncludeFiles&lt;/em&gt;&lt;/li&gt;
                          &lt;/ul&gt;&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Override memory zeroing function (macro TS_MemBZero)"/>
                  <a:da name="DEFAULT" value="false"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(. = &apos;true&apos;) and not(node:exists(../../CustomStdIncludeFiles/*))" 
                        true="If overriding memory zeroing function, custom standard header file must be configured."/>
                </v:var>
              </v:ctr>
              <v:ctr name="BaseTypes" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;This container holds configuration information for the AUTOSAR base types.&lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Base Types"/>
                <a:a name="TAB" value="Base Type Configuration"/>
                <v:var name="BaseType_boolean" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;boolean&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;boolean&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.boolean.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_uint8" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;uint8&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;uint8&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.uint8.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_sint8" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;sint8&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;sint8&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.sint8.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_uint16" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;uint16&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;uint16&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.uint16.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_sint16" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;sint16&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;sint16&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.sint16.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_uint32" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;uint32&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;uint32&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.uint32.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_sint32" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;sint32&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;sint32&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.sint32.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_uint8_least" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;uint8_least&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Mapping for AUTOSAR type &apos;uint8_least&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.uint8_least.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_sint8_least" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;sint8_least&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Mapping for AUTOSAR type &apos;sint8_least&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.sint8_least.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_uint16_least" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;uint16_least&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Mapping for AUTOSAR type &apos;uint16_least&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.uint16_least.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_sint16_least" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;sint16_least&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Mapping for AUTOSAR type &apos;sint16_least&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.sint16_least.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_uint32_least" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;uint32_least&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Mapping for AUTOSAR type &apos;uint32_least&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.uint32_least.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_sint32_least" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;sint32_least&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Mapping for AUTOSAR type &apos;sint32_least&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.sint32_least.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_uint64" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;uint64&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;uint64&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.uint64.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_sint64" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;sint64&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;sint64&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.sint64.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_float32" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;float32&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;float32&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.float32.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_float64" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the AUTOSAR base type &apos;float64&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Mapping for AUTOSAR type &apos;float64&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.float64.Mapping&apos;)"/>
                </v:var>
                <v:var name="DerivedType_TS_MaxAlignedType" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the mapping from the derived type &apos;TS_MaxAlignedType&apos; to the corresponding C data type.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Mapping for derived type &apos;TS_MaxAlignedType&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Derivedtypes.TS_MaxAlignedType.Mapping&apos;)"/>
                </v:var>
                <v:var name="BaseType_Size_char" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;signed/unsigned char&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;char&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.char.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_char" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;signed/unsigned char&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;char&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.char.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_AtomicAccess_char" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to define if atomic access is possible to the C data type &apos;char&apos;.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: atomic access is possible.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: atomic access is not possible.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Atomic access to C type &apos;char&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.char.AtomicAccess&apos;) = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="BaseType_Size_short" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;signed/unsigned short&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;short&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.short.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_short" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;signed/unsigned short&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;short&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.short.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_AtomicAccess_short" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to define if atomic access is possible to the C data type &apos;short&apos;.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: atomic access is possible.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: atomic access is not possible.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Atomic access to C type &apos;short&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.short.AtomicAccess&apos;) = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="BaseType_Size_int" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;signed/unsigned int&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;int&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.int.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_int" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;signed/unsigned int&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;int&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.int.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_AtomicAccess_int" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to define if atomic access is possible to the C data type &apos;int&apos;.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: atomic access is possible.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: atomic access is not possible.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Atomic access to C type &apos;int&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.int.AtomicAccess&apos;) = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="BaseType_Size_long" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;signed/unsigned long&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;long&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.long.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_long" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;signed/unsigned long&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;long&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.long.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_AtomicAccess_long" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to define if atomic access is possible to the C data type &apos;long&apos;.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: atomic access is possible.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: atomic access is not possible.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Atomic access to C type &apos;long&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.long.AtomicAccess&apos;) = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="BaseType_Size_longlong" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;signed/unsigned long long&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;long long&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.long long.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_longlong" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;signed/unsigned long long&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;long long&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.long long.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_AtomicAccess_longlong" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to define if atomic access is possible to the C data type &apos;long long&apos;.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: atomic access is possible.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: atomic access is not possible.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Atomic access to C type &apos;long long&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.long long.AtomicAccess&apos;) = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="BaseType_Size_float" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;float&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;float&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.float.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_float" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;float&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;float&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.float.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_AtomicAccess_float" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to define if atomic access is possible to the C data type &apos;float&apos;.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: atomic access is possible.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: atomic access is not possible.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Atomic access to C type &apos;float&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.float.AtomicAccess&apos;) = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="BaseType_Size_double" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;double&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;double&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.double.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_double" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;double&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;double&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.double.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_AtomicAccess_double" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to define if atomic access is possible to the C data type &apos;double&apos;.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: atomic access is possible.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: atomic access is not possible.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Atomic access to C type &apos;double&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.double.AtomicAccess&apos;) = &apos;true&apos;" 
                        true="true" false="false"/>
                </v:var>
                <v:var name="BaseType_Alignment_nearpointer" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;nearpointer&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;nearpointer&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.nearpointer.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseType_Size_nearpointer" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;nearpointer&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;nearpointer&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.nearpointer.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Size_farpointer" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the size of the C data type &apos;farpointer&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Size of C type &apos;farpointer&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.farpointer.Size&apos;)"/>
                </v:var>
                <v:var name="BaseType_Alignment_farpointer" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of the C data type &apos;farpointer&apos; as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of C type &apos;farpointer&apos;"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Basetypes.farpointer.Alignment&apos;)"/>
                </v:var>
                <v:var name="ComplexType_Alignment_struct" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of complex &apos;struct&apos; types as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of &apos;struct&apos; complex types"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Complextypes.struct.Alignment&apos;)"/>
                </v:var>
                <v:var name="ComplexType_Alignment_array" type="STRING">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the alignment of complex &apos;array&apos; types as number of bytes.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Alignment of &apos;array&apos; complex types"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Complextypes.array.Alignment&apos;)"/>
                </v:var>
                <v:var name="BaseTypes64bit" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to enable/disable the generation of the AUTOSAR 64bit base types
                          (&lt;code&gt;sint64&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;).
                          Disabled base types are not provided by typedefs.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: generation of 64bit base types enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: generation of 64bit base types disabled.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Enable generation of base types for 64bit"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Cpu.Type&apos;) = &apos;64&apos; or ../../BaseCpuConfig/BaseCpuConfig_type = &apos;64&apos;" 
                        true="true" false="false"/>
                </v:var>
              </v:ctr>
              <v:ctr name="BaseCpuConfig" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;This container holds configuration information for the CPU.&lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="CPU Configuration"/>
                <a:a name="TAB" value="CPU Configuration"/>
                <v:var name="BaseCpuConfig_type" type="INTEGER">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the type resp. data unit size of the CPU; allowed values are 64, 32, 16, 8.&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Type of CPU"/>
                  <a:da name="DEFAULT" type="XPath" expr="ecu:get(&apos;Cpu.Type&apos;)"/>
                  <a:da name="INVALID" type="XPath" 
                        expr="(.=64 or .=32 or .=16 or .=8)" 
                        false="Value must be 64, 32, 16 or 8"/>
                </v:var>
                <v:var name="BaseCpuConfig_byteorder" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the byte order of the CPU, big endian (BE) or little endian (LE).&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Byte order"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Cpu.Byteorder&apos;)"/>
                  <a:da name="RANGE">
                    <a:v>BE</a:v>
                    <a:v>LE</a:v>
                  </a:da>
                </v:var>
                <v:var name="BaseCpuConfig_bitorder" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Define the bit order of the CPU, big endian (BE) or little endian (LE).&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Bit order"/>
                  <a:da name="DEFAULT" type="XPath" 
                        expr="ecu:get(&apos;Cpu.Bitorder&apos;)"/>
                  <a:da name="RANGE">
                    <a:v>BE</a:v>
                    <a:v>LE</a:v>
                  </a:da>
                </v:var>
              </v:ctr>
              <v:ctr name="GeneralTypes" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                      &lt;p&gt;This container holds configuration information for the AUTOSAR types part of the &lt;code&gt;&amp;lt;Bus&amp;gt;_GeneralTypes&lt;/code&gt;.&lt;/p&gt;
                    &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="General Types"/>
                <v:var name="GeneralTypes_Can_ControllerStateType" 
                       type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Switch to enable/disable the generation of the AUTOSAR type
                          &lt;code&gt;Can_ControllerStateType&lt;/code&gt;.
                          Disabled types are not provided by typedefs.&lt;/p&gt;
                          &lt;ul&gt;
                            &lt;li&gt;&lt;code&gt;true&lt;/code&gt;: generation of type Can_ControllerStateType enabled.&lt;/li&gt;
                            &lt;li&gt;&lt;code&gt;false&lt;/code&gt;: generation of type Can_ControllerStateType disabled.&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" 
                       value="Enable generation of Can_ControllerStateType"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
              </v:ctr>
              <v:ctr name="BaseEcuConfig" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        &lt;p&gt;
                          This container holds parameters for the generation of ARXML with ECU parameter configuration.
                          The ARXML files are placed in the folder &lt;code&gt;&lt;project output path &gt;/ecuconfig_arxml&lt;/code&gt;.
                          For each module in the project a separate file is created.
                        &lt;/p&gt;
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Ecu Configuration Export"/>
                <a:a name="TAB" value="ECU Configuration"/>
                <v:var name="BaseEcuConfigAlwaysExport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;
                            Always create ARXML files during code generation.
                            &lt;ul&gt;
                              &lt;li&gt;&lt;strong&gt;Enabled:&lt;/strong&gt; ARXML files are created in all generator modes&lt;/li&gt;
                              &lt;li&gt;&lt;strong&gt;Disabled:&lt;/strong&gt; ARXML files are only created in the generator mode &lt;strong&gt;export_asr_config&lt;/strong&gt; (Default)&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Always Export"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="BaseEcuConfigAsrVersion" type="ENUMERATION">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Choose the AUTOSAR version for the file format for the ECU configuration.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="LABEL" value="Autosar version"/>
                  <a:da name="DEFAULT" value="r4_0_3"/>
                  <a:da name="RANGE">
                    <a:v>r2_0</a:v>
                    <a:v>r2_1</a:v>
                    <a:v>r3_0</a:v>
                    <a:v>r3_1</a:v>
                    <a:v>r3_2</a:v>
                    <a:v>r4_0_2</a:v>
                    <a:v>r4_0_3</a:v>
                    <a:v>r4_1_3</a:v>
                    <a:v>r4_2_1</a:v>
                    <a:v>r4_2_2</a:v>
                    <a:v>r4_3_0</a:v>
                  </a:da>
                </v:var>
              </v:ctr>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="3"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="5"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="31"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the Base can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>
